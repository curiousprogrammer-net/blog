<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.4.1" created="2020-05-08 06:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Curious (Clojure) Programmer</title>
	<link>https://curiousprogrammer.net</link>
	<description>To succeed with Clojure</description>
	<pubDate>Fri, 08 May 2020 06:01:58 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://curiousprogrammer.net</wp:base_site_url>
	<wp:base_blog_url>https://curiousprogrammer.net</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[jumar]]></wp:author_login><wp:author_email><![CDATA[juraj@curiousprogrammer.net]]></wp:author_email><wp:author_display_name><![CDATA[Juraj Martinka]]></wp:author_display_name><wp:author_first_name><![CDATA[Juraj]]></wp:author_first_name><wp:author_last_name><![CDATA[Martinka]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[clojure]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Clojure]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[clojurescript]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[ClojureScript]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[fpbrno]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[FPBrno]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[learning]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Learning]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[meetup]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Meetup]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[my-bookshelf]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[My Bookshelf]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[podcast]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Podcast]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[productivity]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Productivity]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[screencast]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[ScreenCast]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>10</wp:term_id>
		<wp:category_nicename><![CDATA[tools]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Tools]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[clojure-tip-of-the-day]]></wp:category_nicename>
		<wp:category_parent><![CDATA[screencast]]></wp:category_parent>
		<wp:cat_name><![CDATA[Clojure Tip of the Day]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[defn-podcast]]></wp:category_nicename>
		<wp:category_parent><![CDATA[podcast]]></wp:category_parent>
		<wp:cat_name><![CDATA[Defn Podcast]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[ides-editors]]></wp:category_nicename>
		<wp:category_parent><![CDATA[tools]]></wp:category_parent>
		<wp:cat_name><![CDATA[IDEs / editors]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[emacscider]]></wp:category_nicename>
		<wp:category_parent><![CDATA[ides-editors]]></wp:category_parent>
		<wp:cat_name><![CDATA[Emacs/Cider]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[blog]]></wp:tag_slug>
		<wp:tag_name><![CDATA[blog]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blog]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[blog]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clojure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Clojure]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clojurescript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ClojureScript]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[fpbrno]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[FPBrno]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[learning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Learning]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[meetup]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Meetup]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[my-bookshelf]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[My Bookshelf]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pages]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Pages]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[podcast]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Podcast]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[productivity]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Productivity]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[screencast]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ScreenCast]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tools]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Tools]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clojure-tip-of-the-day]]></wp:term_slug>
		<wp:term_parent><![CDATA[screencast]]></wp:term_parent>
		<wp:term_name><![CDATA[Clojure Tip of the Day]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[defn-podcast]]></wp:term_slug>
		<wp:term_parent><![CDATA[podcast]]></wp:term_parent>
		<wp:term_name><![CDATA[Defn Podcast]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ides-editors]]></wp:term_slug>
		<wp:term_parent><![CDATA[tools]]></wp:term_parent>
		<wp:term_name><![CDATA[IDEs / editors]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[emacscider]]></wp:term_slug>
		<wp:term_parent><![CDATA[ides-editors]]></wp:term_parent>
		<wp:term_name><![CDATA[Emacs/Cider]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>2</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[pages]]></wp:term_slug><wp:term_name><![CDATA[Pages]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.4.1</generator>

		<item>
		<title>About</title>
		<link>https://curiousprogrammer.net/about/</link>
		<pubDate>Fri, 13 Jan 2017 21:32:16 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<div><img style="float: right;" src="../JurajMartinka.png" alt="Juraj Martinka profile photo" />
Hi, my name is <a href="http://jurajmartinka.com/"><em><strong>Juraj Martinka</strong></em></a> and I’m the author of the <strong><i>Curious (Clojure) Programmer</i></strong> blog.
I’ve created this blog with following goals in my mind:
<ul style="margin-left: 30px;">
    <li><strong>To Learn Clojure and ClojureScript by Example</strong></li>
    <li><strong>To share my experience with other people who strive to find an effective learning process</strong></li>
</ul>
More specifically, I'd like to:
<ul style="margin-left: 30px;">
    <li>provide step-by-step tutorials with real-world examples ranging from most basic stuff to more complex Clojure/ClojureScript projects.</li>
    <li>share with you many general learning &amp; productivity tips</li>
    <li>embrace functional programming techniques</li>
</ul>
</div>

<h2 id="about-me">About me</h2>

I’m a curious software developer with the passion for Learning, Self-improvement and Problem solving.
I’ve been coding professionally in Java since 2008 and in Clojure since 2017.

Nowadays, I enjoy working full-time with Clojure on <a href="https://codescene.io">CodeScene</a> (code/project analysis tool).

I'm also an organizer of <a href="https://www.meetup.com/fpbrno">Functional Programming Brno</a> and <a href="https://www.meetup.com/brno-clojure/">Brno Clojure</a> meetups.

You can find me online:

<ul>
    <li><strong>Personal Website</strong>: <a href="https://jurajmartinka.com/">https://jurajmartinka.com/</a></li>
    <li>Curious Programmer YouTube channel: <a href="https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg">https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg</a></li>
    <li>LinkedIn: <a href="https://www.linkedin.com/in/juraj-martinka-69916826/">https://www.linkedin.com/in/juraj-martinka-69916826/</a></li>
    <li>GitHub:
<ul>
    <li>open source + blog related stuff: <a href="https://github.com/curiousprogrammer-net">https://github.com/curiousprogrammer-net</a></li>
    <li>personal/random projects: <a href="https://github.com/jumarko">https://github.com/jumarko</a></li>
</ul>
</li>
    <li>Twitter: <a href="https://twitter.com/martinkajuraj">https://twitter.com/martinkajuraj</a></li>
    <li>Clojurians slack: <a href="https://clojurians.slack.com/messages/C03RZGPG1/team/U06BE1L6T/"><em>jumar</em></a></li>
    <li>StackOverflow: <a href="http://stackoverflow.com/users/1184752/jumar">http://stackoverflow.com/users/1184752/jumar</a></li>
    <li>Meetup.com profile: <a href="https://www.meetup.com/members/75616542/">https://www.meetup.com/members/75616542/</a></li>
    <li>GoodReads profile: <a href="https://www.goodreads.com/user/show/61742630-juraj-martinka">https://www.goodreads.com/user/show/61742630-juraj-martinka</a></li>
    <li>Old blog: <a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://outofsingularity.wordpress.com/">outofsingularity.wordpress.com</a></li>
</ul>

<a href="http://jurajmartinka.com/cv_en.pdf">My Resume</a> (PDF)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2017-01-13 21:32:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-13 21:32:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2017/01/14/17/</link>
		<pubDate>Sat, 14 Jan 2017 13:13:56 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2017-01-14 13:13:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-14 13:13:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[17]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Home</title>
		<link>https://curiousprogrammer.net/2017/01/14/home/</link>
		<pubDate>Sat, 14 Jan 2017 13:16:23 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/2017/01/14/home/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2017-01-14 13:16:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-14 13:16:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[home]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://curiousprogrammer.net]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>twentysixteen</title>
		<link>https://curiousprogrammer.net/2017/03/08/twentysixteen/</link>
		<pubDate>Wed, 08 Mar 2017 11:08:06 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/2017/03/08/twentysixteen/</guid>
		<description></description>
		<content:encoded><![CDATA[/*
You can add your own CSS here.

Click the help icon above to learn more.
*/
ul {
	margin-left: 30px;
}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2017-03-08 11:08:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-08 11:08:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[twentysixteen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>my-bookshelf-01</title>
		<link>https://curiousprogrammer.net/2017/03/08/my-bookshelf-create-a-project-skeleton-for-clojure-web-application/my-bookshelf-01/</link>
		<pubDate>Wed, 08 Mar 2017 11:21:35 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/wp-content/uploads/2017/03/my-bookshelf-01.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2017-03-08 11:21:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-08 11:21:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[my-bookshelf-01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>105</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://curiousprogrammer.net/wp-content/uploads/2017/03/my-bookshelf-01.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/03/my-bookshelf-01.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:442;s:6:"height";i:146;s:4:"file";s:27:"2017/03/my-bookshelf-01.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"my-bookshelf-01-150x146.png";s:5:"width";i:150;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"my-bookshelf-01-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>blogi</title>
		<link>https://curiousprogrammer.net/2017/05/12/blogi/</link>
		<pubDate>Fri, 12 May 2017 09:21:59 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/2017/05/12/blogi/</guid>
		<description></description>
		<content:encoded><![CDATA[/*
You can add your own CSS here.

Click the help icon above to learn more.
*/
body {
  font-family: 'Times New Roman', serif;
}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2017-05-12 09:21:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-12 09:21:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[blogi]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JurajMartinka</title>
		<link>https://curiousprogrammer.net/jurajmartinka/</link>
		<pubDate>Wed, 01 Nov 2017 10:06:27 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/wp-content/uploads/2017/11/JurajMartinka.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2017-11-01 10:06:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-01 10:06:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jurajmartinka]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://curiousprogrammer.net/wp-content/uploads/2017/11/JurajMartinka.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/11/JurajMartinka.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:236;s:6:"height";i:260;s:4:"file";s:25:"2017/11/JurajMartinka.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"JurajMartinka-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:25:"blogarama-small-thumbnail";a:4:{s:4:"file";s:25:"JurajMartinka-100x100.png";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}s:27:"blogarama-widget-post-thumb";a:4:{s:4:"file";s:23:"JurajMartinka-64x64.png";s:5:"width";i:64;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_blogarama]]></wp:meta_key>
		<wp:meta_value><![CDATA[1509530796]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[blogarama]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day Screencast</title>
		<link>https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/</link>
		<pubDate>Sun, 05 Nov 2017 09:16:56 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?page_id=228</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>UPDATE: </strong>I decided to archive this screencast and focus on the new leaner version of it: <a href="https://curiousprogrammer.net/clojure-quips/"><em><strong>Clojure Quips</strong></em></a>

This is the list of <em>Clojure Tip of the Day s</em>creencast<em> </em>episodes.

You can find all episodes on YouTube: <a href="https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg">https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg</a>

Source code is in GitHub repository <a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day">curiousprogrammer-net/clojure-tip-of-the-day</a>.

<h2>List Of All Episodes</h2>

<ul>
    <li><a href="#e009">Episode 9: Clojure Concurrency - Introduction</a></li>
    <li><a href="#e008">Episode 8: Clojure Concurrency - Welcome</a></li>
    <li><a href="#e007">Episode 7: clj-refactor</a></li>
    <li><a href="#e006">Episode 6: How To Reload Multimethod Definition</a></li>
    <li><a href="#e005">Episode 5: Threading Macros: part 2 – some-&gt;, some-&gt;&gt;, cond-&gt;, cond-&gt;&gt;</a></li>
    <li><a href="#e004">Episode 4: Threading Macros: part 1 – thread-first, thread-last, thread-as</a></li>
    <li><a href="#e003">Episode 3: Threading Macros Tracing</a></li>
    <li><a href="#e002">Episode 2: Cider Enlighten Mode</a></li>
    <li><a href="#e001">Episode 1: Cider Debugger</a></li>
</ul>

<h2>Episodes - links &amp; details</h2>

<h3 id="e009">Episode 9: Clojure Concurrency - Introduction</h3>

This is the first real episode in the Clojure Concurrency series.
It covers a lot of material: vars, atoms, refs, agents, futures, promises, delays, unified succession model, deref with timeout and a brief mention of other concurrency options. Lots of the topics will be covered in more detail in a separate episode.

<ul>
    <li style="text-align: left;"><a href="https://youtu.be/uY7_at2VtMU">Video</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/009_clojure_concurrency_01.clj">"Source code"</a></li>
    <li>See also the previous episode (Clojure Concurrency - Welcome)</li>
</ul>

<h3 id="e008">Episode 8: Clojure Concurrency - Welcome</h3>

<ul>
    <li style="text-align: left;"><a href="https://youtu.be/LKomnPz4Kek">Video</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/008_clojure_concurrency_00.clj">"Source code"</a></li>
    <li><strong>Resources</strong>
<ul>
    <li><a href="https://purelyfunctional.tv/guide/clojure-concurrency/">The Ultimate Guide to Clojure Concurrency</a></li>
    <li><a href="https://purelyfunctional.tv/courses/concurrency/">PurelyFunctional.tv concurrency lessons</a></li>
    <li><a href="https://www.youtube.com/watch?v=nDAfZK8m5_8">Clojure Concurrency - Rich Hickey</a></li>
</ul>
</li>
</ul>

<h3 id="e007">Episode 7: clj-refactor</h3>

<ul>
    <li><a href="https://youtu.be/5PHWV-z_jTw">Video</a></li>
    <li><a href="https://curiousprogrammer.net/2018/03/05/clojure-tip-of-the-day-episode-7-clj-refactor/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/007_clj_refactor.clj#L6">Source code</a></li>
</ul>

<h3 id="e006">Episode 6: How To Reload Multimethod Definition</h3>

<ul>
    <li><a href="https://www.youtube.com/watch?v=aEAb1SoVMJ8">Video</a></li>
    <li><a href="https://curiousprogrammer.net/2018/02/05/clojure-tip-of-the-day-episode-6-how-to/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/006_multimethod_reload.clj">Source code</a></li>
</ul>

<h3 id="e005">Episode 5: Threading Macros: part 2 – some-&gt;, some-&gt;&gt;, cond-&gt;, cond-&gt;&gt;</h3>

<ul>
    <li><a href="https://www.youtube.com/watch?v=hgu3jT1YI_U">Video</a></li>
    <li><a href="https://curiousprogrammer.net/2018/01/24/clojure-tip-of-the-day-episode-5-threading-macros-part-2-some-some-cond-cond/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/004_threading_macros.clj#L87">Source code</a></li>
</ul>

<h3 id="e004">Episode 4: Threading Macros: part 1 – thread-first, thread-last, thread-as</h3>

<ul>
    <li><a href="https://www.youtube.com/watch?v=w0CxOHmny80">Video</a></li>
    <li><a href="https://curiousprogrammer.net/2018/01/18/clojure-tip-of-the-day-episode-4-threading-macros-part-1-thread-first-thread-last-thread-as/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/004_threading_macros.clj">Source code</a></li>
</ul>

<h3 id="e003">Episode 3: Threading Macros Tracing</h3>

<ul>
    <li><a href="https://www.youtube.com/watch?v=z5pe9ydcYoI">Video</a></li>
    <li><a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://curiousprogrammer.net/2017/11/20/clojure-tip-of-the-day-episode-3-threading-macros-tracing/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/003_threading_macros_tracing.clj">Source code</a></li>
</ul>

<h3 id="e002">Episode 2: Cider Enlighten Mode</h3>

<ul>
    <li><a href="https://youtu.be/tCu2AewBTR4">Video</a></li>
    <li><a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://curiousprogrammer.net/2017/11/09/clojure-tip-of-the-day-episode-2-cider-enlighten-mode/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/002_cider_enligthen_mode.clj">Source code</a></li>
</ul>

<h3 id="e001">Episode 1: Cider Debugger</h3>

<ul>
    <li><a href="https://www.youtube.com/watch?v=jHCch3-Yuac">Video</a></li>
    <li><a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://curiousprogrammer.net/2017/11/05/introducing-clojure-tip-of-the-day-screencast/">Blog post</a></li>
    <li><a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/001_cider_debugger.clj">Source code</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2017-11-05 09:16:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-05 09:16:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-screencast]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2017/11/05/235/</link>
		<pubDate>Sun, 05 Nov 2017 09:21:47 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/2017/11/05/235/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2017-11-05 09:21:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-05 09:21:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[235]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[228]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Logo_Lambdup</title>
		<link>https://curiousprogrammer.net/2017/11/09/lambdup-functional-meetup-in-prague/logo_lambdup/</link>
		<pubDate>Thu, 09 Nov 2017 09:17:36 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/wp-content/uploads/2017/11/Logo_Lambdup.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2017-11-09 09:17:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-09 09:17:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logo_lambdup]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://curiousprogrammer.net/wp-content/uploads/2017/11/Logo_Lambdup.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/11/Logo_Lambdup.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:144;s:4:"file";s:24:"2017/11/Logo_Lambdup.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"Logo_Lambdup-150x144.png";s:5:"width";i:150;s:6:"height";i:144;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"Logo_Lambdup-300x69.png";s:5:"width";i:300;s:6:"height";i:69;s:9:"mime-type";s:9:"image/png";}s:25:"blogarama-small-thumbnail";a:4:{s:4:"file";s:24:"Logo_Lambdup-100x100.png";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}s:27:"blogarama-widget-post-thumb";a:4:{s:4:"file";s:22:"Logo_Lambdup-64x64.png";s:5:"width";i:64;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ruby Freelancer Podcast Episode 273 - Value Pricing: How To Have a Better &quot;Why&quot; Conversation</title>
		<link>https://curiousprogrammer.net/?p=303</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This is a slightly unusual topic but a very relevant one for all kinds of freelancers. The episode presents a great summary of "Value Pricing" basics. Follow Jonathan Stark at <a href="http://expensiveproblem.com/">http://expensiveproblem.com/</a> and <a href="https://www.ditchinghourly.com/">Ditching Hourly podcast</a> if you want to learn more about value pricing.</em>

<em>Again, this is how I "recorded" it and took my notes while listening. You're definitely better off checking the original podcast and doing your own notes/remarks.</em>

&nbsp;

<a href="https://devchat.tv/freelancers/fs-273-better-conversation">Ruby Freelancer Show - episode 273: How To Have A Better ‘Why’ Conversation</a>

<h2>My Summary</h2>

<ul>
    <li>You need to ask your client three WHY questions?
<ul>
    <li><em><strong>Why this?</strong></em></li>
    <li><em><strong>Why me?</strong></em></li>
    <li><em><strong>Why now?</strong></em></li>
</ul>
</li>
    <li>Medical analogy: you wouldn't tell your doctor how he should treat you and ask him how much he charge per hour
<ul>
    <li>=&gt; be prepared to reject client's self-analysis</li>
</ul>
</li>
    <li>At the beginning of the sales call, let client dump their brain to tell you everything they find important.</li>
    <li>Then ask for a big picture: ask simple questions and go deeper and deeper to find the true reason why they want to do the project (5 Whys)
<ul>
    <li><strong><em>Why this?</em></strong></li>
    <li>"Why exactly do you guys want to do this thing?"</li>
    <li>"Why not just continue to do what you do now?" - e.g. handling the labor manually, ignoring it, using old software solution, etc.</li>
</ul>
</li>
    <li><strong><em>Why now?</em></strong>
<ul>
    <li>"What changed? Why is the problem urgent now if it wasn't for the last 12 months?"</li>
    <li>Jonathan: If it's not urgent then it's dead for me.</li>
</ul>
</li>
    <li><em><strong>Why me?</strong></em>
<ul>
    <li>"Why not outsource your development efforts to Costa Rica?"</li>
    <li>"Why not handle it internally?"</li>
</ul>
</li>
    <li><strong>If they ask for your hourly rate, say firmly</strong>: <span style="color: #ff6600;">"I don't have hourly rate; that's not how I work. But I would be happy to give you a fixed project price for the work. Would you be interested in talking about that?"</span>
<ul>
    <li>DO NOT SAY: "I prefer not to bill hourly."</li>
    <li>Don't talk about money until you truly understand their problem.</li>
    <li>Hourly billing is bad for the project - they can't argue against that</li>
    <li>Don't say that it's bad for the company. Put success of the project as the most important thing</li>
    <li>I don't have hourly rate because it's hard to figure out. There's no such thing as a standard market rate.</li>
</ul>
</li>
    <li><strong>Novice mistakes</strong>
<ul>
    <li>Giving up too early in the WHY conversation - basically giving up after the first question.
<ul>
    <li>Freelancer: "Why don't you just handle it manually?"</li>
    <li>Client: "Well, it's just too much work and it's inefficient."</li>
    <li>Freelancer: "Okay, that sounds reasonable."</li>
</ul>
</li>
    <li>Telling them about value pricing and explaining all the benefits to them
<ul>
    <li>just tell them that you give them a fixed price for the project</li>
</ul>
</li>
</ul>
</li>
    <li><strong>Value pricing mindset</strong>: trying to find for them the cheapest possible option as if you were business owner's best friend.
<ul>
    <li>Imaging that they're not trying to hire you but they are your best friends and are trying to hire someone else - and you should give them the best possible advice.</li>
</ul>
</li>
    <li><strong>Handling change requests</strong>
<ul>
    <li>Tell them in advance: I'm going to be the project guardian and I'll say no to your change requests for the sake of project's success</li>
</ul>
</li>
    <li><strong>Proposals</strong>
<ul>
    <li>Take your proposal template as a base for a discussion with a client
<ul>
    <li>Basically, let them fill in your proposal using their language</li>
    <li>=&gt; that way, the proposal will be intimately familiar to them</li>
</ul>
</li>
    <li>Design your proposal so the benefits of your work are clear to everyone in the organization - CEO, CFO, CTO, Architect, Tech Lead, etc.
<ul>
    <li>technical details are important in some cases but they shouldn't be the main focus of your proposal</li>
</ul>
</li>
</ul>
</li>
    <li><strong>Gotchas</strong>
<ul>
    <li>Value pricing doesn't work well for those who are early in their career - just learning their craft</li>
</ul>
</li>
    <li><strong>Resources</strong>
<ul>
    <li><a href="https://www.isixsigma.com/tools-templates/cause-effect/determine-root-cause-5-whys/">Five Whys six sigma technique</a> (example from Wikipedia)
<ul>
    <li>Problem Statement: Customers are unhappy because they are being shipped products that don’t meet their specifications.</li>
    <li>1. Why are customers being shipped bad products?
<ul>
    <li>Because manufacturing built the products to a specification that is different from what the customer and the sales person agreed to.</li>
</ul>
</li>
    <li>2. Why did manufacturing build the products to a different specification than that of sales?
<ul>
    <li>Because the sales person expedites work on the shop floor by calling the head of manufacturing directly to begin work. An error happened when the specifications were being communicated or written down.</li>
</ul>
</li>
    <li>3. Why does the sales person call the head of manufacturing directly to start work instead of following the procedure established in the company?
<ul>
    <li>Because the “start work” form requires the sales director’s approval before work can begin and slows the manufacturing process (or stops it when the director is out of the office).</li>
</ul>
</li>
    <li>4. Why does the form contain an approval for the sales director?
<ul>
    <li>Because the sales director needs to be continually updated on sales for discussions with the CEO.</li>
</ul>
</li>
    <li>In this case only four Whys were required to find out that a non-value added signature authority is helping to cause a process breakdown.</li>
</ul>
</li>
    <li>YouTube video "how to become trusted advisor for your client"
<ul>
    <li>Jay Abraham 31 min Advanced strategy of Preeminence: <a href="https://www.youtube.com/watch?v=2Gw14EJkzYs">https://www.youtube.com/watch?v=2Gw14EJkzYs</a>
<ul>
    <li>it's about How to become a trusted advisor for your client</li>
</ul>
</li>
</ul>
</li>
    <li>Jonathan's <a href="https://expensiveproblem.com/pricing">https://expensiveproblem.com/pricing</a>
<ul>
    <li>This is also a great example of products that may be offered to clients.</li>
</ul>
</li>
    <li>Book <a href="https://www.amazon.com/Fifty-Inventions-Shaped-Modern-Economy-ebook/dp/B01MXV2YGI/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1511546025&amp;sr=1-1&amp;keywords=50+Things+That+Made+The+Modern+Economy">Fifty Inventions That Shaped The Modern Economy </a>
<ul>
    <li>recommended by Reuven, confirmed by Kai who studied the economy.</li>
    <li>also Tim Harford's other books:
<ul>
    <li><a href="https://www.amazon.com/Undercover-Economist-Tim-Harford/dp/0345494016">Undercover Economist</a></li>
    <li><a href="https://www.amazon.com/Undercover-Economist-Strikes-Run-Ruin/dp/159463291X">The Undercover Economist Strikes Back: How to Run--or Ruin--an Economy</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2018-02-13 08:59:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518555592;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:298;}i:1;a:1:{s:2:"id";i:190;}i:2;a:1:{s:2:"id";i:38;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>My Talks</title>
		<link>https://curiousprogrammer.net/my-talks/</link>
		<pubDate>Mon, 16 Apr 2018 09:19:54 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?page_id=326</guid>
		<description></description>
		<content:encoded><![CDATA[This is the list of my previous talks.

<h3>Table of Contents</h3>

<ul>
        <li>2019 - <a href="#2019-gdg-jihlava-codescene">Beyond Technical Debt: Unconventional techniques to uncover technical and social issues in your code</a></li>
    <li>2018 - <a href="#2018-codescene-clojure-vienna">CodeScene: Get Deep Insights into Your (Clojure) Code</a></li>
    <li>2017 - <a href="#2017-fpbrno-clojure">Clojure: A Functional LISP for the JVM</a></li>
</ul>

&nbsp;

<h2>2019</h2>

<h3 id="2019-gdg-jihlava-codescene"><a href="https://www.meetup.com/gdgjihlava/events/265293406/">Beyond Technical Debt: Unconventional techniques to uncover technical and social issues in your code</a></h3>

<b>Slides (PDF)</b>: <a href="https://curiousprogrammer.net/GdgJihlava-CodeScene.pdf">https://curiousprogrammer.net/GdgJihlava-CodeScene.pdf</a>

<b>Abstract</b>:
* Traditional static code analysis tools (Sonar et al.) are notoriously bad at producing actionable insights (what does the "4000 years of accumulated technical debt" really mean?)
* CodeScene takes a different approach and focuses instead on how code evolves over time using a treasure trove we all posses - version control history.
* Come and meet CodeScene, a unique behavioral code analysis tool that looks for patterns in version control data to understand the history and evolution of a codebase: unraveling things like hotspots, change coupling between modules and interesting social aspects of the code.
* I'll describe the ideas behind CodeScene, how it works and demonstrate the techniques on analyses of real projects.

<h2>2018</h2>

<h3 id="2018-codescene-clojure-vienna"><a href="https://www.meetup.com/clojure-vienna/events/247814217/" target="_blank" rel="noopener noreferrer">CodeScene: Get Deep Insights into Your (Clojure) Code</a></h3>

I presented <a href="https://codescene.io" target="_blank" rel="noopener noreferrer">CodeScene</a>, a revolutionary behavioral code analysis tool from <a href="https://empear.com/" target="_blank" rel="noopener noreferrer">Empear</a> (the company I work for).

Youtube video (audio + slides): <a href="https://youtu.be/rpkZvx2b0V4">https://youtu.be/rpkZvx2b0V4</a>

Slides: <a href="https://www.slideshare.net/jurajmartinka77/codescene-get-deep-insights-into-your-clojure-code-clojure-vienna-meetup-march-2018" target="_blank" rel="noopener noreferrer">https://www.slideshare.net/jurajmartinka77/codescene-get-deep-insights-into-your-clojure-code-clojure-vienna-meetup-march-2018</a>

&nbsp;

<h2>2017</h2>

<h3 id="2017-fpbrno-clojure"><a href="https://www.meetup.com/fpbrno/events/243877465/" target="_blank" rel="noopener noreferrer">Clojure: A Functional LISP for the JVM</a></h3>

A rather long presentation for <a href="https://www.meetup.com/fpbrno/">Functional Programming Brno meetup</a>. It was fun and my first public presentation for a bigger audience (~20 people).

Youtube video (audio + slides): <a href="https://youtu.be/YeUOWaM_Gk8">https://youtu.be/YeUOWaM_Gk8</a>

Slides: <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/" target="_blank" rel="noopener noreferrer">https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/</a>

<strong>Summary</strong>: <a href="https://curiousprogrammer.net/2017/11/01/functional-programming-brno-meetup-clojure/" target="_blank" rel="noopener noreferrer">https://curiousprogrammer.net/2017/11/01/functional-programming-brno-meetup-clojure/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date><![CDATA[2018-04-16 09:19:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-16 09:19:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[my-talks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2018/04/16/336/</link>
		<pubDate>Mon, 16 Apr 2018 09:23:55 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/2018/04/16/336/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2018-04-16 09:23:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-16 09:23:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[336]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[326]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Quips</title>
		<link>https://curiousprogrammer.net/clojure-quips/</link>
		<pubDate>Thu, 21 Feb 2019 08:23:16 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?page_id=363</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><strong>UPDATE: </strong>I'm no longer actively working on the screencast; I might revive it in the future but I don't plan to add new content anytime soon.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the list of the <em><strong>Clojure Quips</strong> </em>screencast episodes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's a newer incarnation of my former <strong><em><a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of The Day screencast</a></em></strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can find all the episodes in the <a href="https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg">Curious Programmer Youtube channel</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><g class="gr_ gr_23 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar only-ins replaceWithoutSep" id="23" data-gr-id="23">Source</g> code is in GitHub repository&nbsp;<a href="https://github.com/curiousprogrammer-net/clojure-quips"><g class="gr_ gr_27 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="27" data-gr-id="27">curiousprogrammer</g>-net/<g class="gr_ gr_26 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace" id="26" data-gr-id="26">clojure</g>-quips</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>List Of All Episodes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="#e002">002 - clj-async-profiler</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="#e001">001 - bounded-count</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Episodes - links &amp; details</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 id="e002">002 - clj-async-profiler</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>How to quickly check if a potentially infinite sequence contains at most X elements?</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://youtu.be/yqNLDpooFjw">video</a></li><li><a href="https://github.com/curiousprogrammer-net/clojure-quips/blob/master/src/clojure_quips/002_async_profiler.clj">source code </a>and related <a href="https://github.com/curiousprogrammer-net/clojure-quips/pull/1">Pull Request</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="e001">001 - bounded-count</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><em>How to quickly check if a potentially infinite sequence contains at most X elements?</em></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://www.youtube.com/watch?v=rlucNAvwqg0&amp;feature=youtu.be">video</a></li><li><a href="https://github.com/curiousprogrammer-net/clojure-quips/blob/master/src/clojure_quips/001-bounded-count.clj">source code</a></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2019-02-21 08:23:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-21 08:23:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-quips]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1588030435;s:7:"payload";a:5:{i:0;a:1:{s:2:"id";i:228;}i:1;a:1:{s:2:"id";i:326;}i:2;a:1:{s:2:"id";i:3;}i:3;a:1:{s:2:"id";i:402;}i:4;a:1:{s:2:"id";i:392;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2019/02/25/370/</link>
		<pubDate>Mon, 25 Feb 2019 08:41:35 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=370</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2019-02-25 08:41:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-25 08:41:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[370]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[363]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Book Summaries</title>
		<link>https://curiousprogrammer.net/book-summaries/</link>
		<pubDate>Mon, 27 Apr 2020 11:16:02 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?page_id=392</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Some of the books I've read and their brief <strong><em>summaries</em></strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These aren't <em>reviews</em> although I often say how much I liked (or didn't like) the book. I <strong>focus on</strong> <strong>useful information</strong> and practical advice you can get from the book.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:16:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:16:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[book-summaries]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1587986218;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces</title>
		<link>https://curiousprogrammer.net/?p=397</link>
		<pubDate>Mon, 27 Apr 2020 11:15:07 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Weekly summaries of<strong> interesting, surprising, and worth-to-remember</strong> concepts, facts, ideas, experiences, events, tools/libraries, etc. It's <strong>something that I did, learned, or found</strong> in the past week.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I focus on <strong>practical advice </strong>mostly in programming related topics. I work daily with Clojure &amp; JVM so most of the topics (somewhat) relate to them. But the range is rather large, including Learning &amp; Problem solving, Computer science fundamentals, Operating systems / Linux, Networking, Distributed systems, Data science, and Project management.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can think of it as a <strong>personal weekly journal </strong>or an <strong>email newsletter</strong>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:15:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:15:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[weekly-bits-pieces]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588029142;s:7:"payload";a:4:{i:0;a:1:{s:2:"id";i:320;}i:1;a:1:{s:2:"id";i:94;}i:2;a:1:{s:2:"id";i:80;}i:3;a:1:{s:2:"id";i:305;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588029146;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:371;}i:1;a:1:{s:2:"id";i:298;}i:2;a:1:{s:2:"id";i:190;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces</title>
		<link>https://curiousprogrammer.net/weekly-bits-pieces/</link>
		<pubDate>Mon, 27 Apr 2020 11:19:22 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?page_id=402</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Weekly summaries of<strong> interesting, surprising, and worth-to-remember</strong> concepts, facts, ideas, experiences, events, tools/libraries, etc. It's <strong>something that I did, learned, or found</strong> in the past week.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I focus on <strong>practical advice </strong>mostly related to programming. I work daily with Clojure &amp; JVM so most of the topics are loosely related to them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But I cover a large range of topics: Learning &amp; Problem solving, Computer science fundamentals, Operating systems / Linux, Networking, Distributed systems, Data science, Project management, and some portion of my hobbies.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can think of it as a <strong>personal weekly journal </strong>or an <strong>email newsletter</strong>.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:19:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:19:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[weekly-bits-pieces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"bfc62710165ed7b51223b165689d40a3";a:2:{s:7:"expires";i:1588610993;s:7:"payload";a:5:{i:0;a:1:{s:2:"id";i:228;}i:1;a:1:{s:2:"id";i:392;}i:2;a:1:{s:2:"id";i:363;}i:3;a:1:{s:2:"id";i:326;}i:4;a:1:{s:2:"id";i:3;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2020/04/27/406/</link>
		<pubDate>Mon, 27 Apr 2020 11:20:16 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/2020/04/27/406/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:20:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:20:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[406]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[402]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/2020/04/27/407/</link>
		<pubDate>Mon, 27 Apr 2020 11:20:16 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/2020/04/27/407/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:20:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:20:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[407]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="pages"><![CDATA[Pages]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[392]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>How to Create a Blog To Boost Your Career</title>
		<link>https://curiousprogrammer.net/2017/01/28/how-to-create-a-blog-to-boost-your-career/</link>
		<pubDate>Sat, 28 Jan 2017 16:17:42 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[Here I am, finally writing the first blog post for my new blog. I’ve managed to sit down and <a href="http://lifehacker.com/5972825/inspiration-is-for-amateurs--the-rest-of-us-just-show-up-and-get-to-work">do the hard work - without any excuses</a>.

It’s been nine months since I bought a copy of John Sonmez’s book <a href="https://www.amazon.com/gp/product/1617292397/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617292397&amp;linkCode=as2&amp;tag=jumarkocuriou-20&amp;linkId=81bc42d9c4c392a2a84b61b87a400b80">Soft Skills: The software developer's life manual</a><img src="//ir-na.amazon-adsystem.com/e/ir?t=jumarkocuriou-20&amp;l=am2&amp;o=1&amp;a=1617292397" alt="" width="1" height="1" border="0" />. However, I didn’t get to read it for quite a while. Do you have the same problem with constantly buying new books without actually reading them? Yet the book was there, waiting on a shelf and attracting my attention from time to time.

Eventually, when we returned home from our best-in-a-whole-life 3-month USA road trip, I decided to give it a shot. The forewords by Uncle Bob and Scott Hanselman gave me a confidence that it would be a good read.

While I'd already had a brief overview of some of the topics covered in the book, it was this book that made me<strong> take an action</strong>.

By the time I’d finished chapters in part one and two, I’d already made the decision: <i>I’ll start a new blog focusing on my current passions and interests</i>. <em>And this time I’ll keep posting new content on a regular basis.</em>

I had a blog (<a href="http://outofsingularity.wordpress.com">outofsingularity.wordpress.com</a>) for quite a while, but I wasn’t consistent at all. Quite the opposite: I added only one new post for the last 4 years! I had many ideas for blog posts, but I never found enough time to write them down.

Inspired by John’s book I started looking for some advice how to create a successful blog. In no time, I found his free email course <a href="https://simpleprogrammer.com/confirm/create-blog-boosts-career/">How to Create a Blog to Boost Your Career</a>. I signed up…

<h2>Lesson 0: A blog that boosts your career</h2>

Having a blog can boost your career in many ways, for instance:

<ul>
    <li>Getting a better, higher paying job</li>
    <li>Getting more freelancing clients and/or rates</li>
    <li>Learning things by teaching them to others, thus making stronger neural connections and increasing your understanding of a material</li>
</ul>

There’s a great video <i><a href="https://www.youtube.com/watch?v=-2WZco-8P4c&amp;__s=uqq83mhvo7sjtapzqajq">How Taiseer Joudeh Created a Wildly Popular Blog in 14 Months</a> </i>in which Taiseer shares many key points how to make a successful blog:

<ul>
    <li>You need to specialize</li>
    <li>Write because you’re passionate about the topic and don’t expect anything in return</li>
    <li>Try to explain complex topics in a simple way</li>
    <li>Be yourself</li>
    <li>Be consistent - especially at the beginning</li>
    <li>Be kind, friendly and patient with anyone commenting on your blog posts</li>
    <li>Cross post to other sites like <a href="http://www.codeproject.com/">http://www.codeproject.com/</a> or <a href="https://dzone.com/">https://dzone.com/</a></li>
    <li>Use social media (especially Twitter) for sharing your ideas</li>
    <li>Think of basics of SEO</li>
    <li>Buy your domain at the beginning</li>
</ul>

That’s a lot of stuff, right? Let’s do it step-by-step!

<h2>Lesson 1: The Most Important Thing For a Successful Blog</h2>

<strong>Choosing a Theme</strong> (what the blog is about) is the most important step.
Choose your specialization: something you already know well or you would like to know. “Be a Big Fish in a small pond" - try to choose a theme that is as narrow as possible.

For me, this step wasn’t easy. I have many passions and I love reading about lots of different things. My mind kept telling me: “I don’t want to specialize. Generalization is a good thing!”

The problem with this approach is that it’s both hard to do and hard to sell:

<ol>
    <li>You can’t be an expert or sufficiently proficient in so many areas. Neither you should focus on so many different areas at the same time.</li>
    <li>There are so many specialized blogs/books/podcasts that would cover the material better.</li>
</ol>

I’ve had a passion for Learning &amp; Self-improvement for a long time. I’ve also been very interested in Clojure for last year or so.

I decided to combine these two passions and create <a href="https://curiousprogrammer.net/about/"><i>Curious (Clojure) Programmer</i></a> blog.

<h2>Lesson 2: Creating Your Blog</h2>

This actually wasn’t that hard but required a little time to evaluate different alternatives and pick up the final domain name*.
I decided to go with SiteGround <a href="http://CuriousProgrammer.net">CuriousProgrammer.net</a> and SiteGround for blog hosting. I chose <em>SiteGround</em> over <em>BlueHost</em> due to the following reasons:

<ul>
    <li>better uptime</li>
    <li>quick response time</li>
    <li>excellent support</li>
</ul>

Check out <a href="https://inlinehostblogger.com/siteground-vs-bluehost/">SiteGround vs BlueHost | Which is the best hosting?</a> for more information.

You can also find ratings for different web hosting providers at <a href="https://webhostinggeeks.com/providers/">webhostinggeeks</a>, e.g.:

<ul>
    <li><a href="https://webhostinggeeks.com/providers/siteground">SiteGround</a></li>
    <li><a href="https://webhostinggeeks.com/providers/bluehost">BlueHost</a></li>
</ul>

<em>*It’s quite important to have a top-level domain name. My old blog has free “wordpress.com” subdomain but it doesn't look very good: <a href="http://outofsingularity.wordpress.com">outofsingularity.wordpress.com</a></em>

<h2>Lesson 3: Brainstorming Blog Post Ideas</h2>

This wasn’t completely new to me. I’d already had some ideas in my Evernote “Blog - ideas” note. However, there weren’t so many of them and most of those were pretty unrelated to the theme of my new blog. As a result, I had to start over:

<ul>
    <li>As John suggests, I brainstormed 50+ (actually 70) ideas and write them down. It took more than 1 hour, but it was worth the time spent.</li>
    <li>Then I selected the top 15 ideas.</li>
    <li>Then I narrowed down the selection to the top 5 ideas.</li>
</ul>

I didn’t select the top 3 ideas, but I considered the top 5 to be good enough so I stopped there.

If you are stuck with this step, John provides a list of possible “blog post type” ideas, for example:

<ul>
    <li>Tutorials and How-To’s</li>
    <li>Book and Product reviews</li>
    <li>Interesting stories about your life related to your theme</li>
    <li>List of Things: “Top 10 ways to …”, “My 7 favorite …”, ...</li>
    <li>Multi-part series posts (larger topics)</li>
</ul>

So I ended up with the following list:

<ol>
    <li>How/Why I did  start my blog?
<ul>
    <li>Post about John’s course and my motivation to start blog</li>
</ul>
</li>
    <li>Why do I want to learn Clojure/ClojureScript?</li>
    <li>Top 10 resources for learning Clojure/ClojureScript</li>
    <li>My Clojure learning strategy</li>
    <li>Status.im and Ethereum for Dummies
<ul>
    <li>Status.im is the Open-Source project which I’m currently focusing on.</li>
</ul>
</li>
</ol>

I might shuffle this list a little bit when the time to write a new post comes but it’s there and I have plenty of topics to start with.

<h2>Lesson 4: Time to Get Serious</h2>

<strong>Consistency</strong>: there’s nothing more important to make your blog successful.
There are two main reasons:

<ol>
    <li>Consistency over time builds a large collection of blog posts each of which has the potential to draw a traffic to your blog.</li>
    <li>Consistency over time will improve your writing and communication skills in general. If you write consistently you’ll improve.</li>
</ol>

Thus, in order to be successful, you need to understand how important consistency is and then create a schedule (fixed day and time) for writing a new blog post.

<div>Try to write a new post at least once a week. Especially at the beginning, it’s very beneficial to write 2-3 posts per week.
Anyway, this is not something I can commit to, therefore I’ll stick with one post a week. As regards to the schedule, my current plan is to write a new blog post on Mondays and see how it works. Eventually, I might switch to Fridays or weekends if it better suits me.
<h2>Lesson 5: How to Get Traffic to Your Blog?</h2>
A good way to start is commenting on other blogs. You can reference your own blog post if it’s related to the topic. But <strong>always</strong> <strong>seek to add a value. </strong>Over time, if you have good content, the majority of traffic will start flowing from search engines.

</div>

<div>

<strong>That’s it!</strong>
This is how I started my new blog and my strategy for consistently writing new posts.

</div>

<strong>How about you?</strong>
Do you already have a blog?
How often do you post new content? Once a week? Once a month? Once a year?
Perhaps, you write few blog posts in a short burst when you have time and energy and then let <a href="http://www.linfo.org/rule_of_silence.html">The Rule of Silence</a> do its job?

If you don’t have a blog yet or are struggling to keep it updated go ahead and sign up for <a href="https://simpleprogrammer.com/confirm/create-blog-boosts-career/">John’s email course</a>. It’s free and it’ll definitely help you to boost your career.

​<a href="http://simpleprogrammer.com/2015/03/02/my-free-blogging-course-is-getting-unbelievable-results/"><img src="http://simpleprogrammer.com/wp-content/uploads/2015/04/badge.png" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2017-01-28 16:17:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-28 16:17:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-create-a-blog-to-boost-your-career]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588733344;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:80;}i:1;a:1:{s:2:"id";i:320;}i:2;a:1:{s:2:"id";i:298;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1186</wp:comment_id>
			<wp:comment_author><![CDATA[fine mesh strainer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[christen_burden@arcor.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.airpurifier2.com/search/strainer+set+stainless+steel</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.208.66.151]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-06-05 06:57:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-06-05 06:57:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Way cool! Some very valid points! I appreciate you 
penning this write-up plus the rest of the 
website is really good.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1496645846.209990978240966796875;s:5:"event";s:10:"check-spam";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1497519156.9655320644378662109375;s:5:"event";s:10:"report-ham";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_user_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_user]]></wp:meta_key>
			<wp:meta_value><![CDATA[jumar]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1497519165.2766010761260986328125;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1469</wp:comment_id>
			<wp:comment_author><![CDATA[wholesale nfl jerseys]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jocelynbrunton@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://meritmore.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.182.49.91]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-07-08 22:27:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-07-08 22:27:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Appreciate the recommendation. Will try it out.wholesale 
nfl jerseys]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1499552844.905651092529296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1499952796.7425479888916015625;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2812</wp:comment_id>
			<wp:comment_author><![CDATA[Careers Booster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[careersboosters@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.careersbooster.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.114.233.27]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-03-27 07:03:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-03-27 07:03:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is very nice information about How to Create a Blog To Boost Your Career...Thank you so much for sharing your knowledge...Keep it .]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1553670186.897924900054931640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559299818.35083293914794921875;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Why do I want to learn Clojure and why you should too</title>
		<link>https://curiousprogrammer.net/2017/01/31/why-do-i-want-to-learn-clojure-and-why-you-should-too/</link>
		<pubDate>Tue, 31 Jan 2017 07:50:23 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[Since 2010, I’ve been interested in functional programming and non-Java JVM languages, most notably Scala &amp; Groovy.

However, whenever I tried to learn Scala, I ended up confused. I started with a passion, but the complexity of the language perplexed me. I love the ideas of Functional Programming:
<ul>
 	<li>pure functions</li>
 	<li>avoiding mutable state</li>
 	<li>no side effects</li>
</ul>
But I’ve found it difficult to write clean code in Scala. I never really understood the language. I felt it was a way harder to learn it properly than it should be.

On the other side, Groovy is easier to understand, but I can't see much of value to justify using it in production. Sure, I've used it quite a lot for unit testing and even for some scripting, but I've never gotten much further.
<h3>My way to Clojure</h3>
Around 2013, I heard about Clojure and got interested. This was the first time I met a strange LISP-like language with all those braces. I read a chapter about Clojure in the book <a href="https://www.amazon.com/gp/product/1617290068/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617290068&amp;linkCode=as2&amp;tag=jumarkocuriou-20&amp;linkId=cac7048d40d7bb15caf0ecd2952f5eff">The Well-Grounded Java Developer</a><img style="border: none !important; margin: 0px !important;" src="//ir-na.amazon-adsystem.com/e/ir?t=jumarkocuriou-20&amp;l=am2&amp;o=1&amp;a=1617290068" alt="" width="1" height="1" border="0" />. At the beginning, I wasn’t very convinced that Clojure code is more beautiful or readable than Java code., but I was getting curious.

From time to time, I read some article about Clojure, played a little bit with it and even watched some of <a href="https://www.infoq.com/presentations/Simple-Made-Easy">Rich Hickey's talks</a>. I discovered fantastic and thriving <a href="https://clojure.org/community/resources">Clojure community</a> (<a href="http://clojurians.net/">Clojurians slack</a> is awesome). I bought a copy of <a href="https://www.amazon.com/gp/product/1617291412/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291412&amp;linkCode=as2&amp;tag=jumarkocuriou-20&amp;linkId=e4c19deee69f1348982d4249badf732b">The Joy of Clojure</a><img style="border: none !important; margin: 0px !important;" src="//ir-na.amazon-adsystem.com/e/ir?t=jumarkocuriou-20&amp;l=am2&amp;o=1&amp;a=1617291412" alt="" width="1" height="1" border="0" />, started to read it - and failed eventually. I wasn’t prepared.

For some reason, I still felt the growing need to explore and learn about this new world:
<ul>
 	<li>Why is that everyone in Clojure community is so excited about the language?</li>
 	<li>Does it really bring fun to programming again?</li>
 	<li>What are these immutable data structures and why are they so useful?</li>
 	<li>What does it feel like to use a dynamic language on a large scale?</li>
 	<li>Can we indeed write a concurrent code in a less painful and a more reliable way?</li>
 	<li>How can I leverage the power of Macros?</li>
 	<li>What are the benefits of using (almost) the same language on backend and frontend? (Clojure vs. ClojureScript)</li>
 	<li>Are the big systems written in Clojure, in fact, so much more compact than their Java counterparts while still being readable and maintainable?</li>
</ul>
<strong>This blog is my attempt to answer those questions.</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2017-01-31 07:50:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-31 07:50:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[why-do-i-want-to-learn-clojure-and-why-you-should-too]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="learning"><![CDATA[Learning]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588924604;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:298;}i:1;a:1:{s:2:"id";i:305;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Random excerpts from Brno Clojure Meetup</title>
		<link>https://curiousprogrammer.net/2017/02/08/random-excepts-from-brno-clojure-meetup/</link>
		<pubDate>Wed, 08 Feb 2017 20:36:38 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<div>Last week, I was quite happy to attend <a href="https://www.meetup.com/brno-clojure/events/236693370/"><i>(:brno Clojure)</i> meetup</a>. There were only five people including me. Nevertheless, we had a great time and covered a lot of topics. There was no main theme, just live free and spontaneous discussion about our experience with Clojure. We discussed following topics:</div>
<div>
<ul>
 	<li>server-side template <a href="https://github.com/duct-framework/duct">duct</a></li>
 	<li style="list-style: none;">
<ul>
 	<li>easy-to-use template for getting started with Clojure web
applications</li>
 	<li>how is it different from <a href="https://github.com/plexus/chestnut">chestnut</a>?</li>
</ul>
</li>
 	<li><a href="https://github.com/kajism/liskasys">liskasys</a></li>
 	<li style="list-style: none;">
<ul>
 	<li>Karel Miarka’s own project</li>
 	<li>Uses Datomic</li>
</ul>
</li>
 	<li>Emacs/Spacemacs vs. Cursive</li>
 	<li style="list-style: none;">
<ul>
 	<li>Spacemacs has lots of preconfigured plugins =&gt; easier to use
than plain Emacs</li>
</ul>
</li>
 	<li>Korma SQL</li>
 	<li style="list-style: none;">
<ul>
 	<li>macro magic</li>
 	<li>consider using something else (Honey SQL, plain clojure.java.jdbc, …)</li>
 	<li>Check <a href="https://yogthos.net/posts/2016-02-22-LuminusEmbracingHugSQL.html">https://yogthos.net/posts/2016-02-22-LuminusEmbracingHugSQL.html</a></li>
</ul>
</li>
 	<li>“Specs” for re-frame <i>application state db</i></li>
 	<li style="list-style: none;">
<ul>
 	<li>It can be better to not enforce using spec for <i>app-db </i>because the additional value is not so high and it can lead to tedious updates of spec whenever you add something to <i>app-db</i></li>
</ul>
</li>
 	<li>Usefulness of namespaced keywords</li>
 	<li style="list-style: none;">
<ul>
 	<li>avoid conflicts: same keywords in different namespaces</li>
</ul>
</li>
 	<li>Pitfalls of debugging CLJS</li>
 	<li style="list-style: none;">
<ul>
 	<li>unclear error messages</li>
 	<li>hard to find root cause</li>
</ul>
</li>
 	<li>Logging</li>
 	<li style="list-style: none;">
<ul>
 	<li>log whole Clojure data structure instead of standard log
lines?</li>
 	<li style="list-style: none;">
<ul>
 	<li>you can then process logs with clojure (search, filter, …)</li>
</ul>
</li>
</ul>
</li>
 	<li>Using Ansible for automatic deployment</li>
 	<li><a href="http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded">Component reloaded workflow</a></li>
 	<li style="list-style: none;">
<ul>
 	<li>figwheel-like experience on backend</li>
</ul>
</li>
 	<li>Figwheel</li>
 	<li style="list-style: none;">
<ul>
 	<li>re-load on save vs. reload explicitly (triggered by keyboard shortcut)</li>
 	<li>explicit reload gives us a better control</li>
</ul>
</li>
 	<li><b>Ideas for next meetups</b></li>
 	<li style="list-style: none;">
<ul>
 	<li>Applications / System showcases</li>
 	<li style="list-style: none;">
<ul>
 	<li>demonstrate the apps we are working on</li>
 	<li>discussion, best practices</li>
</ul>
</li>
 	<li>Coding dojo - we can work together on 4clojure problems or similar</li>
 	<li>Invite <a href="https://www.linkedin.com/in/paveltisnovsky/">Pavel Tisnovsky</a>
to Brno Clojure meetup</li>
</ul>
</li>
</ul>
<div></div>
</div>
<div>I’m really looking forward to the next Brno Clojure meetup.</div>
<div>I’d be love to see more people there as well.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2017-02-08 20:36:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-08 20:36:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[random-excepts-from-brno-clojure-meetup]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="meetup"><![CDATA[Meetup]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588065746;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>604</wp:comment_id>
			<wp:comment_author><![CDATA[What&#8217;s the best Clojure IDE? &#8211; Curious (Clojure) Programmer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://curiousprogrammer.net/2017/03/21/whats-the-best-clojure-ide/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.123.96.101]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-21 05:17:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-21 05:17:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] I visited The second Brno Clojure meetup and had a great discussion with Karel Miarka about many topics, including Clojure editors. Instead [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1490073440.52923107147216796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1490079522.6231920719146728515625;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>My (Clojure) learning strategy</title>
		<link>https://curiousprogrammer.net/2017/02/15/my-clojure-learning-strategy/</link>
		<pubDate>Wed, 15 Feb 2017 13:19:10 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<div><i>In this post, I’ll discuss the general learning strategy and show an example how to apply it to Learning the Clojure programming language.</i></div>
<div><i>I was heavily inspired by <a href="https://simpleprogrammer.com/products/learn-anything/">10-step learning process from John Sonmez</a> which I first encountered in his book </i><a href="http://amzn.to/2kJdgZ4">Soft Skills: The software developer’s life manual</a> and <i>the process outlined in the book</i> <i><a href="http://amzn.to/2kwEWPM">Novice to Expert: 6 Steps to Learn Anything, Increase Your Knowledge, and Master New Skills</a> by Steve Scott.</i></div>
<div></div>
<div></div>
<h2><b>The past</b></h2>
<div></div>
<div>I used to approach learning new things without a strategy.</div>
<div></div>
<div>When I found a cool piece of technology that I’d like to know more about, I  spent a weekend by reading about it. I might have tried to play with some code a little, but mostly only by copying exercises from the tutorial into console/editor. Once the weekend was over, I just ran out of time or got distracted by some other cool technology and never got to the former one again. I might even have forgotten that I read about that thing at all.</div>
<div></div>
<div>I burnt thousands of hours without actually learning too much. I thought that I could rush through the tons of information and actually learn it.</div>
<div>It doesn’t work that way - not for me.</div>
<div></div>
<div></div>
<h2><span style="font-weight: bold;">A better approach</span></h2>
<div></div>
<div>If you really want to learn something you need consistency. You have to accept that it will be boring. You must prepare yourself for the hard work - there are no shortcuts.</div>
<div></div>
<div>Having that said, what are my tips for learning Clojure or any other topic?</div>
<div></div>
<h3><b>Focus on a single learning project at a time</b></h3>
<ul>
 	<li>Learning new complex topic is already hard, and you’ll make it a lot harder if you try to learn many different things at once.</li>
 	<li>Especially, if you have a full-time job try to focus on a single topic. This approach will increase your chance to finish it in a foreseeable future.</li>
 	<li>Trying to learn many new things at once will probably result in frustration, and you will end up failing at all of them.</li>
</ul>
<h3><b>Create learning plan</b></h3>
<ul>
 	<li>To succeed you need to start with a clear <b><a href="http://topachievement.com/smart.html">S.M.A.R.T</a> </b>(Specific. Measurable. Achievable. Relevant. Time-boxed.) <b>end goal</b> in your mind.
<ul>
 	<li>An example of a bad goal: “I want to learn Clojure and ClojureScript”</li>
 	<li>An example of a better goal: “I’ll learn enough of Clojure, ClojureScript and web development libraries so that I can build the first version of a non-trivial Clojure web application with REST API and simple UI within three months”
<ul>
 	<li>Here I’m playing with an idea to create <i>My Bookshelf </i>application for simple book management (I love books).</li>
</ul>
</li>
</ul>
</li>
 	<li>Another key point to realize is that you don’t need to achieve mastery in everything you want to learn. Try to always identify the desired level from 1-10 (1 - very basic overview; 10 - mastery).</li>
 	<li>More details later in section <i>10-step learning process</i></li>
</ul>
<h3><b>Execute the plan on a daily basis</b></h3>
<ul>
 	<li>A consistent, deliberate practice is essential for success
<ul>
 	<li><i>Ideas are easy, Implementation is hard</i> (Guy Kawasaki: <a href="http://www.forbes.com/2004/11/04/cx_gk_1104artofthestart.html">http://www.forbes.com/2004/11/04/cx_gk_1104artofthestart.html</a>)</li>
</ul>
</li>
 	<li>Reserve at least 0.5 h each day for mastering new skill
<ul>
 	<li>The minimal duration can vary, but I’d rather recommend spending at least 1 hour working on your project each day</li>
</ul>
</li>
 	<li>Work on each step in iterations until you finish all steps - one step at a time</li>
 	<li><b>Two tasks daily rule</b>
<ul>
 	<li>one repeating task
<ul>
 	<li>You can practice Clojure programming skills via <a href="http://exercism.io/">Exercism.io</a>, <a href="http://www.4clojure.com/problems">4Clojure</a>, or <a href="http://clojurekoans.com/">Clojure Koans</a>.</li>
 	<li>You can also decide to spend time by reading a relevant book and trying out the examples</li>
</ul>
</li>
 	<li>one task from a project list
<ul>
 	<li>Pick one task from your project and try to complete it.</li>
 	<li>For example: “Create a project structure for My Bookshelf application. Create git repository and push the skeleton.”</li>
</ul>
</li>
</ul>
</li>
 	<li>Focus on practical experience rather than just cramming a huge amount of information from books and the internet into (and out of) your head
<ul>
 	<li>Create a learning project to practice everything you want to learn</li>
</ul>
</li>
</ul>
<div></div>
<div></div>
<h2><b>Example of <i>10-step learning process</i></b></h2>
<div></div>
<div>What follows, is my implementation of <i>10-step learning process</i> outlined in <a style="text-decoration: underline; color: #0000ee;" href="http://amzn.to/2kJdgZ4">Soft Skills: The software developer’s life manual</a> by John Sonmez.</div>
<div>The example demonstrated here is for <i>My Bookshelf</i> Clojure web application:</div>
<h3><b>Step 1: Get the big Picture - 50,000 ft view</b></h3>
<ul>
 	<li>I’ve already written some Clojure/ClojureScript code in the past and read lots of articles and <a href="http://amzn.to/2kJbsiC">Living Clojure</a> book.</li>
 	<li>Following are my observations:
<ul>
 	<li>I know what I want to do: <i>Create a web application for book management.</i></li>
 	<li>I know what other options I have (<i>GoodReads, Libib</i>, etc.) but none of these options seems to be suitable for my needs.</li>
 	<li>I know a little bit of Clojure/ClojureScript so I can get started.</li>
</ul>
</li>
</ul>
<h3><b>Step 2: Determine the scope of what you want to learn</b></h3>
<ul>
 	<li>I want to build a real application that I can use for my own book management.</li>
 	<li>I’ve identified various features - this will be an ongoing project.
<ul>
 	<li>I even have Trello board for tasks related to this project</li>
</ul>
</li>
 	<li>As a first milestone, I want to implement MVP using some libraries mentioned in <a href="http://amzn.to/2lK9liF">Web Development with Clojure</a> book.</li>
 	<li>I want to embrace REPL driven development combined with TDD - I’ll write a lot of tests.</li>
</ul>
<h3><b>Step 3: Define how the success will look like</b></h3>
<ul>
 	<li>My Bookshelf is up and running (at least on my local computer) and I’m able to add new books to bookshelf database, update or delete existing book, list all books, show book detail.
<ul>
 	<li>MUST-HAVE: basic attributes like “Title”, “Author”, “Year”, and “Status” (to distinguish books which I want to read/buy and those which I’ve already read/bought)</li>
 	<li>COULD-HAVE: further attributes can be added if useful for practical usage</li>
 	<li>NICE-TO-HAVE: the ability to search books by keywords on Amazon, show the results and be able to select the book which I want to add.</li>
</ul>
</li>
 	<li>Book database is persisted across different runs of the application.</li>
 	<li>There’s at least primitive UI which can show me a list of books that I’ve added.</li>
 	<li>I have an automated acceptance test checking the supported features.</li>
</ul>
<h3><b>Step 4: Find resources</b></h3>
<ul>
 	<li><b>Books</b>
<ul>
 	<li><a href="http://amzn.to/2kJawec">Clojure applied</a></li>
 	<li><a href="http://amzn.to/2lK9liF">Web Development with Clojure, 2nd ed.</a></li>
 	<li><a href="http://amzn.to/2lPQcbe">Professional Clojure</a></li>
 	<li><a href="http://amzn.to/2kJ31nw">Learning ClojureScript</a><i>-</i> just for a reference</li>
</ul>
</li>
 	<li><b>Clojure.spec</b>
<ul>
 	<li><i>Probably not in the first iteration, but I definitely want to learn Clojure.spec and used it in my application</i></li>
 	<li><a href="https://www.youtube.com/watch?v=-MeOPF94LhI">Introduction to clojure.spec</a><i> - </i>talk by Arne Brasseur on ClojureTRE 2016<b style="font-weight: bold;"> </b></li>
 	<li>Intro to clojure.spec<b> </b><a href="https://lambdaisland.com/episodes/clojure-spec">https://lambdaisland.com/episodes/clojure-spec</a></li>
 	<li>Check also: <a href="https://vimeo.com/195711510">https://vimeo.com/195711510</a>
(Rich Hickey on Clojure Spec)</li>
 	<li><i><b>Stuart Halloway screencast series</b></i><b>:</b> <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLrju9ntDh3RGPpWSWBvjwXg">https://www.youtube.com/playlist?list=PLZdCLR02grLrju9ntDh3RGPpWSWBvjwXg</a>
<ul>
 	<li>Excellent demonstrations of spec capabilities</li>
</ul>
</li>
</ul>
</li>
 	<li><b>re-frame tutorial</b>
<ul>
 	<li><a href="https://github.com/Day8/re-frame/blob/master/README.md">re-frame README</a></li>
 	<li><a href="https://lambdaisland.com/episodes">lambda island episodes</a></li>
 	<li><a style="text-decoration: underline; color: #0000ee;" href="http://dhruvp.github.io/2015/03/07/re-frame/">http://dhruvp.github.io/2015/03/07/re-frame/</a></li>
</ul>
</li>
 	<li><b>Real-world project examples</b>
<ul>
 	<li>Karel Miarka’s project: <a href="https://github.com/kajism/liskasys">https://github.com/kajism/liskasys</a></li>
</ul>
</li>
 	<li>series of tutorials on ClojureScript: <a href="https://github.com/magomimmo/modern-cljs" rev="en_rl_minimal">https://github.com/magomimmo/modern-cljs</a>
<ul>
 	<li>can be used for a quick check if there’s a better solution for the problems I have in the implementation of client side of my project</li>
</ul>
</li>
</ul>
<h3><b>Step 5: Create a learning plan</b></h3>
<ol>
 	<li><b>DONE.</b> Define learning strategy &amp; resources</li>
 	<li>Read the first parts of <a style="text-decoration: underline; color: #0000ee;" href="http://amzn.to/2kJawec">Clojure applied</a> and <a style="text-decoration: underline; color: #0000ee;" href="http://amzn.to/2lK9liF">Web Development with Clojure, 2nd ed.</a> to know how to start</li>
 	<li>Create application skeleton - client and server part -&gt; Display hello world</li>
 	<li>Create the first draft of application domain; in-memory store</li>
 	<li>Write some tests</li>
 	<li>Primitive read-only UI showing the book list</li>
 	<li>Persist entities to survive application restart</li>
 	<li>UI for adding a new book</li>
 	<li>UI for updating &amp; deleting existing books</li>
 	<li>Redesign domain/data model based on recent experience
<ul>
 	<li>Use Clojure.spec?</li>
</ul>
</li>
 	<li>Add possibility to store details (notes) about the book</li>
 	<li>Book tags</li>
 	<li>Add basic search</li>
 	<li>Track/watch books</li>
 	<li><b>Iterate adding new features</b>; evaluating different options/libraries/frameworks</li>
</ol>
<h3><b>Step 6: Filter the resources </b></h3>
Most important resources from step <i>4. Find resources</i>:
<ul>
 	<li><a style="color: #0000ee;" href="http://amzn.to/2kJawec">Clojure applied</a></li>
 	<li><a style="color: #0000ee;" href="http://amzn.to/2lK9liF">Web Development with Clojure, 2nd ed</a></li>
 	<li>re-frame tutorial</li>
</ul>
<h3 id="step7"><b>Step 7: Learn enough to get started</b></h3>
One example could be <i>Reading the first chapter in <a style="text-decoration: underline; color: #0000ee;" href="http://amzn.to/2lK9liF">Web Development with Clojure, 2nd ed.</a> and then generating new project structure from leiningen template.</i>
<h3 id="step8"><b>Step 8: Play around</b></h3>
For example: <i>Examine the application skeleton generated in the previous step and play with the application in REPL. Try to execute some DB queries and make sure you are familiar with each important part of the project structure.</i>
<h3><b>Step 9: Learn enough to do something useful</b></h3>
The result of this step should be adding a new feature to your project, e.g. <i>Implementation of “Add a New Book” feature.</i>
<h3><b>Step 10: Teach</b></h3>
Teach what you learned to others. This is a great way to make sure you have a solid understanding of the material you’ve learned. The other persons can be your colleagues, friends, local meetup group, readers of your blog, or even your spouse.
<div></div>
<h2><b>6 steps</b></h2>
<div>While outlining the 10-step learning process and executing it on a daily basis, it can help you to think about 6 steps which Steve Scott mentions in his book <a style="text-decoration: underline; color: #0000ee;" href="http://amzn.to/2kwEWPM">Novice to Expert: 6 Steps to Learn Anything, Increase Your Knowledge, and Master New Skills</a>.</div>
<div></div>
<div>This book deserves its own blog post, so I’ll just very briefly summarize the 6 steps:</div>
<ol>
 	<li><b> Identify your learning style</b>
<ul>
 	<li>Different people tend to favor different learning styles - social, solitary, visual, aural, verbal, physical, logical.</li>
 	<li>Try to identify 2-3 learning styles which suit you best and embrace them.</li>
</ul>
</li>
 	<li><b style="background-color: #ffffff;"><span style="font-weight: bold;">Pick a skill you’d like to master</span></b>
<ul>
 	<li>Choose a single skill - identify #1 goal you’d like to accomplish.</li>
 	<li>Focus on one skill at a time.</li>
 	<li>Pick your desired level of expertise.</li>
</ul>
</li>
 	<li><b style="background-color: #ffffff;"><span style="font-weight: bold;"><span style="font-weight: bold;">Build the learning habit</span></span></b>
<ul>
 	<li>The quickest path to skill mastery is to focus on this area completely.</li>
 	<li>Focus on daily training.</li>
 	<li>Practice just-in-time learning - research information related to the next step, ignore everything else.</li>
</ul>
</li>
 	<li><b style="background-color: #ffffff;"><span style="font-weight: bold;"><span style="font-weight: bold;">Take actionable notes</span></span></b>
<ul>
 	<li>Check out <a href="http://coe.jmu.edu/learningtoolbox/cornellnotes.html">Cornell Method</a>. It’s a very useful way to capture, understand and review a learning material.</li>
</ul>
</li>
 	<li><b style="background-color: #ffffff;"><span style="font-weight: bold;"><span style="font-weight: bold;">Build a project around a skill</span></span></b>
<ul>
 	<li>In order to learn something, you need to practice it.</li>
 	<li>Create a real-world project for the skill you want to master and apply the things you’ve learned in the project.</li>
</ul>
</li>
 	<li><span style="background-color: #ffffff;"><b>Deliberate practice</b></span>
<ul>
 	<li>Deliberate practice is the most important thing; talent is usually of minor importance.</li>
</ul>
</li>
</ol>
<div></div>
<div></div>
<div></div>
<h2><b>Final thoughts</b></h2>
<div></div>
<div>I’ve provided you with an example how to create a learning strategy for Clojure project. I’ll definitely write more blog posts about my <i>My Bookshelf</i> learning project in the future.</div>
<div></div>
<div>For more on How to discover your learning style, Pickup the skill you’d like to master, Building the learning habit, Taking actionable notes, Building a project around a skill and Deliberate practice, you can read the <a href="http://amzn.to/2kwEWPM">Novice to Expert book</a> or just wait until I write a blog post about it :).</div>
<div></div>
<div><b>Now, go ahead and pick a new skill you’d like to learn. Then create your learning plan and start executing it.</b></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2017-02-15 13:19:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-15 13:19:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-clojure-learning-strategy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="learning"><![CDATA[Learning]]></category>
		<category domain="category" nicename="my-bookshelf"><![CDATA[My Bookshelf]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588802231;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:320;}i:1;a:1:{s:2:"id";i:38;}i:2;a:1:{s:2:"id";i:105;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1813</wp:comment_id>
			<wp:comment_author><![CDATA[Steven T. Cramer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[StevenTCramer@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.thefreezeteam.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[182.52.160.69]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-08-06 02:48:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-08-06 02:48:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1501987721.3572208881378173828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1502051512.056027889251708984375;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1833</wp:comment_id>
			<wp:comment_author><![CDATA[Covenant]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Covenantchukwudi@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://scaleri.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[41.217.118.195]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-08-07 09:40:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-08-07 09:40:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, but i have a question: isn't learning "just enough" quite sub-optimal as opposed to having a deep knowledge?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1502098813.0193789005279541015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504543739.988297939300537109375;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2528</wp:comment_id>
			<wp:comment_author><![CDATA[Juraj Martinka]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[juraj@curiousprogrammer.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.57.100.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-09-04 16:54:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-09-04 16:54:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Learning just enough" and "deep knowledge" are not exclusive.
On the contrary, when you learn just enough and then try to apply the knowledge in the practice, you'll build much stronger understanding of the material at hand.
Of course, you need to push yourself and take harder and harder challenges as you learn - doing many iterations "learn just enough -> build sth. useful -> teach" (Steps 7 to 10).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1833</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504544061.9659550189971923828125;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>What&#039;s the Best Clojure IDE?</title>
		<link>https://curiousprogrammer.net/2017/03/21/whats-the-best-clojure-ide/</link>
		<pubDate>Tue, 21 Mar 2017 05:17:15 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<em>In this article, I'll evaluate the Emacs, Cursive, and </em>Spacemacs<em>, and explain why I ended up with </em>Spacemacs<em> for most of the projects I’m currently working on.</em>

<strong>UPDATE</strong>: Check also my next blog post <a href="https://curiousprogrammer.net/2017/05/12/clojure-development-workflow-with-spacemacs-and-cider/">Clojure Development Workflow with Spacemacs and Cider</a> with the <a href="https://www.youtube.com/watch?v=4ecC3jqHooc">accompanying video</a>.

It’s been a while since I started coding in Clojure, but the "IDE dilemma" was there from the beginning. Although some people might think that it’s a waste of time and you can just pick any editor you want, I disagree. There’s definitely a big difference in terms of productivity if you can use the best tool for the job.

<h2>My Tour Through the Clojure IDEs' Country</h2>

<h3>Emacs LIVE</h3>

In the beginning, I did a quick research and found out that many people in Clojure community use Emacs.

I had never really used Emacs. However, I found one particular Emacs incarnation, <a href="http://overtone.github.io/emacs-live/">Emacs LIVE</a>, specially crafted for beginners. Of course, there still was a big learning curve for me. I spent countless hours getting used to Emacs editing style, shortcuts, and quirks of Emacs LIVE.

On the one hand, it was packed up with useful plugins. On the other hand, its config was bloated, and it was slow to start.

Eventually, I was not able to distinguish if my problems (such as broken keyboard shortcuts for <em>slurp</em> and <em>barf</em>) were related to the specifics of Emacs LIVE or if they were some general issues with Emacs or my Mac OS X configuration.

<h3>Cursive</h3>

In the meantime, I also played with <a href="https://cursive-ide.com/">Cursive</a>.

As a long-time IntelliJ IDEA user, I happened to be familiar with the environment. I really love the features like Full-text search, Project tree window, Symbol navigation, Refactoring, Git integration, Live Templates, Database Plugin, and more.

However, for smaller projects, Cursive feels too heavy-weight:

<ul>
    <li>Its start up time is slower.</li>
    <li>ClojureScript and Figwheel integrations aren't very good (yet).</li>
    <li>Regarding plain old text editing, Vim and Emacs provide a better experience.</li>
</ul>

I love Cursive’s features and need them to be productive. I do think that <a href="https://twitter.com/colinfleming">Colin Fleming</a> is doing a great job. But I also need something more lightweight which doesn’t consume a lot of resources.

<h3>Emacs - From the Scratch</h3>

Being unable to fix some issues in Emacs LIVE, I finally stepped back and started with plain Emacs, adding only plugins I needed. Step by step, I added <em>projectile</em>, <em>project-tree-explorer </em>(later replaced by NeoTree since <em>project-tree-explorer</em> was painfully slow for large projects), <em>auto-complete</em>, <em>company-mode</em>, and more.

You can find my old Emacs configuration on <a href="https://github.com/jumarko/curious-programmer-blog/blob/master/code-samples/emacs/old-emacs-config.el">GitHub</a>. One interesting piece is the configuration for Figwheel.

<pre>;; Cider figwheel integration
(require &#039;cider)
;; more elaborate cider-cljs-lein-repl than in official documentation
;; this tries to match the project type
;; copied from https://lambdaisland.com/episodes/figwheel-emacs-cider
(setq cider-cljs-lein-repl
 &quot;(cond
 (and (resolve &#039;user/run) (resolve &#039;user/browser-repl)) ;; Chestnut projects
 (eval &#039;(do (user/run)
 (user/browser-repl)))
 (try
 (require &#039;figwheel-sidecar.repl-api)
 (resolve &#039;figwheel-sidecar.repl-api/start-figwheel!)
 (catch Throwable _))
 (eval &#039;(do (figwheel-sidecar.repl-api/start-figwheel!)
 (figwheel-sidecar.repl-api/cljs-repl)))
 (try
 (require &#039;cemerick.piggieback)
 (resolve &#039;cemerick.piggieback/cljs-repl)
 (catch Throwable _))
 (eval &#039;(cemerick.piggieback/cljs-repl (cljs.repl.rhino/repl-env)))
 :else
 (throw (ex-info \&quot;Failed to initialize CLJS repl. Add com.cemerick/piggieback and optionally figwheel-sidecar to your project.\&quot; {})))&quot;)</pre>

Previously, I struggled a lot with a proper setup for ClojureScript projects including browser-connected REPL, Figwheel and CIDER integration.
<a href="https://lambdaisland.com/episodes/figwheel-emacs-cider">That Lambda Island episode</a> finally got me some setup that worked.

Again, it took me non-trivial amount of time to configure my Emacs and learn new shortcuts. Yet I still had some issues with code formatting and usability. I was never quite happy with using Emacs for large projects, especially for the ones I wasn’t familiar with. Therefore, I ended up using Cursive for every larger code base I encountered.

&nbsp;

<h2 id="spacemacs-to-the-rescue">Spacemacs to the Rescue</h2>

Recently, I visited <a href="https://curiousprogrammer.net/2017/02/08/random-excepts-from-brno-clojure-meetup/">The second Brno Clojure meetup</a> and had a great discussion with <a href="https://www.meetup.com/brno-clojure/members/212709362/">Karel Miarka</a> about many topics, including Clojure editors. Instead of using plain Emacs, he recommended the <a href="http://spacemacs.org/">Spacemacs distribution</a>.

<h3>Getting Started with Spacemacs</h3>

I found following resources to be perfect for getting started with Spacemacs:

<ol>
    <li>Spacemacs documentation
<ol>
    <li><a href="http://spacemacs.org/doc/QUICK_START.html">Quickstart</a></li>
    <li><a href="http://spacemacs.org/doc/DOCUMENTATION.html">Full Documentation</a></li>
</ol>
</li>
    <li><a href="https://practicalli.github.io/spacemacs/">Clojure development with Spacemacs</a> from Practical.li</li>
</ol>

<a href="https://www.youtube.com/watch?v=Uuwg-069NYE">The Introductory video</a> is fascinating and made me curious. If that’s how the Spacemacs works, maybe I can use Emacs again without frustration even for large real-world projects.

The downside: <em>I had to learn a little bit different workflow and shortcuts once again.</em>
The upside: <em>easy and almost automatic configuration and good pre-configured plugins.</em>

<h3>My Spacemacs Configuration</h3>

Since Spacemacs configuration is almost automatic, I did a very little <a href="https://github.com/jumarko/curious-programmer-blog/blob/master/code-samples/emacs/.spacemacs">custom configuration</a>:

<ul>
    <li>I uncommented following <em>dotspacemacs-configuration-layers</em> in <em>.spacemacs</em> file (use shortcut <code>SPC f e d</code> for quick edit of .spacemacs file and <code>SPC f e R</code> for quick reload)
<ul>
    <li><em>helm</em></li>
    <li><em>auto-completion</em>
<ul>
    <li>By using this layer, you can automatically expand code snippets like <code>defn</code> via <code>M-/</code> (<em>yas-expand</em>) to simulate Cursive’s Live Templates</li>
</ul>
</li>
    <li><em>better-defaults</em>
<ul>
    <li>few enhancements of standard commands like <em>C-a, C-e, C-w, C-y, M-q</em></li>
</ul>
</li>
    <li><em>git</em>
<ul>
    <li><a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bsource-control/git"><em>magit</em></a> provides an incredible Git experience inside the editor.</li>
    <li>Start with <em>magit-status</em>: <code>SPC g s</code></li>
    <li>Unlike many developers who use the Git only from command line, I believe there's value in having strong Git integration within IDE. I used to use IniteliJ "Commit dialog" a lot and now I have a similar (and maybe even better) experience with magit.</li>
</ul>
</li>
</ul>
</li>
    <li>I activated <em>hybrid-mode</em> instead of <em>default-mode: </em><code>dotspacemacs-editing-style 'hybrid</code>
<ul>
    <li>This means that you can use emacs shortcuts like <em>C-a</em> and <em>C-e</em> when you are in vim editing mode - very useful!</li>
</ul>
</li>
    <li>I turned on line numbers by default: <code>dotspacemacs-line-numbers t</code>
<ul>
    <li>I can always turn them off via <code>SPC t n</code></li>
</ul>
</li>
</ul>

<h3>CIDER</h3>

There’s a nice shortcut <code>,</code> (comma) which serves as a prefix for all Cider commands. For instance <code>, t a</code> will run all unit tests for current namespace. Alternatively, you can use <code>SPC m</code> prefix: <code>SPC m t a</code>

Other than that, Cider integration is just seamless and very similar to the ordinary Emacs.

<h3>Layouts</h3>

<a href="http://boyanangelov.com/spacemacs/layers/+window-management/spacemacs-layouts/README.html">Layouts</a> are one of the more useful features that I didn't use from the very beginning.

Basically, the <em>layout</em> is a set of related buffers. Something you could call a <em>project</em> in more traditional IDEs. The layout will help you to organize your buffers.

There is always at least one layout called <em>Default. </em>To create a new layout, press <code>SPC l</code> and then <code>2</code>. Type the name of the new layout and you're all set up. You can start creating new buffers. When you press <code>SPC l b</code>, you'll see only buffers assigned to the current layout (except the <em>Default </em>one which contains all buffers).

<h2>Final Thoughts</h2>

Nowadays, Spacemacs is my tool of choice for all Clojure projects - both small samples and large code bases with thousands lines of code. I think it's a great development environment with tons of useful features like Cider REPL, Git integration, Neotree explorer, layouts, and more. I found it more approachable for non-expert Emacs users than vanilla Emacs.

If I work on some project with lots of Java/JavaScript code in the future, I will probably switch back to Cursive.

<h3>How About the Atom + Proto REPL?</h3>

A Few days ago, I watched the Clojure/conj talk <a href="https://www.youtube.com/watch?v=buPPGxOnBnk">Proto REPL, a New Clojure Development and Visualization Tool</a> by Jason Gilman and it completely blew my mind. The debugging and visualization capabilities of Proto REPL are brilliant.

However, when I tried Atom with Proto REPL it just didn't feel right to me. To be honest, I didn't spend much time with it (I have other things to do besides testing all possible Clojure editors). For now, I feel more productive and organized with Spacemacs, so I'll stick with it. I'm pretty sure I'll revisit Atom + Proto REPL at some point in the future.

<h3>Resources</h3>

<ul>
    <li><a href="http://dev.clojure.org/display/doc/IDEs+and+Editors">http://dev.clojure.org/display/doc/IDEs+and+Editors</a></li>
    <li><a href="http://stackoverflow.com/questions/4248171/choosing-an-ide-editor-for-clojure-coding">http://stackoverflow.com/questions/4248171/choosing-an-ide-editor-for-clojure-coding</a></li>
    <li><a href="https://www.quora.com/What-is-the-best-IDE-for-a-Clojure-beginner">https://www.quora.com/What-is-the-best-IDE-for-a-Clojure-beginner</a></li>
    <li><a href="https://practicalli.github.io/spacemacs/">Clojure development with Spacemacs</a> from Practical.li</li>
    <li><a href="http://spacemacs.org/doc/DOCUMENTATION.html">Spacemacs documentation</a></li>
</ul>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2017-03-21 05:17:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-21 05:17:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[whats-the-best-clojure-ide]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="ides-editors"><![CDATA[IDEs / editors]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588575706;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:305;}i:1;a:1:{s:2:"id";i:66;}i:2;a:1:{s:2:"id";i:141;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>948</wp:comment_id>
			<wp:comment_author><![CDATA[Juraj Martinka]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jumarko@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://curiousprogrammer.net/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.57.100.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-04-24 13:53:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-04-24 13:53:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For another take on Clojure IDE problematic you may want to check https://cb.codes/what-editor-ide-to-use-for-clojure/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493042020.2559750080108642578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493042046.2405340671539306640625;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1059</wp:comment_id>
			<wp:comment_author><![CDATA[Clojure Development Workflow with Spacemacs and CIDER &#8211; Curious (Clojure) Programmer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://curiousprogrammer.net/2017/05/12/clojure-development-workflow-with-spacemacs-and-cider/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.123.96.101]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-12 14:56:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-12 14:56:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] is a follow-up to my previous post What’s the Best Clojure IDE? I&#8217;ll show you my usual Clojure development workflow using Spacemacs+CIDER as primary [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494600979.85309696197509765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494605029.89997100830078125;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1191</wp:comment_id>
			<wp:comment_author><![CDATA[Dviius]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[deliverebaym25@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.35.68.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-06-06 18:25:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-06-06 18:25:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You say, 'Proto REPL "just didn’t feel right to me." - short shrift, for no apparent reason, apart from you already use spacemacs.

You say, 'To be honest, I didn’t spend much time with it (I have other things to do besides testing all possible Clojure editors).' That is some dismissive response, considering the title of the article is ''What’s the Best Clojure IDE?"
I have other things to do, besides reading biased, useless articles, with misleading titles.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1496773523.1796588897705078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1497518139.654652118682861328125;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1262</wp:comment_id>
			<wp:comment_author><![CDATA[Juraj Martinka]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[juraj@curiousprogrammer.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.57.100.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-06-15 09:22:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-06-15 09:22:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dviius, thanks for the comment.

Any article of this sort is bound to be biased.
I experimented quite a lot with Cursive and Emacs, and eventually find that Spacemacs works best for me in most of the cases.
I still think that Cursive and Emacs/Spacemacs are two best editors that one should consider when writing Clojure code.
I'm interested to see where the Proto REPL will move in the future and if the user adoption will increase significantly.

I believe that the article is useful for a novice-to-intermediate developer looking for his Clojure IDE.
At least, I'd appreciate having such resource when I was starting with Clojure to avoid wasting countless hours.

If you have more experience with Proto REPL and/or other Clojure editors it'll be cool if you share it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1191</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1497518561.9366779327392578125;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>My Bookshelf: Create a Project Skeleton for Clojure Web Application</title>
		<link>https://curiousprogrammer.net/2017/03/08/my-bookshelf-create-a-project-skeleton-for-clojure-web-application/</link>
		<pubDate>Wed, 08 Mar 2017 12:06:43 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[<em>In the <a href="https://curiousprogrammer.net/2017/02/15/my-clojure-learning-strategy/">last post</a>, I discussed my Clojure learning strategy in general and introduced my new hobby project My Bookshelf.</em>

<em>This is the very first post in the My Bookshelf series in which I'll describe how to create a skeleton of a simple Clojure web application based on <a href="http://www.luminusweb.net/">Luminus template</a>.</em>
<h2>Getting Started</h2>
When I presented <a href="https://curiousprogrammer.net/2017/02/15/my-clojure-learning-strategy/">My Clojure Learning Strategy</a>, I mentioned the importance of practical experience and learning just enough to get started. This is exactly what <a href="https://curiousprogrammer.net/2017/02/15/my-clojure-learning-strategy/#step7">Step 7 of 10-step learning process is about</a>.

As a preparation, I read the first chapter in <a href="http://amzn.to/2lK9liF">Web Development with Clojure, 2nd ed.</a> This was more than enough to get ready for creating a new project for <em>My Bookshelf.</em>
<h3>Tools</h3>
To be able to generate the project skeleton with Luminus template you need Java JDK and <a href="https://leiningen.org/">Leiningen</a>.

I installed <a href="https://github.com/technomancy/leiningen/wiki/Packaging">Leiningen via brew</a>:

<code>brew install leiningen</code>

You'll also need to install a database of your choice. I chose PostgreSQL:
<pre># install PostgreSQL
brew install postgresql
# Run PostgreSQL as a service whenever the computer is started.
brew services start postgresql
</pre>
After that, you're ready to go.
<h2>Generate a Project Skeleton</h2>
Luminus is a <a href="https://github.com/luminus-framework/luminus-template">handy template</a> providing an opinionated selection of high-quality Clojure libraries. It's really useful for beginners. It'll save you plenty of time and a terrible headache which you'd get trying to explore all available Clojure web development libraries.

Having that said, it's trivial to create a new project:

<code>lein new luminus my-bookshelf +postgres</code>

We've just generated simple web app using the <em>+postgres</em> switch which instructs Luminus to add PostgreSQL dependencies and generate <em>db.core </em>namespace.

You can, of course, select another database if you want. You'll find the list of many possible options in <a href="http://www.luminusweb.net/docs/profiles.md"><em>Application Profiles </em>documentation</a><em>.</em>
<h2>Set Up a Database</h2>
To be able to connect to the database you need to perform an initial setup:
<ul>
 	<li>create a database user for your application</li>
 	<li>create a database itself</li>
</ul>
Both these steps are trivial with PostgreSQL. Run following commands in a shell:
<pre># creates a new user &#039;bookworm&#039; which will be used by our application to connect to the DB
createuser --createdb bookworm

# create 2 databases - one for development, another one for testing
createdb -O bookworm my_bookshelf_dev
createdb -O bookworm my_bookshelf_test
</pre>
<h3>DB config</h3>
Database connection info is stored in <em>profiles.clj</em> in project root directory. This file is automatically generated by luminus template and contains database url for dev and test profiles:
<pre>{:profiles/dev  {:env {:database-url &quot;jdbc:postgresql://localhost/my_bookshelf_dev?user=bookworm&amp;password=password&quot;}}
 :profiles/test {:env {:database-url &quot;jdbc:postgresql://localhost/my_bookshelf_test?user=bookworm&amp;password=password&quot;}}}
</pre>
The database url can always be overriden via <em>DATABASE_URL</em> environment variable.
<h3>Migrate the Database</h3>
Luminus uses <a href="https://github.com/yogthos/migratus">Migratus </a>library for handling database migrations.

To migrate the database just run the following command:
<pre>lein migratus migrate</pre>

Migratus will scan the <em>resources/migrations</em> directory and look for the <em>.sql</em> files which have to follow naming convention <code>^(\d+)-([^\.]+)\.(up|down)\.sql</code>

In our case, it'll find the <em>20170218124009-add-books-table.up.sql</em> file and execute the SQL found there:
<pre>CREATE TABLE books
(id VARCHAR(20) PRIMARY KEY,
 title VARCHAR(30),
 author VARCHAR(60),
 issued DATE,
 status VARCHAR(30));
</pre>
Note: If you leave the password in <em>profiles.clj</em> blank (<em>"</em>jdbc<em>:</em>postgresql<em>://localhost/my_bookshelf_dev?user=bookworm&amp;password=password"</em>) you'll get an obscure error when trying to migrate the database:
<pre>2017-03-07 09:37:12,682 [main] ERROR migratus.database - Error creating DB connection for postgresql://localhost/my_bookshelf_dev?user=bookworm&amp;password=
java.lang.IllegalArgumentException: Vector arg to map conj must be a pair
        at clojure.lang.ATransientMap.conj(ATransientMap.java:37) ~[clojure-1.8.0.jar:na]
...
        at clojure.java.jdbc$parse_properties_uri.invokeStatic(jdbc.clj:178) ~[na:na]
...
        at migratus.database.Database.connect(database.clj:338) [na:na]
...
2017-03-07 09:37:12,683 [main] INFO  migratus.core - Ending migrations
Exception in thread &quot;main&quot; java.lang.NullPointerException, compiling:(/private/var/folders/hn/tgwyrdmj1tb5pmmbdkd1g_qc0000gn/T/form-init7084456921097733207.clj:1:125)
...
Caused by: java.lang.NullPointerException
        at migratus.database$connect_STAR_.invokeStatic(database.clj:223)
        at migratus.database$connect_STAR_.invoke(database.clj:217)
        at migratus.database.Database.connect(database.clj:338)
        ...

</pre>
So make sure that some password is set.
<h2>Run the Application</h2>
Now we are ready to run our application skeleton. Go to the terminal and execute <span style="background-color: #d1d1d1; font-family: Inconsolata, monospace;">lein run</span>.

This will compile the application and start an embedded web server listening on port 3000.
<h3>Configure a Different Port For a Web Application</h3>
Since many Clojure web applications use port 3000 by default, it can be useful to change the port to another one if you want to avoid conflicts.

For instance, I use the port 3003. You can change this setting in <a href="https://github.com/jumarko/my-bookshelf/blob/01-skeleton/env/dev/resources/config.edn#L2"><em>config.edn</em> file</a>.
<h3>Add a Simple Welcome page</h3>
As a first step, we just want to modify the main page to show a title of our shiny new web application.

To make it easy, we'll use <em><a href="http://www.luminusweb.net/docs/html_templating.md#html_templating_using_hiccup">Hiccup</a></em> to generate HTML on a server:
<pre>(defn render-home [books]
  (hiccup.core/html
    [:body [:h1 &quot;My Bookshelf&quot;]]))
</pre>
Notice, that we ignore the input argument <em>books </em>for now. We just want to show a static text.

Now run the application (if you haven't run it already) and open the main page in a browser:

<img class="alignnone size-medium wp-image-118" src="http://curiousprogrammer.net/wp-content/uploads/2017/03/my-bookshelf-01-300x99.png" alt="" width="300" height="99" />
<h2>Conclusion</h2>
That's it!

We managed to generate a skeleton for a new Clojure web application, set up a PostgreSQL database and display our first primitive HTML page rendered by <em>Hiccup.</em>

In the next post, we'll add a basic functionality like showing the list of books to the user.
<h3>Source code</h3>
You can find complete source code for <em>My Bookshelf </em><a href="https://github.com/jumarko/my-bookshelf">in master branch</a>. Beware that this is the latest version and it might be confusing to use it while reading this article.

The version corresponding to this post is tagged (git tag) as <a href="https://github.com/jumarko/my-bookshelf/tree/01-skeleton"><em>01-skeleton</em></a> and you can find it in <a href="https://github.com/jumarko/my-bookshelf/releases/tag/01-skeleton">Releases tab on GitHub</a>.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2017-03-08 12:06:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-08 12:06:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-bookshelf-create-a-project-skeleton-for-clojure-web-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="learning"><![CDATA[Learning]]></category>
		<category domain="category" nicename="my-bookshelf"><![CDATA[My Bookshelf]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588867871;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:80;}i:1;a:1:{s:2:"id";i:38;}i:2;a:1:{s:2:"id";i:320;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Development Workflow with Spacemacs and CIDER</title>
		<link>https://curiousprogrammer.net/2017/05/12/clojure-development-workflow-with-spacemacs-and-cider/</link>
		<pubDate>Fri, 12 May 2017 14:56:15 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This is a follow-up to my previous post <a href="https://curiousprogrammer.net/2017/03/21/whats-the-best-clojure-ide/">What’s the Best Clojure IDE?</a> I'll show you my usual Clojure development workflow using Spacemacs+CIDER as primary tools.</em>

I've already described my tour through the various Clojure IDEs/editors and why I've chosen the Spacemacs. If you haven't read the <a href="https://curiousprogrammer.net/2017/03/21/whats-the-best-clojure-ide/">previous post</a>, you may want to go back and read at least the <a href="https://curiousprogrammer.net/2017/03/21/whats-the-best-clojure-ide/#spacemacs-to-the-rescue">Spacemacs to the rescue</a> part.

In this post, I'll try to dig deeper and show you the complete development workflow. I've chosen video screencast as a primary format for this because I think it's more useful to see everything in action.

We'll create a simple <em>clojure-repl</em> project containing the <em>jmethods </em>function for listing all public methods of java classes.

You can find <strong><a href="https://www.youtube.com/watch?v=4ecC3jqHooc">the video</a></strong> in the <a href="https://www.youtube.com/channel/UCD_9SmDPrAe-sZAfSB9tjdg">Curious Programmer YouTube channel</a>.

Below is a brief summary of topics/tips presented in the screencast.
<h2>Summary</h2>
<ul>
 	<li>Generate new leiningen project: <em>lein new clojure-repl</em></li>
 	<li>Open Spacemacs</li>
 	<li>Create new layout: <code>SPC l 2</code>; enter layout name: <em>clojure-repl</em></li>
 	<li>Open <em>clojure-repl/</em><em>project.clj</em> by pressing <code>SPC f f</code> and looking up the file on a file system</li>
 	<li>Open <em>Neotree</em> buffer via <code>SPC p t</code> to explore project structure
<ul>
 	<li>You can navigate in this buffer via standard vim key bindings: <code>j, k, l, h</code>. You can also press <code>?</code> to open the help</li>
</ul>
</li>
 	<li>Clean the initial project skeleton and commit them via magit: <code>SPC g s</code>
<ul>
 	<li>Expand/collapse the changes by pressing <code>TAB</code></li>
 	<li>Stage the changes for commit by pressing <code>s</code></li>
 	<li>Commit the staged changes by <code>c c</code></li>
</ul>
</li>
 	<li>Create java.clj file in the Neotree buffer by pressing <code>c</code> ("create") and entering the name of the file.</li>
 	<li>Run <em>cider-jack-in </em>by <code>, '</code></li>
 	<li>Switch between REPL and java.clj buffer using <code>C-c C-z</code></li>
 	<li>Evaluate the java.clj buffer via <code>, e b</code></li>
 	<li>Evaluate the function at a point by <code>, e f</code></li>
 	<li>Send results from java.clj buffer to the REPL using <code>, s e</code> while keeping cursor right after the form you want to evaluate</li>
 	<li>Use <em>clojure.core/bean </em>function to examine the properties of java class</li>
 	<li>Reformat a buffer with <code>, = </code>to make sure that your code is compliant with <a href="https://github.com/bbatsov/clojure-style-guide">Clojure style guide</a></li>
 	<li>Use <code>SPC k s</code> for "forward slurp"</li>
 	<li>Use <em>cljr-add-missing-libspec</em> <code>, r a m</code> to add a require unknown symbols (e.g. <em>clojure.string/join</em>) automatically</li>
 	<li>Show documentation popup with <code>, h h</code></li>
 	<li>Navigate to source code by <code>, g g</code>
<ul>
 	<li>works both for Clojure functions and Java classes</li>
 	<li>make sure that you have JDK sources installed on your system - <a href="https://github.com/clojure-emacs/cider-nrepl/blob/master/src/cider/nrepl/middleware/util/java.clj#L47">CIDER will add them automatically to the classpath</a></li>
</ul>
</li>
</ul>
<h3>Bonus</h3>
Additional tips mentioned at the end of the video:
<ul>
 	<li>Describe key bindings via <code>SPC ?</code></li>
 	<li>Start with <code>M-x</code> and type in the "cider-" and/or use menu bar (F10) to search for CIDER commands and explore CIDER capabilities</li>
 	<li>Add new dependencies to project.clj and hot-load them into the REPL via <code>, r a p</code></li>
 	<li><em>cider-inspect-last-result</em>
<ul>
 	<li>press ENTER to deep dive</li>
 	<li>press <code>C-z</code> to switch into the Emacs mode and then <code>l</code> to go up</li>
</ul>
</li>
 	<li>Use <code>SPC /</code> for a quick search within the project
<ul>
 	<li>You can also use <code>C-c C-e</code> to enter the edit mode and replace the text</li>
</ul>
</li>
 	<li>Type <code>*</code> for a quick search/highlight of a symbol under the cursor</li>
 	<li>Display online java doc for Java class with <code>, h j</code></li>
 	<li>Add Clojure sources to the project.clj/profiles.clj to be able to navigate to clojure.core java classes, e.g. <em>clojure.lang.PersistentVector</em></li>
 	<li><strong>Not covered in video</strong>
<ul>
 	<li><em>cider-browse-ns</em> <code>, h n</code> to list all the functions in given namespace together with a documentation preview</li>
 	<li><em>cider-refresh </em> <code>, s x</code> to test everything in a fresh environment</li>
 	<li>CIDER debugger - debug function at the point: <code>, d b</code>
<ul>
 	<li><a href="https://cider.readthedocs.io/en/latest/debugging/#keys">debug mode key bindings</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>Resources</h2>
<ul>
 	<li><strong><a href="https://www.youtube.com/watch?v=4ecC3jqHooc">Youtube video</a></strong></li>
 	<li><a href="https://github.com/jumarko/clojure-repl/blob/master/src/clojure_repl/java.clj">clojure-repl project on GitHub</a>
<ul>
 	<li>besides the <em>jmethods </em>function, there are also <em>jconstructors </em>and <em>jinfo </em>functions which are not shown in the video</li>
</ul>
</li>
 	<li><a href="https://www.youtube.com/watch?v=aYA4AAjLfT0">F(by) 2016 - Bozhidar Batsov - Speech 2 - Deep Dive into CIDER</a> - Bozhidar's talk demonstrating many cool CIDER's features</li>
 	<li><a href="https://www.youtube.com/watch?v=Uuwg-069NYE">Spacemacs - From First Install to Clojure programming without manual configuration</a> - very good and short Spacemacs introductory video</li>
 	<li><a href="https://www.youtube.com/watch?v=k5X2Hb3tc2s">Development Workflow with Spacemacs</a> - quick video introduction with generic spacemacs tips; shows more "git magic" using <em>magit</em></li>
 	<li><a href="https://github.com/Engelberg/instaparse">Instaparse library</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2017-05-12 14:56:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-12 14:56:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-development-workflow-with-spacemacs-and-cider]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="ides-editors"><![CDATA[IDEs / editors]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588883468;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Busy (Clojure) Developer Guide to Podcasts</title>
		<link>https://curiousprogrammer.net/2017/09/18/busy-clojure-developer-guide-to-podcasts/</link>
		<pubDate>Mon, 18 Sep 2017 14:41:45 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<i>In this post, I'll share with you the list of my favorite podcasts. Some of them are focusing on Clojure, but others are more general. This is just a very brief summary. In the future, I'd like to write more posts highlighting my favorite episodes.</i>

In the fast-pacing technology world, it's very hard to stay up to date and very easy to get overwhelmed with the number of new articles, blog posts, conference talks, frameworks. A podcast is an attractive medium and can be a great supplement to other learning resources.

What follows is the list of the podcasts I listen to on a regular basis.
<h2>1. Cognicast</h2>
This is my favorite (mostly) Clojure podcast by Cognitect, and it should be on the radar of every serious Clojure developer.

It's maintained by authors of Clojure. The quality of episodes stays high, and they are rich sources of information.

In the past, it was hosted by <a href="https://twitter.com/craigandera">Craig Andera</a>. Since Craig left Cognitect, the podcast has gotten three new hosts: <a href="https://twitter.com/timbaldridge">Timothy Baldridge</a>, <a href="https://twitter.com/gigasquid">Carin Meier</a>, and <a href="https://twitter.com/stuartsierra">Stuart Sierra</a>.

They cover a variety of topics, and the podcast has an unusual format:
<ul>
 	<li>They always start by asking a guest to share an interesting experience of art whatever it means to the guest.</li>
 	<li>They always end by asking a guest to share a piece of advice</li>
</ul>
You can find the list of all episodes with show notes and full transcription (starting with episode 94) at <a href="http://blog.cognitect.com/cognicast/">http://blog.cognitect.com/cognicast/</a>.
<h2>2. Software Engineering Radio</h2>
This is my favorite general SW engineering podcast.

It covers lots of topics, and unlike <a href="https://softwareengineeringdaily.com/">Software Engineering Daily</a> comes with new episodes at a reasonable pace (every two weeks or so). The topics include software development, testing, social aspects like communication and leading teams, distributed systems, performance, clean code, and more.

There are even some episodes covering Clojure, e.g. <a href="http://www.se-radio.net/2016/05/se-radio-episode-257-michael-nygard-on-clojure-in-practice/">Episode 257: Michael Nygard on Clojure in Practice</a> or <a href="http://www.se-radio.net/2010/03/episode-158-rich-hickey-on-clojure/">Episode 158: Rich Hickey on Clojure</a>.

You can find the list of episodes with brief summaries at <a href="http://www.se-radio.net/">http://www.se-radio.net/</a>.
<h2>3. Defn.audio</h2>
This is an alternative and fun Clojure-only podcast hosted by Vijay Kiran and Ray McDermot from Holland and Belgium. Unlike most of other podcasts, it has two hosts, and there's a ton of humor in each episode :).

They interview very interesting people from Clojure community: the list of former hosts include <a href="https://defn.audio/2016/10/06/episode-11-alex-miller/">Alex Miller</a>, <a href="https://defn.audio/2017/05/11/episode-21-james-reeves-aka-weavejester/">James Reeves</a>, and <a href="https://defn.audio/2017/06/26/episode-23-the-right-honourable-mr-stuart-halloway-aka-stuarthalloway/">Stuart Halloway</a>.

Again, the list of all episodes with short summaries is available online at <a href="https://defn.audio/">https://defn.audio/</a>.
<h2>4. Functional Geekery</h2>
Unlike Cognicast or Defn Podcast, this podcast doesn't focus on any particular programming language. Its topic is functional programming in general, and it's a good supplement to Clojure centric podcasts.

The podcast's host <a href="https://www.proctor-it.com/">Proctor</a> asks very interesting questions and people like this podcast quite a lot.

Usually, there's a comprehensive list of links for each episode at <a href="https://www.functionalgeekery.com/">https://www.functionalgeekery.com/</a>.
<h2>5. CaSE: Conversations about Software Engineering</h2>
I discovered this podcast only recently, after attending EuroClojure 2017 when they recorded the <a href="http://www.case-podcast.org/8-clojure-with-alex-miller">episode with Alex Miller</a>. They cover a full range of topics including Software architecture, Microservices, or Legacy Software.

<a href="http://www.case-podcast.org/">There are only ten episodes so far</a>, so now it's a good time to start listening and catch up on previous episodes.
<h2>How to stay up to date</h2>
Usually, I listen to podcasts during the morning walk with my dog. That means I can finish three podcasts a week on average. Alternating between mostly Clojure (Cognicast and Defn) and more general (Software Engineering Radio, CaSE, and Functional Geekery) gives me a wide variety of topics and broadens my horizons.

If you're just starting with podcasts, I suggest picking only one or two. As you already know, I recommend the combo <em>Cognicast + Software Engineering Radio</em>.
<h2>Call for Action</h2>
Now it's your turn. Take your time to pick a favorite podcast or two and start listening tomorrow!
<h2>Future Posts: Podcasts Summaries</h2>
In the future posts, I'd like to write the reviews of the podcasts' episodes that I liked with brief notes for each episode.

Stay tuned!<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> </span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2017-09-18 14:41:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-18 14:41:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[busy-clojure-developer-guide-to-podcasts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="learning"><![CDATA[Learning]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588445362;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:298;}i:1;a:1:{s:2:"id";i:305;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Functional Programming Brno Meetup: Clojure</title>
		<link>https://curiousprogrammer.net/2017/11/01/functional-programming-brno-meetup-clojure/</link>
		<pubDate>Wed, 01 Nov 2017 10:30:37 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[Last week, I gave a <a href="https://www.meetup.com/fpbrno/events/243877465/">talk about Clojure</a> at <a href="https://www.meetup.com/preview/fpbrno">Functional Programming Brno meetup</a>.

This was my first meetup talk and my first public Clojure presentation too. I'm very grateful for the experience. It was fun, and I met a couple of interesting people.

<h2>Organization</h2>

<a href="https://www.kiwi.com">Kiwi.com</a> and especially Jiří Nečas helped a lot with meetup organization. They provided free beers and some food. It was a first-class experience - I truly appreciate everything they did.

Also, all the attendees were very kind and patient with me. Big thank you to everyone, especially Tomáš Janoušek and the former organizer Matej Kollár.

I hope to find more speakers for the next Functional Programming Brno meetups. If you have any experience with FP and would like to share it with us, please, <a href="https://www.meetup.com/members/75616542/">send me a message via Meetup.com.</a>

<h2>Presentation</h2>

My presentation was based on a wonderful talk <a href="https://www.google.cz/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwjBsqCP_JzXAhUD-6QKHSLRBuwQFggmMAA&amp;url=https%3A%2F%2Fgithub.com%2Fstuarthalloway%2Fpresentations%2Fwiki%2FClojure-in-10-Big-Ideas&amp;usg=AOvVaw2RuDTnbLJIpsoJ4UYvUoUZ">Clojure in 10 Big Ideas</a> by Stuart Halloway. I added a brief Clojure introduction at the beginning and some bits about Clojure in the real world at the end. I reduced the number of ideas to seven (leaving out core.async, protocols, and logic programming).

The presentation focused on people unfamiliar with Clojure. I tried to cover quite a few concepts, and that's why it was so long (1h 45 min). In the future, I certainly need to make my talks shorter.

I divided the talk into four parts:

<h3>1. <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/5">Clojure in Action</a></h3>

A very brief introduction to Clojure syntax using <a href="https://github.com/jumarko/presentations/blob/master/clojure-presentation/src/clojure_presentation/00_hello.clj">simple hello world</a> covering <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/6">basic function definition</a>.

<h3>2. <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/7">Clojure Fundamentals</a></h3>

A quick tour of Clojure (dynamic, functional with an emphasis on immutability, LISP, hosted on the JVM, etc.).

I also mentioned important Clojure ideas:

<ul>
    <li><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simplicity</a></li>
    <li>Separation of identity and state</li>
</ul>

<h3>3. <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/13">Clojure in 7 Big Ideas</a></h3>

The core of the presentation. <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/69">Seven ideas</a> selected from Stuart's 10 Big Ideas:

<ol>
    <li>EDN</li>
    <li>Persistent Data Structures</li>
    <li>Sequences</li>
    <li>Transducers</li>
    <li>REPL</li>
    <li>ClojureScript</li>
    <li>Spec</li>
</ol>

After each section, I demonstrated <a href="https://github.com/jumarko/presentations/tree/master/clojure-presentation/src/clojure_presentation">the examples</a> in REPL. Most of them were very basic. After the <em>Sequences </em>section, I included bit longer demo: <a href="https://github.com/jumarko/presentations/blob/master/clojure-presentation/src/clojure_presentation/03_game_of_life.clj">Game of Life</a>. I also demonstrated the <a href="https://github.com/jumarko/presentations/tree/master/game-of-life">Game of Life visualization in a browser</a> after the <em>ClojureScript</em> part.

<h3>4. <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/72">Clojure in the Wild</a></h3>

A summary of tooling, "problems" with Clojure (e.g. error reporting), real-world Clojure usage, and community resources.

I used the results of Clojure survey: <a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="http://blog.cognitect.com/blog/2017/1/31/state-of-clojure-2016-results"><span class="s2">State of Clojure 2016 Results and Analysis</span></a>.

<h2>Resources</h2>

Slides, audio &amp; video recordings are available:

<ul>
    <li>Video (screen) recording: <a href="https://youtu.be/YeUOWaM_Gk8">https://youtu.be/YeUOWaM_Gk8</a></li>
    <li>Slides: <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/">https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm/</a></li>
    <li>Audio recording: <a href="https://soundcloud.com/fpbrno/fpbrno-clojure-presentation-oct-24-1809">https://soundcloud.com/fpbrno/fpbrno-clojure-presentation-oct-24-1809</a></li>
    <li>Clojure samples from the presentation: <a href="https://github.com/jumarko/presentations/tree/master/clojure-presentation/src/clojure_presentation">https://github.com/jumarko/presentations/tree/master/clojure-presentation/src/clojure_presentation</a></li>
    <li>Game of Life in ClojureScript: <a href="https://github.com/jumarko/presentations/tree/master/game-of-life">https://github.com/jumarko/presentations/tree/master/game-of-life</a></li>
</ul>

Almost all the stuff presented at the meetup come from one of the following resources:

<ul class="ul1">
    <li class="li1"><span class="s1"><b></b><a href="https://vimeo.com/223240720"><span class="s2"><b>Stuart Halloway on Clojure in 10 Big Ideas</b></span></a></span></li>
    <li class="li1"><span class="s3"><a href="http://www.infoq.com/presentations/Simple-Made-Easy"><span class="s2">Rich Hickey: Simple Made Easy</span></a></span></li>
    <li class="li1"><span class="s3"><a href="https://www.slideshare.net/alexmiller/cracking-clojure"><span class="s2">Alex Miller: Cracking Clojure</span></a></span></li>
    <li class="li1"><span class="s3"><a href="https://www.youtube.com/watch?v=hr8RnTfijx0"><span class="s2">Game of Life in Clojure</span></a></span><span class="s4"> [in Czech]</span></li>
    <li class="li1"><span class="s3"><a href="https://clojure.org/"><span class="s2">https://clojure.org/</span></a></span></li>
    <li class="li1"><span class="s3"><a href="https://github.com/uswitch/transducers-workshop/blob/master/slides/01-xducers-intro.pdf"><span class="s2">Transducers workshop</span></a></span><span class="s4"> - uSwitch</span></li>
    <li class="li1"><span class="s3"><a href="https://www.youtube.com/watch?v=Uv9fyDTIPig"><span class="s2">Clojure Pills Screencast: 017 the life and death of an s-expression</span></a></span></li>
    <li class="li1"><a href="https://www.youtube.com/watch?v=j-kj2qwJa_E"><span class="s4">Bruce Hauman - Developing ClojureScript with Figwheel</span></a></li>
    <li class="li2"><span class="s3"><a href="http://blog.cognitect.com/blog/2017/1/31/state-of-clojure-2016-results"><span class="s2">State of Clojure 2016 Results and Analysis</span></a></span></li>
</ul>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2017-11-01 10:30:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-01 10:30:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[functional-programming-brno-meetup-clojure]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="clojurescript"><![CDATA[ClojureScript]]></category>
		<category domain="category" nicename="fpbrno"><![CDATA[FPBrno]]></category>
		<category domain="category" nicename="meetup"><![CDATA[Meetup]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4a0d70a4c3a463f94fbe40f63431b006]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe src="https://www.slideshare.net/slideshow/embed_code/key/uWkGDsKXSH89Rw" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/FPBrno/fpbrno-20171024-clojure-a-functional-lisp-on-the-jvm" title="FPBrno 2017-10-24 - Clojure: A Functional LISP on the JVM" target="_blank">FPBrno 2017-10-24 - Clojure: A Functional LISP on the JVM</a> </strong> from <strong><a href="https://www.slideshare.net/FPBrno" target="_blank">Functional Programming Brno</a></strong> </div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_4a0d70a4c3a463f94fbe40f63431b006]]></wp:meta_key>
		<wp:meta_value><![CDATA[1509526699]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588933461;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:238;}i:2;a:1:{s:2:"id";i:66;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Introducing Clojure Tip of the Day Screencast</title>
		<link>https://curiousprogrammer.net/2017/11/05/introducing-clojure-tip-of-the-day-screencast/</link>
		<pubDate>Sun, 05 Nov 2017 09:06:57 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[I've started a new Clojure screencast Clojure Tip of the Day. It's going to be a collection of short (~5 min) videos covering various Clojure tips, tools, and techniques. I'd like to add a new episode at least once a week.

The first episode is about Cider debugger. It was inspired by a comment on my <a href="https://www.youtube.com/watch?v=4ecC3jqHooc">Clojure Development Workflow with Spacemacs and Cider</a> video tutorial.

You can find the episode on YouTube: <a href="https://www.youtube.com/watch?v=jHCch3-Yuac">https://www.youtube.com/watch?v=jHCch3-Yuac</a>.

See <a href="https://cider.readthedocs.io/en/latest/debugging/">Cider Debugging documentation</a> for more details.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2017-11-05 09:06:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-05 09:06:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[introducing-clojure-tip-of-the-day-screencast]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="emacscider"><![CDATA[Emacs/Cider]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588375634;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:252;}i:1;a:1:{s:2:"id";i:341;}i:2;a:1:{s:2:"id";i:371;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>LambdUp Functional Meetup in Prague</title>
		<link>https://curiousprogrammer.net/2017/11/09/lambdup-functional-meetup-in-prague/</link>
		<pubDate>Thu, 09 Nov 2017 09:33:19 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[There's going to be a very interesting functional meetup <em><strong>LambdUp </strong></em>in Prague (CZ) on 6th December 2017 organized by <a href="https://www.blueberry.io/">Blueberry</a>.

I first heard about the event from Eric Normand at Clojure/conj 2017 in Baltimore.
It's not a coincidence that Eric is also one of the speakers invited to the meetup:

<div>
<ul>
    <li><a href="https://twitter.com/ericnormand">Eric Normand</a> -  A theory of Functional Programming</li>
    <li><a href="https://twitter.com/tomaspetricek">Tomáš Petříček</a> - Functional-fist Programming with F#</li>
    <li><a href="https://twitter.com/cloud8421">Claudio Ortolina</a> - <span id="m_2158371065877750782gmail-m_-4012639399500510270m_-6560210386051933538m_-4853009672235547557gmail-docs-internal-guid-4122efbd-77c6-7a3c-122a-ad14344c2d97">Flexible Elixir</span></li>
    <li><a href="https://twitter.com/cgrand">Christophe Grand</a> - <span id="m_2158371065877750782gmail-m_-4012639399500510270m_-6560210386051933538m_-4853009672235547557gmail-docs-internal-guid-4122efbd-77c6-a3f6-a20f-4fbd6b0307f8">Naming is Hard; or The Value of Values</span></li>
    <li><a href="https://www.linkedin.com/in/magnorsky/">Andrea Magnorsky</a> - What's next? A friendly guide to your next programming language</li>
    <li><a href="https://twitter.com/alesroubicek" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en-GB&amp;q=https://twitter.com/alesroubicek&amp;source=gmail&amp;ust=1510303075114000&amp;usg=AFQjCNFFkVCWgn5Mf_9vgmvsS4NeQC9DVA">Aleš Roubíček</a> - <span id="m_2158371065877750782gmail-m_-4012639399500510270m_-6560210386051933538m_-4853009672235547557gmail-docs-internal-guid-4122efbd-77c5-a5dc-63eb-c548b1d2d52f">Clojure for Machine Learning</span></li>
    <li><span id="m_2158371065877750782gmail-m_-4012639399500510270m_-6560210386051933538m_-4853009672235547557gmail-docs-internal-guid-4122efbd-77c6-448d-3a13-c3b43a8afad6"><a href="https://twitter.com/whatyouhide">Andrea Leopardi</a> - Property-based</span><span id="m_2158371065877750782gmail-m_-4012639399500510270m_-6560210386051933538m_-4853009672235547557gmail-docs-internal-guid-4122efbd-77c6-448d-3a13-c3b43a8afad6"> Testing is a Mindset</span></li>
</ul>
It's a real shame that I cannot visit the meetup since I'm away at that time, but if you happen to be around, give it a shot. <span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">You can find more  at <a href="https://www.lambdup.io/">https://www.lambdup.io/</a></span>

<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> </span>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2017-11-09 09:33:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-09 09:33:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lambdup-functional-meetup-in-prague]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="meetup"><![CDATA[Meetup]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1586795750;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:66;}i:2;a:1:{s:2:"id";i:320;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day - Episode 2: Cider Enlighten Mode</title>
		<link>https://curiousprogrammer.net/2017/11/09/clojure-tip-of-the-day-episode-2-cider-enlighten-mode/</link>
		<pubDate>Thu, 09 Nov 2017 12:17:13 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[The new episode of my <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of the Day</a> screencast is out.

You can find the video on YouTube: <a href="https://youtu.be/tCu2AewBTR4">https://youtu.be/tCu2AewBTR4</a>

The episode covers the <em><strong><a href="https://cider.readthedocs.io/en/latest/miscellaneous_features/#enlighten-display-local-values">cider-enlighten-mode</a></strong></em>. This mode can be used to quickly show values of local symbols and return values of functions in real time. Unfortunately, the feature is <a href="https://github.com/clojure-emacs/cider/blob/master/doc/caveats.md">not available in ClojureScript buffers</a>.

Notice, that unlike for <a href="http://cider.readthedocs.io/en/latest/debugging/">cider-debugger</a> <em>(cider-debug-print-length</em> and <em>cider-debug-print-level</em><em>),</em> there's no option to customize the <em>print-length </em>for the enlighten mode (see <em>Cider implementation details </em>below).

<h3><strong>Cider implementation details</strong>:</h3>

<ul>
    <li>main function handling enlighten mode: <a href="https://github.com/clojure-emacs/cider/blob/ba66d222a8ce4c1b1b2f5ced3ce8143334ceae1e/cider-debug.el#L646"><em>cider--handle-enligthen</em></a></li>
    <li><a href="https://github.com/clojure-emacs/cider-nrepl/blob/master/src/cider/nrepl/middleware/enlighten.clj#L13">hardcoded limit</a> (*print-length* 3) in cider-nrepl</li>
    <li><a href="https://github.com/clojure-emacs/cider/pull/1545">Pull Request #1545</a> that introduced the cider-enlighten-mode</li>
</ul>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2017-11-09 12:17:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-09 12:17:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-2-cider-enlighten-mode]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="emacscider"><![CDATA[Emacs/Cider]]></category>
		<category domain="category" nicename="ides-editors"><![CDATA[IDEs / editors]]></category>
		<category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
		<category domain="category" nicename="screencast"><![CDATA[ScreenCast]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588818688;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:225;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:263;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day - Episode 3: Threading Macros Tracing</title>
		<link>https://curiousprogrammer.net/2017/11/20/clojure-tip-of-the-day-episode-3-threading-macros-tracing/</link>
		<pubDate>Mon, 20 Nov 2017 09:38:36 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[The third episode of my <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of the Day</a> screencast is out.

You can find the video on YouTube: <a href="https://youtu.be/z5pe9ydcYoI">Clojure Tip of the Day - Episode 3: Threading macros tracing</a>

The episode shows a quick "debugging" technique using the <code>println</code> function to print intermediate values flowing through the threading macros to the standard output.

<h3>TL;DR</h3>

<ul>
    <li>For <a href="https://clojuredocs.org/clojure.core/-%3E">thread-first macro</a> you can use <code>(doto println)</code> to quickly print intermediate value</li>
    <li>Usually, it's better and more convenient to introduce little helper function <em><strong>spy </strong></em>: <code>(def spy #(do (println "DEBUG:" %) %))</code> which then works for all threading macros</li>
    <li>If you want to use <em>doto</em>-like method then you need to wrap in an anonymous function: <code>(#(doto % println))</code> (notice extract parentheses - see macro-expansion of threading macros)</li>
</ul>

<h3> Credit</h3>

Thanks to <a href="https://twitter.com/seancorfield">Sean Corfield</a> and <a href="https://github.com/emidln">Brandom Adams</a> for providing the tips on the <a href="https://clojurians.slack.com">Clojurians slack channel</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2017-11-20 09:38:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-20 09:38:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-3-threading-macros-tracing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="clojure-tip-of-the-day"><![CDATA[Clojure Tip of the Day]]></category>
		<category domain="category" nicename="screencast"><![CDATA[ScreenCast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588907424;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:275;}i:1;a:1:{s:2:"id";i:252;}i:2;a:1:{s:2:"id";i:283;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2817</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan K]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jonathan.kovis@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.16.26.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-05-10 17:59:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-05-10 17:59:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for posting this, it was exactly what I needed to see where my code was breaking]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1557511156.8901729583740234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559299807.332377910614013671875;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Clojure Tip of the Day - Episode 4: Threading Macros: part 1 - thread-first, thread-last, thread-as</title>
		<link>https://curiousprogrammer.net/2018/01/18/clojure-tip-of-the-day-episode-4-threading-macros-part-1-thread-first-thread-last-thread-as/</link>
		<pubDate>Thu, 18 Jan 2018 09:41:02 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[After a long break, I've finally recorded another episode of the <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of The Day screencast</a>. I've spent last month or so by revisiting my goals for the next year and I want to bring more consistency to my blog and other creative activities.

This episode is about thread-first (-&gt;), thread-last (-&gt;&gt;), and thread-last (as-&gt;) macros. Again, you can find it on YouTube: <a href="https://www.youtube.com/watch?v=w0CxOHmny80">https://www.youtube.com/watch?v=w0CxOHmny80</a>

The next episode will be about <em>some-&gt;</em>, <em>some-&gt;&gt;</em>, <em>cond-&gt;</em>, and <em>cond-&gt;</em>.

You can find the source code on GitHub in <a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/004_threading_macros.clj">curiousprogrammer-net/clojure-tip-of-the-day repository</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2018-01-18 09:41:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-18 09:41:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-4-threading-macros-part-1-thread-first-thread-last-thread-as]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="clojure-tip-of-the-day"><![CDATA[Clojure Tip of the Day]]></category>
		<category domain="category" nicename="screencast"><![CDATA[ScreenCast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588698783;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:263;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:371;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2808</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jeremy.vuillermet@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/iorekz</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.124.156.196]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-01-18 13:44:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-01-18 13:44:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How didn't I know about as-&gt;, that's crazy !! thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516283092.7791728973388671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516380431.6430759429931640625;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Clojure Tip of the Day – Episode 5: Threading Macros: part 2 – some-&gt;, some-&gt;&gt;, cond-&gt;, cond-&gt;&gt;</title>
		<link>https://curiousprogrammer.net/2018/01/24/clojure-tip-of-the-day-episode-5-threading-macros-part-2-some-some-cond-cond/</link>
		<pubDate>Wed, 24 Jan 2018 10:31:14 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[Today, I've published a follow-up for the <a href="https://curiousprogrammer.net/2018/01/18/clojure-tip-of-the-day-episode-4-threading-macros-part-1-thread-first-thread-last-thread-as/">previous episode</a> showing the remaining 4 Clojure threading macros: some-&gt;, some-&gt;&gt;, cond-&gt;, and cond-&gt;&gt;.

The episode is on YouTube: <a href="https://www.youtube.com/watch?v=hgu3jT1YI_U">https://www.youtube.com/watch?v=hgu3jT1YI_U</a>

The source code is on GitHub in <a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/004_threading_macros.clj#L87">the same file as the previous episode</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2018-01-24 10:31:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-24 10:31:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-5-threading-macros-part-2-some-some-cond-cond]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="clojure-tip-of-the-day"><![CDATA[Clojure Tip of the Day]]></category>
		<category domain="category" nicename="screencast"><![CDATA[ScreenCast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588757099;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:275;}i:1;a:1:{s:2:"id";i:263;}i:2;a:1:{s:2:"id";i:225;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[clojure-tip-of-the-day-episode-4-threading-macros-part-2-some-some-cond-cond]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day – Episode 6: How To Reload Multimethod Definition</title>
		<link>https://curiousprogrammer.net/2018/02/05/clojure-tip-of-the-day-episode-6-how-to/</link>
		<pubDate>Mon, 05 Feb 2018 10:39:52 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[A new episode of <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of the Day screencast</a> is out.

This is a short episode showing how to reload <code>defmulti</code> definition if you need to change the dispatch function.

Video on YouTube: <a href="https://www.youtube.com/watch?v=aEAb1SoVMJ8">https://www.youtube.com/watch?v=aEAb1SoVMJ8</a>

Source code on GitHub: <a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/006_multimethod_reload.clj">006_multimethods_reload.clj</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2018-02-05 10:39:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-05 10:39:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-6-how-to]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588903723;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:371;}i:1;a:1:{s:2:"id";i:316;}i:2;a:1:{s:2:"id";i:225;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Defn Podcast Episode 30 - Zach Tellman</title>
		<link>https://curiousprogrammer.net/2018/02/10/defn-podcast-episode-30-zach-tellman/</link>
		<pubDate>Sat, 10 Feb 2018 17:25:13 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This is a summary of the defn podcast interview with Zach Tellman.</em>

It was a wonderful <a href="http://defn.audio/episodes/2018/01/27/zach-tellman.html">30th episode of the defn podcast</a> where they interviewed Zach Tellman. As is so often the case with Zach's talks, it's a great discussion full of insights.

I usually take personal notes for many podcasts that I listen to (see <a href="https://curiousprogrammer.net/2017/09/18/busy-clojure-developer-guide-to-podcasts/">Busy (Clojure) Developer Guide to Podcasts</a>). The reasons are to help me remember more and sometimes be able to do a quick review without a need to re-listen the whole thing.

Most of the podcasts that I listen to have only very brief show notes. And it's very true for defn podcast too. Therefore, I decided to put together a somewhat longer version. Beware that these are my own interpretations and because I wrote them down while walking and listening they may also be slightly incorrect. I encourage you to listen to the whole episode, take your own notes and draw your conclusions.

You can also expect more podcasts' summaries on this blog in the future.

<h2>Show notes</h2>

<ul>
    <li><strong><a href="http://elementsofclojure.com/">Elements of Clojure</a></strong>
<ul>
    <li>This is Zach's new self-published book that has already been available for some time.</li>
    <li>There's also a <a href="https://groups.google.com/forum/#!forum/elements-of-clojure">discussion forum</a> dedicated to the book.</li>
    <li>He started the first serious work on this topic two years ago.</li>
    <li>He didn't anticipate how much work it would be and spent a lot of time reading many resources on the topic.</li>
</ul>
</li>
    <li>Lot of code we (programmers) write is a <em><strong>throw-away code</strong></em>
<ul>
    <li>More frequent in LISP community.</li>
    <li>It's okay many times.</li>
    <li>Writing reusable code is hard.</li>
</ul>
</li>
    <li><strong>Correctness &amp; proofs</strong>
<ul>
    <li>1972 paper: <a href="https://link.springer.com/article/10.1007/BF00289507"><em>Proof of correctness of data representations</em></a></li>
    <li>People should stop talking about software being correct and talk about software being <em><strong>self-consistent.</strong></em></li>
    <li>The hardest problem is to write software that's useful when it's outside of its usual environment.</li>
</ul>
</li>
    <li><strong>Dynamic vs. static typing</strong>
<ul>
    <li>Having some dynamism at the edges of your system is useful.</li>
    <li>The real world doesn't have schemas.</li>
    <li>Clojure's unique feature is that it brings immutability into the ecosystem of dynamic languages.</li>
    <li>Clojure is a very good language for writing glue between more "rigid" components in your system. Those components might be written in other, more static languages (often in the form of Java library used directly from Clojure).</li>
</ul>
</li>
    <li><em><strong>nil </strong></em><strong>handling</strong>
<ul>
    <li>One thing that Zach considers less than ideal in Clojure is that you can end up with <em><strong>nil </strong></em>propagating through half of the code only to eventually fail with NPE</li>
    <li>The usual idiom <em>(when fn-arg (do stuff))</em> is terrible</li>
    <li>A lot of things in Clojure are designed to be concise. In some situations, it could be better to be explicit: e.g., requiring a default value for <em>clojure.core/get</em></li>
</ul>
</li>
    <li><strong>Clojure concurrency features</strong>
<ul>
    <li><em>Why STM hasn't been as successful as expected</em>
<ul>
    <li>STM makes things much more complicated (compared to a simple atom) while it gives us only small benefits (mostly under heavy contention).</li>
    <li>We usually don't write systems with that heavy concurrency - we instead scale them by distributing load over multiple machines.</li>
</ul>
</li>
    <li><em>core.async</em> is mostly useful on the client side (ClojureScript)
<ul>
    <li>People often use it on the server side even if there's no compelling reason to do so.</li>
</ul>
</li>
</ul>
</li>
    <li><strong>Laziness</strong>
<ul>
    <li>It can be tricky because there's no clear distinction between data in the process and outside the process (file, network, etc.)
<ul>
    <li>Here's further discussion about push &amp; pull concepts: <a href="https://groups.google.com/forum/#!msg/elements-of-clojure/qPd--oNq7IU/vEXNtvsPAgAJ"><em>Question: Not able to understand function pull, push and transform</em></a></li>
</ul>
</li>
    <li>If Rich had known about transducers before Clojure 1.0 release, he would have made the laziness much less a default option in Clojure.</li>
</ul>
</li>
    <li><strong>Light Table</strong>
<ul>
    <li>Venture capitalists aim at billion dollar businesses which is problematic for developer tools like Light Table - it's a pretty decent editor but it's not clear how much money this area can bring to investors</li>
    <li>Light Table is a nice demonstration of <a href="https://www.youtube.com/watch?v=PUv66718DII">Bret Victor's ideas</a></li>
</ul>
</li>
    <li>The great aspect of American culture is that it allows you to fail in your business =&gt; it encourages experimentation.</li>
    <li><strong>Zach's history</strong>
<ul>
    <li>He studied computer science at college.</li>
    <li>He originally wanted to do games development, but later realized that it's not for him.</li>
    <li>He spent some time at C# shop - working on low-level Windows graphics stuff.</li>
    <li>He joined Google for a short period of time</li>
    <li>Eventually, he started working for Clojure startup and has been with Clojure ever since</li>
</ul>
</li>
    <li>Zach's successful open-source projects: <a href="https://github.com/ztellman/aleph"><em><strong>Aleph</strong></em></a> and <em><a href="https://github.com/ztellman/manifold"><strong>Manifold</strong></a></em></li>
    <li><strong>Spec</strong>
<ul>
    <li>Spec is perhaps the first addition to Clojure in the last five years that can really change the way how programmers think about the language.</li>
    <li>Spec error reporting is rather weak, though
<ul>
    <li>Cognitect's approach to leave this as an exercise to a reader is less than ideal.</li>
</ul>
</li>
    <li>Spec is a clever technical solution to what is a fundamentally human problem.
<ul>
    <li>To have a really good human-readable error messages you'd have to have a possibility to specify error message generator with every spec.</li>
</ul>
</li>
</ul>
</li>
    <li><em>Mean-time-to-accomplish-something</em> is an important criterion for new people starting with a programming language
<ul>
    <li>For Zach, Clojure has been great in this aspect because it allowed him to do rapid experiments with OpenGL library</li>
</ul>
</li>
    <li><strong>Community has to step in</strong>
<ul>
    <li>Start defining the best practices/libraries which should be used in the community.</li>
    <li>One good example is <a href="https://github.com/ring-clojure/ring"><em><strong>ring</strong></em></a> library.</li>
    <li><a href="https://clojuriststogether.org/">https://clojuriststogether.org/</a> is a nice initiative.</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2018-02-10 17:25:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-10 17:25:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[defn-podcast-episode-30-zach-tellman]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="defn-podcast"><![CDATA[Defn Podcast]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1586868669;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:190;}i:1;a:1:{s:2:"id";i:305;}i:2;a:1:{s:2:"id";i:38;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/?p=450</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[<!--?xml version="1.0" encoding="UTF-8" ?-->

<p><title>2020-05-04-weekly.html</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"></p>

<h1>Weekly Bits &amp; Pieces 01/2020</h1>

<p><em>This is the very first weekly summary published on my blog.
It reviews interesting stuff I did and found in the past week</em>.</p>

<p><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->
<strong>Table of Contents</strong></p>

<ul>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#learning">Learning</a></li>
<li><a href="#rapid-learner">Rapid Learner</a></li>
<li><a href="#reading">Reading</a></li>
<li><a href="#writing">Writing</a></li>
<li><a href="#personal-hobbies">Personal (Hobbies)</a></li>
<li><a href="#projects-update">Projects Update</a></li>
<li><a href="#python-for-data-science">Python for Data Science</a></li>
<li><a href="#sicp">SICP</a></li>
<li><a href="#computer-systems">Computer Systems</a></li>
<li><a href="#work-codescene">Work (CodeScene)</a></li>
<li><a href="#codescene-40">CodeScene 4.0</a></li>
<li><a href="#jvm-crash-and-slow-analyses">JVM crash and slow analyses</a></li>
<li><a href="#windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</a></li>
<li><a href="#windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</a></li>
<li><a href="#azure-containers---really-slow-io">Azure Containers - (really) slow IO</a></li>
</ul>

<!-- markdown-toc end -->

<div id="clojure"></div>

<h2>Clojure</h2>

<p>I found two interesting pieces on Clojurians slack:</p>

<ul>
    <li>hiredman's <code>for</code> example ("swiss army knife") showing how to navigate nested data (even using a recursive function)
```
(for [maybe-x (tree-seq map? :content xml)
:when (= (:tag maybe-x) :x)
maybe-y (:content maybe-x)
:when (= (:tag maybe-y) :y)
,,,
]
whatever)</li>
</ul>

<p>;; you can even do recursive queries with it by just wrapping it in a recursive function
(fn f [whatever] (for [x whatever i (f x)] i))</p>

<pre><code>* #off-topic discussion about &lt;strong&gt;Clojure and teams productivity&lt;/strong&gt; (Alex Miller) - I was astonished
when I found &lt;strong&gt;there are only 4 people doing all the development on Clojure, Datomic&lt;/strong&gt; et al.
&lt;blockquote&gt;there are only 4 people doing all of the dev on Datomic, Clojure, etc combined so we are a tiny team of very experienced people using high leverage tools. I'm not sure this is directly relevant to most software teams in general (but Clojure projects do probably tend to be more that, and less big teams)

Mythical man month is really from the perspective of someone working on teams of like 50-100 people, which is a totally different world

no matter how big your team is, the important thing is to connect what people are doing with business value. as team size gets bigger, you inevitably are going to spend a lot more time communicating what to do and what has been done, which is inherently less efficient. So bigger teams need to put in more active effort to optimize that communication flow.

Tools like Clojure and Datomic are designed to let a small team get higher leverage and do more with less, both in initial development AND over time as requirements and software changes (caring about this latter bit is imo something Rich pays way more attention to than most), which lets you stay small and avoid taking the efficiency hit in scaling longer than other tools.&lt;/blockquote&gt;
I was also surprised by a big performance difference betwee NumPy's array operations
vs Clojure - see &lt;a href="#python-for-data-science"&gt;Python for Data Science&lt;/a&gt; for more details
&lt;div id="learning"&gt;&lt;/div&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;div id="rapid-learner"&gt;&lt;/div&gt;
&lt;h3&gt;Rapid Learner&lt;/h3&gt;
I've been very curious about general learning strategies for a long time.
A few years ago, I purchased the &lt;a href="https://www.scotthyoung.com/courses/course/rapid-learner/"&gt;Rapid Learner course by Scott Young&lt;/a&gt;.
I've never managed to finish it although I adopted a few ideas from the course.
A couple of weeks ago, I decided to restart the course (which now has a lot of new content marketed as "Rapid Learner 2.0").

The ideas of &lt;strong&gt;practice&lt;/strong&gt; and &lt;strong&gt;directness&lt;/strong&gt; are the core concepts in the course
and it's focus is on practical projects. Thus I'm trying to apply the ideas while going through
the &lt;a href="#python-for-data-science"&gt;Python for Data Science&lt;/a&gt; project.
&lt;div id="reading"&gt;&lt;/div&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
I always liked reading - it was my passion since grammar school.
Today I read mostly non-fiction books with heavy focus on programming-related topics.

I finished a wonderful practical book about networking called
&lt;a href="https://www.amazon.com/Networking-Systems-Administrators-Mastery-Book-ebook/dp/B00STLTH74"&gt;Networking for System Administrators&lt;/a&gt;.
I'll post more details on &lt;a href="https://curiousprogrammer.net/book-summaries/"&gt;Book summaries&lt;/a&gt; soon.

Recently, I've enjoyed reading &lt;a href="https://basecamp.com/shapeup"&gt;Shape Up&lt;/a&gt; by Ryan Singer from Basecamp
and &lt;a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548"&gt;On Writing Well&lt;/a&gt;
by William Zinsser.
Both are great books and I'll tell you more about them soon.

Finally, you can check &lt;a href="https://www.goodreads.com/user/show/61742630-juraj-martinka"&gt;my goodreads profile&lt;/a&gt;
to find more books I've read or plan to read.
&lt;div id="writing"&gt;&lt;/div&gt;
&lt;h2&gt;Writing&lt;/h2&gt;
Writing is a great exercise for a programmer - it forces you to clear your thoughts
and it's similar, in many aspects, to coding.

It's been my hope that I can learn and improve this skill ever since I started the
&lt;a href="https://curiousprogrammer.net/about/"&gt;curiousprogrammer.net blog&lt;/a&gt;.
I've been dormant for a while but now, armed with a few tips from &lt;a href="#reading"&gt;On Writting Well&lt;/a&gt;,
I'm going to post new content more regularly.
&lt;a href="https://curiousprogrammer.net/weekly-bits-pieces/"&gt;Weekly Bits &amp;amp; Pieces&lt;/a&gt; are the most recent
addition.
&lt;div id="personal-hobbies"&gt;&lt;/div&gt;
&lt;h2&gt;Personal (Hobbies)&lt;/h2&gt;
After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)
in Moravian Karst, Sloup (near Brno).
It was fun despite a quite specific type of climbing (&lt;em&gt;very&lt;/em&gt; polished) :).
&lt;div id="projects-update"&gt;&lt;/div&gt;
&lt;h2&gt;Projects Update&lt;/h2&gt;
&lt;div id="python-for-data-science"&gt;&lt;/div&gt;
&lt;h3&gt;Python for Data Science&lt;/h3&gt;
I've decided to learn some Data Science using Python.
I'm loosely following the curriculum outlined in
&lt;a href="https://www.kdnuggets.com/2019/06/python-data-science-right-way.html"&gt;How to Learn Python for Data Science the Right Way&lt;/a&gt;.
Python is a new language for me (excluding an old short-term experience),
so the &lt;a href="https://www.oreilly.com/library/view/python-for-data/9781491957653"&gt;Python for Data Analysis book&lt;/a&gt;
seems to be a great fit.

Last week I finished Chapter 4 about &lt;a href="https://numpy.org/"&gt;&lt;strong&gt;NumPy&lt;/strong&gt;&lt;/a&gt;:
&lt;ul&gt;
    &lt;li&gt;It's a common low-level library for fast array computation - implemented in C and using
"vectorized" functions operating on whole arrays instead of element-wise (like pure python)&lt;/li&gt;
    &lt;li&gt;I learned about &lt;em&gt;Slicing&lt;/em&gt;, &lt;em&gt;Boolean indexing&lt;/em&gt;, &lt;em&gt;Multi-dimensional arrays&lt;/em&gt;, and &lt;em&gt;Random walks&lt;/em&gt;
among other things.&lt;/li&gt;
    &lt;li&gt;I was amazed by the performance difference between Python (2-3 ms) and Clojure (13-14 ms)
when multiplying an array of 1,000,000 elements by 2:
</code></pre>

<p>;;; Python =&gt; 22.8 ms for 10 iterations of 1,000,000 elements =&gt; 2-3 ms for a single iteration
import numpy as np</li>
</ul>
my<em>arr = np.arange(1000000)
my</em>list = list(range(1000000))</p>

<p>%time for _ in range(10): my<em>arr2 = my</em>arr * 2
CPU times: user 14.5 ms, sys: 8.33 ms, total: 22.8 ms
Wall time: 22.8 ms</p>

<p>;;; Clojure - vectors &amp; arrays =&gt; ~13 ms at best using plain arrays
(def my-array (int-array (range 1000000)))
(time
(dotimes [i 10]
(amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx)))))
"Elapsed time: 133.522233 msecs"</p>

<p>;; use also criterium for more objective measurement
(require '[criterium.core :as crit])
(crit/quick-bench (amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx))))
;; Evaluation count : 48 in 6 samples of 8 calls.
;; Execution time mean : 14.022060 ms
;; Execution time std-deviation : 476.098590 µs
;; Execution time lower quantile : 13.728450 ms ( 2.5%)
;; Execution time upper quantile : 14.807910 ms (97.5%)
;; Overhead used : 8.025814 ns</p>

<pre><code>* &lt;em&gt;Random Walk&lt;/em&gt; example in section 4.7 was pretty interesting - I don't think I ever heard
about &lt;em&gt;first crossing time&lt;/em&gt; value:
- &lt;img src="2020-05-04-ds-random-walk-python.png" alt="Random Walk using plain python" title=""&gt;
- &lt;img src="2020-05-04-ds-random-walk-numpy.png" alt="Random Walk using NumPy" title=""&gt;
&lt;div id="sicp"&gt;&lt;/div&gt;
&lt;h3&gt;SICP&lt;/h3&gt;
I've been reading &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
for a really long time.
It's a fantastic and challenging book.
It takes me a lot of time to do the exercises but they are definitly worth it.
I'll keep crawling through the book at my toirtose pace :)

Last week I finished the &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.4"&gt;Huffman Encoding&lt;/a&gt;
section - apart from an exercise on how to represent trees
I learned about &lt;em&gt;prefix codes&lt;/em&gt; and &lt;em&gt;variable length encoding&lt;/em&gt;.

You will find all my source code from the book here: &lt;a href="https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp"&gt;https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp&lt;/a&gt;
&lt;div id="computer-systems"&gt;&lt;/div&gt;
&lt;h3&gt;Computer Systems&lt;/h3&gt;
&lt;a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-Global-ebook/dp/B07V71PHR7/ref=pd_sbs_14_1/130-8492999-1421206?_encoding=UTF8&amp;amp;pd_rd_i=B07V71PHR7&amp;amp;pd_rd_r=ed8e11fb-e5ef-468e-8a46-b165f8f3d182&amp;amp;pd_rd_w=UG6HR&amp;amp;pd_rd_wg=oNLvC&amp;amp;pf_rd_p=d13bb895-21d3-4e96-94a7-553aaae51224&amp;amp;pf_rd_r=9WZHWXSX0QYER6ZFQXZ6&amp;amp;psc=1&amp;amp;refRID=9WZHWXSX0QYER6ZFQXZ6"&gt;Computer Systems: A Programmer's Perspective&lt;/a&gt;
is another great book - this time about lower-level programming, operating systems and machine/assembly language.

I started the chapter 3 &lt;em&gt;Machine-Level Representation of Programs&lt;/em&gt; and found it refreshing
after the chapter 2 about machine representation of numbers (which is math-heavy and became boring at some point)

I enjoyed a "disassembling" exercise with &lt;code&gt;gcc -Og&lt;/code&gt; and &lt;code&gt;objdump -d&lt;/code&gt; (section 3.2.2)
</code></pre>

<h1>diassemble object code</h1>

<p>gcc -Og -c mstore.c
objdump -d mstore.o</p>

<h1>diassemble executable (object code + linking)</h1>

<p>gcc -Og -o prog  main.c mstore.c
objdump -d prog
```</p>

<p>I've also found a striking connection to the Huffman Encoding section in SICP - x86 assembly
is really a <em>prefix code</em>!
- Diassembled object code: <code>objdump -d mstore.o</code>
<img src="2020-05-04-cs-objdump-object-code.png" alt="Disassemble object code" title="">
- Disassembled executable: <code>objdump -d prog</code>
<img src="2020-05-04-cs-objdump-executable.png" alt="Disassemble object code" title=""></p>

<p>You can find my book code examples here: <a href="https://github.com/jumarko/computer-systems">https://github.com/jumarko/computer-systems</a></p>

<div id="work-codescene"></div>

<h2>Work (CodeScene)</h2>

<p>I joined company called Empear back in 2017 to work on
<a href="https://empear.com/how-it-works/">CodeScene - a unique behavioral code analysis tool</a>.
I've been really grateful for that - the team is great, I'm learning a lot every day
and I can use Clojure in my daily work.</p>

<div id="codescene-40"></div>

<h3>CodeScene 4.0</h3>

<p>The last week was special because we released a new major version of our enterprise product:
<a href="https://empear.com/blog/codescene-release-4_0/">CodeScene 4.0</a>.
I haven't worked on this release - I'm mostly focusing on <a href="https://codescene.io">codescene.io</a> -
but my colleagues did a great work in this area.
The new version comes with a completely new more intuitive UI with greater focus on features auto-discovery.
We're looking forward to hearing customers' feedback.</p>

<p>For <a href="https://codescene.io">codescene.io</a>, the "cloud" version of CodeScene,
we're adding Bitbucket support (today you can only analyze GitHub repositories).
It will be an important step for reaching a wider audience.</p>

<p>If you're interested, you can analyze your public repositories for free
or <a href="https://codescene.io/plans">get a paid plan</a> if you want to try it on private projects.
Moreover, if you're a student or a teacher you can get a paid plan for free:</p>

<ul>
    <li><a href="https://codescene.io/github-students">https://codescene.io/github-students</a></li>
    <li><a href="https://codescene.io/github-teachers">https://codescene.io/github-teachers</a></li>
</ul>

<div id="jvm-crash-and-slow-analyses"></div>

<h3>JVM crash and slow analyses</h3>

<p>While onboarding a few customers we faced issues with slow analyses.
CodeScene is usually pretty fast (running Linux analysis in ~40 minutes on a Macbook Pro laptop with a solid SSD disk)
but two customers were trying to analyze their big repositories and their analyses were running
for more than one day.</p>

<p>There were three distinct cases:</p>

<ol>
    <li>One customer running CodeScene in docker inside a Linux virtual machine hosted on Windows Server 2019</li>
    <li>The same customer later switching to Tomcat deployment directly on the Windows Server host</li>
    <li>Another customer using <a href="https://hub.docker.com/r/empear/ubuntu-onprem/">our docker image</a>
and deploying CodeScene with Azure Containers</li>
</ol>

<div id="windows-server---linux-vm-and-jvm-bug"></div>

<h4>Windows Server - Linux VM and JVM bug</h4>

<p>First, they tried to run CodeScene using our docker image and hit a JVM bug right from the start:
<img src="2020-05-04-codescene-avx-bug.png" alt="SIGILL JVM error" title=""></p>

<p>As my colleague found, this was due to incorrect detection of AVX instruction family support
(vectorized processor instructions) in the JVM.
There's an open issue for that: <a href="https://bugs.openjdk.java.net/browse/JDK-8238596">https://bugs.openjdk.java.net/browse/JDK-8238596</a>.</p>

<p>Once we identified the root cause the workaround was relatively easy - don't use AVX:</p>

<p><code>
docker run -e JAVA_OPTIONS=-XX:UseAVX=0 empear/ubuntu-onprem:latest
</code></p>

<p>The AVX instruction support can be verified (on Linux) via <code>lscpu</code> - just check the <code>FLags</code> section
if there's 'avx' or not:
<img src="2020-05-04-codescene-avx-bug-lscpu.png" alt="lscpu - missing AVX flag" title=""></p>

<p>As we later found, the AVX instruction wasn't supported due to "Compatibility Configuration"
on the Windows Server host which allowed the VMs to be easily migrated between physical hosts:
<img src="2020-05-04-codescene-avx-bug-vm-compatibility.png" alt="Windows Server - VM compability configuration" title=""></p>

<p>The customer ended up using Tomcat installed directly on the Host Windows OS,
but it was a really tricky support case anyway.</p>

<div id="windows-server---tomcat-and-small-heap-size"></div>

<h4>Windows Server - Tomcat and small heap size</h4>

<p>The customer decided to switch from Docker to Tomcat deployment but the analysis was still very slow.
We thought it could be a slow IO issue again, because of dealing with another customer's installation
at the same time (see Azure Containers section below).
But It turned out they were using really fast SAN (Storage Area Network) disk storage.</p>

<p>Eventually, we found the root cause: <strong>small <em>default</em> heap</strong> size set by Tomcat:
although the machine had 32 GB of ram, the default Max heap size set by Tomcat Windows installer
was only about ~250 MB.
After raising the max heap size manually to 12 GB the analysis finished within a hour (they have a huge repository):
<img src="2020-05-04-codescene-windows-tomcat-heap-settings.png" alt="Tomcat on Windows - heap settings" title=""></p>

<div id="azure-containers---really-slow-io"></div>

<h4>Azure Containers - (really) slow IO</h4>

<p>Another painful experience with slow shared file storage on Azure.
A customer analyzing a huge repository couldn't get the results even after a few days!
The problem is still being investigated, but we believe the issue is shared file storage used
by Azure Containers (and also Azure App Service).</p>

<p>CodeScene is an IO intensive application and needs a fast disk.
Thus any kind of distributed file system makes it very sad.
For these reasons <a href="https://docs.enterprise.codescene.io/versions/4.0.2/getting-started/deployment-options.html#system-requirements">we don't recommend using Azure Files, AWS EFS et al</a>.
I ran CodeScene via Azure App Service the last year and found it <strong>at least 10x slower</strong> on medium-sized
repositories compared to a deployment on a plain Linux VM.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 04:54:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588956750;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:298;}i:2;a:1:{s:2:"id";i:94;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588956817;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:298;}i:2;a:1:{s:2:"id";i:94;}i:3;a:1:{s:2:"id";i:58;}i:4;a:1:{s:2:"id";i:80;}i:5;a:1:{s:2:"id";i:190;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces 01/2020 (27.4. - 3.5.)</title>
		<link>https://curiousprogrammer.net/?p=455</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=455</guid>
		<description></description>
		<content:encoded><![CDATA[<!--?xml version="1.0" encoding="UTF-8" ?-->

<title>2020-05-04-weekly.html</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<h1>Weekly Bits &amp; Pieces 01/2020 (27.4. - 3.5.)</h1>
<em>This is the very first weekly summary published on my blog.
It reviews interesting stuff I did and found in the past week</em>.

<!-- markdown-toc start
       THIS HAS BEEN MANUALLY GENERATED!
       It doesn't work in Wordpress if you just use markdown style table of contents
       -->

<strong>Table of Contents</strong>
<ul>
 	<li><a href="#clojure">Clojure</a></li>
 	<li><a href="#learning">Learning</a>
<ul>
 	<li><a href="#rapid-learner">Rapid Learner</a></li>
</ul>
</li>
 	<li><a href="#reading">Reading</a></li>
 	<li><a href="#writing">Writing</a></li>
 	<li><a href="#personal-hobbies">Personal (Hobbies)</a></li>
 	<li><a href="#projects-update">Projects Update</a>
<ul>
 	<li><a href="#python-for-data-science">Python for Data Science</a></li>
 	<li><a href="#sicp">SICP</a></li>
 	<li><a href="#computer-systems">Computer Systems</a></li>
</ul>
</li>
 	<li><a href="#work-codescene">Work (CodeScene)</a>
<ul>
 	<li><a href="#codescene-40">CodeScene 4.0</a></li>
 	<li><a href="#jvm-crash-and-slow-analyses">JVM crash and slow analyses</a>
<ul>
 	<li><a href="#windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</a></li>
 	<li><a href="#windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</a></li>
 	<li><a href="#azure-containers---really-slow-io">Azure Containers - (really) slow IO</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- markdown-toc end -->
<div id="clojure"></div>
<h2>Clojure</h2>
I found two interesting pieces on Clojurians slack:
<ul>
 	<li>hiredman's <code>for</code> example ("swiss army knife") showing how to navigate nested data (even using a recursive function)
```
(for [maybe-x (tree-seq map? :content xml)
:when (= (:tag maybe-x) :x)
maybe-y (:content maybe-x)
:when (= (:tag maybe-y) :y)
,,,
]
whatever)</li>
</ul>
;; you can even do recursive queries with it by just wrapping it in a recursive function
(fn f [whatever] (for [x whatever i (f x)] i))
```
<blockquote>Tools like Clojure and Datomic are designed to let a small team get higher leverage and do more with less, both in initial development AND over time as requirements and software changes (caring about this latter bit is imo something Rich pays way more attention to than most), which lets you stay small and avoid taking the efficiency hit in scaling longer than other tools.</blockquote>
I was also surprised by a big performance difference betwee NumPy's array operations
vs Clojure - see <a href="#python-for-data-science">Python for Data Science</a> for more details
<div id="learning"></div>
<h2>Learning</h2>
<div id="rapid-learner"></div>
<h3>Rapid Learner</h3>
I've been very curious about general learning strategies for a long time.
A few years ago, I purchased the <a href="https://www.scotthyoung.com/courses/course/rapid-learner/">Rapid Learner course by Scott Young</a>.
I've never managed to finish it although I adopted a few ideas from the course.
A couple of weeks ago, I decided to restart the course (which now has a lot of new content marketed as "Rapid Learner 2.0").

The ideas of <strong>practice</strong> and <strong>directness</strong> are the core concepts in the course
and it's focus is on practical projects. Thus I'm trying to apply the ideas while going through
the <a href="#python-for-data-science">Python for Data Science</a> project.
<div id="reading"></div>
<h2>Reading</h2>
I always liked reading - it was my passion since grammar school.
Today I read mostly non-fiction books with heavy focus on programming-related topics.

I finished a wonderful practical book about networking called
<a href="https://www.amazon.com/Networking-Systems-Administrators-Mastery-Book-ebook/dp/B00STLTH74">Networking for System Administrators</a>.
I'll post more details on <a href="https://curiousprogrammer.net/book-summaries/">Book summaries</a> soon.

Recently, I've enjoyed reading <a href="https://basecamp.com/shapeup">Shape Up</a> by Ryan Singer from Basecamp
and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548">On Writing Well</a>
by William Zinsser.
Both are great books and I'll tell you more about them soon.

Finally, you can check <a href="https://www.goodreads.com/user/show/61742630-juraj-martinka">my goodreads profile</a>
to find more books I've read or plan to read.
<div id="writing"></div>
<h2>Writing</h2>
Writing is a great exercise for a programmer - it forces you to clear your thoughts
and it's similar, in many aspects, to coding.

It's been my hope that I can learn and improve this skill ever since I started the
<a href="https://curiousprogrammer.net/about/">curiousprogrammer.net blog</a>.
I've been dormant for a while but now, armed with a few tips from <a href="#reading">On Writting Well</a>,
I'm going to post new content more regularly.
<a href="https://curiousprogrammer.net/weekly-bits-pieces/">Weekly Bits &amp; Pieces</a> are the most recent
addition.
<div id="personal-hobbies"></div>
<h2>Personal (Hobbies)</h2>
After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)
in Moravian Karst, Sloup (near Brno).
It was fun despite a quite specific type of climbing (<em>very</em> polished) :).
<div id="projects-update"></div>
<h2>Projects Update</h2>
<div id="python-for-data-science"></div>
<h3>Python for Data Science</h3>
I've decided to learn some Data Science using Python.
I'm loosely following the curriculum outlined in
<a href="https://www.kdnuggets.com/2019/06/python-data-science-right-way.html">How to Learn Python for Data Science the Right Way</a>.
Python is a new language for me (excluding an old short-term experience),
so the <a href="https://www.oreilly.com/library/view/python-for-data/9781491957653">Python for Data Analysis book</a>
seems to be a great fit.

Last week I finished Chapter 4 about <a href="https://numpy.org/"><strong>NumPy</strong></a>:
<ul>
 	<li>It's a common low-level library for fast array computation - implemented in C and using
"vectorized" functions operating on whole arrays instead of element-wise (like pure python)</li>
 	<li>I learned about <em>Slicing</em>, <em>Boolean indexing</em>, <em>Multi-dimensional arrays</em>, and <em>Random walks</em>
among other things.</li>
 	<li>I was amazed by the performance difference between Python (2-3 ms) and Clojure (13-14 ms)
when multiplying an array of 1,000,000 elements by 2:</li>
</ul>
```
;;; Python =&gt; 22.8 ms for 10 iterations of 1,000,000 elements =&gt; 2-3 ms for a single iteration
import numpy as np

my<em>arr = np.arange(1000000)
my</em>list = list(range(1000000))

%time for _ in range(10): my<em>arr2 = my</em>arr * 2
CPU times: user 14.5 ms, sys: 8.33 ms, total: 22.8 ms
Wall time: 22.8 ms

;;; Clojure - vectors &amp; arrays =&gt; ~13 ms at best using plain arrays
(def my-array (int-array (range 1000000)))
(time
(dotimes [i 10]
(amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx)))))
"Elapsed time: 133.522233 msecs"

;; use also criterium for more objective measurement
(require '[criterium.core :as crit])
(crit/quick-bench (amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx))))
;; Evaluation count : 48 in 6 samples of 8 calls.
;; Execution time mean : 14.022060 ms
;; Execution time std-deviation : 476.098590 µs
;; Execution time lower quantile : 13.728450 ms ( 2.5%)
;; Execution time upper quantile : 14.807910 ms (97.5%)
;; Overhead used : 8.025814 ns
```
<ul>
 	<li><em>Random Walk</em> example in section 4.7 was pretty interesting - I don't think I ever heard
about <em>first crossing time</em> value:
<ul>
 	<li><img src="2020-05-04-ds-random-walk-python.png" alt="Random Walk using plain python" title=""></li>
 	<li><img src="2020-05-04-ds-random-walk-numpy.png" alt="Random Walk using NumPy" title=""></li>
</ul>
</li>
</ul>
<div id="sicp"></div>
<h3>SICP</h3>
I've been reading <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a>
for a really long time.
It's a fantastic and challenging book.
It takes me a lot of time to do the exercises but they are definitly worth it.
I'll keep crawling through the book at my toirtose pace :)

Last week I finished the <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.4">Huffman Encoding</a>
section - apart from an exercise on how to represent trees
I learned about <em>prefix codes</em> and <em>variable length encoding</em>.

You will find all my source code from the book here: <a href="https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp">https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp</a>
<div id="computer-systems"></div>
<h3>Computer Systems</h3>
<a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-Global-ebook/dp/B07V71PHR7/ref=pd_sbs_14_1/130-8492999-1421206?_encoding=UTF8&amp;pd_rd_i=B07V71PHR7&amp;pd_rd_r=ed8e11fb-e5ef-468e-8a46-b165f8f3d182&amp;pd_rd_w=UG6HR&amp;pd_rd_wg=oNLvC&amp;pf_rd_p=d13bb895-21d3-4e96-94a7-553aaae51224&amp;pf_rd_r=9WZHWXSX0QYER6ZFQXZ6&amp;psc=1&amp;refRID=9WZHWXSX0QYER6ZFQXZ6">Computer Systems: A Programmer's Perspective</a>
is another great book - this time about lower-level programming, operating systems and machine/assembly language.

I started the chapter 3 <em>Machine-Level Representation of Programs</em> and found it refreshing
after the chapter 2 about machine representation of numbers (which is math-heavy and became boring at some point)

I enjoyed a "disassembling" exercise with <code>gcc -Og</code> and <code>objdump -d</code> (section 3.2.2)
```
<h1>diassemble object code</h1>
gcc -Og -c mstore.c
objdump -d mstore.o
<h1>diassemble executable (object code + linking)</h1>
gcc -Og -o prog  main.c mstore.c
objdump -d prog
```

I've also found a striking connection to the Huffman Encoding section in SICP - x86 assembly
is really a <em>prefix code</em>!
- Diassembled object code: <code>objdump -d mstore.o</code>
<img src="2020-05-04-cs-objdump-object-code.png" alt="Disassemble object code" title="">
- Disassembled executable: <code>objdump -d prog</code>
<img src="2020-05-04-cs-objdump-executable.png" alt="Disassemble object code" title="">

You can find my book code examples here: <a href="https://github.com/jumarko/computer-systems">https://github.com/jumarko/computer-systems</a>
<div id="work-codescene"></div>
<h2>Work (CodeScene)</h2>
I joined company called Empear back in 2017 to work on
<a href="https://empear.com/how-it-works/">CodeScene - a unique behavioral code analysis tool</a>.
I've been really grateful for that - the team is great, I'm learning a lot every day
and I can use Clojure in my daily work.
<div id="codescene-40"></div>
<h3>CodeScene 4.0</h3>
The last week was special because we released a new major version of our enterprise product:
<a href="https://empear.com/blog/codescene-release-4_0/">CodeScene 4.0</a>.
I haven't worked on this release - I'm mostly focusing on <a href="https://codescene.io">codescene.io</a> -
but my colleagues did a great work in this area.
The new version comes with a completely new more intuitive UI with greater focus on features auto-discovery.
We're looking forward to hearing customers' feedback.

For <a href="https://codescene.io">codescene.io</a>, the "cloud" version of CodeScene,
we're adding Bitbucket support (today you can only analyze GitHub repositories).
It will be an important step for reaching a wider audience.

If you're interested, you can analyze your public repositories for free
or <a href="https://codescene.io/plans">get a paid plan</a> if you want to try it on private projects.
Moreover, if you're a student or a teacher you can get a paid plan for free:
<ul>
 	<li><a href="https://codescene.io/github-students">https://codescene.io/github-students</a></li>
 	<li><a href="https://codescene.io/github-teachers">https://codescene.io/github-teachers</a></li>
</ul>
<div id="jvm-crash-and-slow-analyses"></div>
<h3>JVM crash and slow analyses</h3>
While onboarding a few customers we faced issues with slow analyses.
CodeScene is usually pretty fast (running Linux analysis in ~40 minutes on a Macbook Pro laptop with a solid SSD disk)
but two customers were trying to analyze their big repositories and their analyses were running
for more than one day.

There were three distinct cases:
<ol>
 	<li>One customer running CodeScene in docker inside a Linux virtual machine hosted on Windows Server 2019</li>
 	<li>The same customer later switching to Tomcat deployment directly on the Windows Server host</li>
 	<li>Another customer using <a href="https://hub.docker.com/r/empear/ubuntu-onprem/">our docker image</a>
and deploying CodeScene with Azure Containers</li>
</ol>
<div id="windows-server---linux-vm-and-jvm-bug"></div>
<h4>Windows Server - Linux VM and JVM bug</h4>
First, they tried to run CodeScene using our docker image and hit a JVM bug right from the start:
<img src="2020-05-04-codescene-avx-bug.png" alt="SIGILL JVM error" title="">

As my colleague found, this was due to incorrect detection of AVX instruction family support
(vectorized processor instructions) in the JVM.
There's an open issue for that: <a href="https://bugs.openjdk.java.net/browse/JDK-8238596">https://bugs.openjdk.java.net/browse/JDK-8238596</a>.

Once we identified the root cause the workaround was relatively easy - don't use AVX:

<code>
docker run -e JAVA_OPTIONS=-XX:UseAVX=0 empear/ubuntu-onprem:latest
</code>

The AVX instruction support can be verified (on Linux) via <code>lscpu</code> - just check the <code>FLags</code> section
if there's 'avx' or not:
<img src="2020-05-04-codescene-avx-bug-lscpu.png" alt="lscpu - missing AVX flag" title="">

As we later found, the AVX instruction wasn't supported due to "Compatibility Configuration"
on the Windows Server host which allowed the VMs to be easily migrated between physical hosts:
<img src="2020-05-04-codescene-avx-bug-vm-compatibility.png" alt="Windows Server - VM compability configuration" title="">

The customer ended up using Tomcat installed directly on the Host Windows OS,
but it was a really tricky support case anyway.
<div id="windows-server---tomcat-and-small-heap-size"></div>
<h4>Windows Server - Tomcat and small heap size</h4>
The customer decided to switch from Docker to Tomcat deployment but the analysis was still very slow.
We thought it could be a slow IO issue again, because of dealing with another customer's installation
at the same time (see Azure Containers section below).
But It turned out they were using really fast SAN (Storage Area Network) disk storage.

Eventually, we found the root cause: <strong>small <em>default</em> heap</strong> size set by Tomcat:
although the machine had 32 GB of ram, the default Max heap size set by Tomcat Windows installer
was only about ~250 MB.
After raising the max heap size manually to 12 GB the analysis finished within a hour (they have a huge repository):
<img src="2020-05-04-codescene-windows-tomcat-heap-settings.png" alt="Tomcat on Windows - heap settings" title="">
<div id="azure-containers---really-slow-io"></div>
<h4>Azure Containers - (really) slow IO</h4>
Another painful experience with slow shared file storage on Azure.
A customer analyzing a huge repository couldn't get the results even after a few days!
The problem is still being investigated, but we believe the issue is shared file storage used
by Azure Containers (and also Azure App Service).

CodeScene is an IO intensive application and needs a fast disk.
Thus any kind of distributed file system makes it very sad.
For these reasons <a href="https://docs.enterprise.codescene.io/versions/4.0.2/getting-started/deployment-options.html#system-requirements">we don't recommend using Azure Files, AWS EFS et al</a>.
I ran CodeScene via Azure App Service the last year and found it <strong>at least 10x slower</strong> on medium-sized
repositories compared to a deployment on a plain Linux VM.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 05:15:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588957252;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:371;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588957820;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:371;}i:3;a:1:{s:2:"id";i:94;}i:4;a:1:{s:2:"id";i:298;}i:5;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://curiousprogrammer.net/?p=465</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><em>This is the very first weekly summary published on my blog. It reviews interesting stuff I did and found in the past week</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Table of Contents</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="#clojure">Clojure</a></li><li><a href="#learning">Learning</a><ul><li><a href="#rapid-learner">Rapid Learner</a></li></ul></li><li><a href="#reading">Reading</a></li><li><a href="#writing">Writing</a></li><li><a href="#personal-hobbies">Personal (Hobbies)</a></li><li><a href="#projects-update">Projects Update</a><ul><li><a href="#python-for-data-science">Python for Data Science</a></li><li><a href="#sicp">SICP</a></li><li><a href="#computer-systems">Computer Systems</a></li></ul></li><li><a href="#work-codescene">Work (CodeScene)</a><ul><li><a href="#codescene-40">CodeScene 4.0</a></li><li><a href="#jvm-crash-and-slow-analyses">JVM crash and slow analyses</a><ul><li><a href="#windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</a></li><li><a href="#windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</a></li><li><a href="#azure-containers---really-slow-io">Azure Containers - (really) slow IO</a></li></ul></li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 id="clojure">Clojure</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I found two interesting pieces on Clojurians slack:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>hiredman's <code>for</code> example ("swiss army knife") showing how to navigate nested data (even using a recursive function)</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;(for &amp;#91;maybe-x (tree-seq map? :content xml)
      :when (= (:tag maybe-x) :x)
      maybe-y (:content maybe-x)
      :when (= (:tag maybe-y) :y)
      ,,,
      ]
  whatever)

;; you can even do recursive queries with it by just wrapping it in a recursive function 
(fn f &amp;#91;whatever] (for &amp;#91;x whatever i (f x)] i))
&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li>#off-topic discussion about <strong>Clojure and teams productivity</strong> (Alex Miller) - I was astonished<br>when I found <strong>there are only 4 people doing all the development on Clojure, Datomic</strong> et al.</li></ul>
<!-- /wp:list -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>there are only 4 people doing all of the dev on Datomic, Clojure, etc combined so we are a tiny team of very experienced people using high leverage tools. I'm not sure this is directly relevant to most software teams in general (but Clojure projects do probably tend to be more that, and less big teams)</p><p>Mythical man month is really from the perspective of someone working on teams of like 50-100 people, which is a totally different world</p><p>no matter how big your team is, the important thing is to connect what people are doing with business value. as team size gets bigger, you inevitably are going to spend a lot more time communicating what to do and what has been done, which is inherently less efficient. So bigger teams need to put in more active effort to optimize that communication flow.</p><p>Tools like Clojure and Datomic are designed to let a small team get higher leverage and do more with less, both in initial development AND over time as requirements and software changes (caring about this latter bit is imo something Rich pays way more attention to than most), which lets you stay small and avoid taking the efficiency hit in scaling longer than other tools.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>I was also surprised by a big performance difference betwee NumPy's array operations<br>vs Clojure - see <a href="#python-for-data-science">Python for Data Science</a> for more details</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="learning">Learning</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 id="rapid-learner">Rapid Learner</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I've been very curious about general learning strategies for a long time.<br>A few years ago, I purchased the <a href="https://www.scotthyoung.com/courses/course/rapid-learner/">Rapid Learner course by Scott Young</a>.<br>I've never managed to finish it although I adopted a few ideas from the course.<br>A couple of weeks ago, I decided to restart the course (which now has a lot of new content marketed as "Rapid Learner 2.0").</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The ideas of <strong>practice</strong> and <strong>directness</strong> are the core concepts in the course<br>and it's focus is on practical projects. Thus I'm trying to apply the ideas while going through<br>the <a href="#python-for-data-science">Python for Data Science</a> project.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="reading">Reading</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I always liked reading - it was my passion since grammar school.<br>Today I read mostly non-fiction books with heavy focus on programming-related topics.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I finished a wonderful practical book about networking called<br><a href="https://www.amazon.com/Networking-Systems-Administrators-Mastery-Book-ebook/dp/B00STLTH74">Networking for System Administrators</a>.<br>I'll post more details on <a href="https://curiousprogrammer.net/book-summaries/">Book summaries</a> soon.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recently, I've enjoyed reading <a href="https://basecamp.com/shapeup">Shape Up</a> by Ryan Singer from Basecamp<br>and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548">On Writing Well</a><br>by William Zinsser.<br>Both are great books and I'll tell you more about them soon.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, you can check <a href="https://www.goodreads.com/user/show/61742630-juraj-martinka">my goodreads profile</a><br>to find more books I've read or plan to read.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="writing">Writing</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Writing is a great exercise for a programmer - it forces you to clear your thoughts<br>and it's similar, in many aspects, to coding.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's been my hope that I can learn and improve this skill ever since I started the<br><a href="https://curiousprogrammer.net/about/">curiousprogrammer.net blog</a>.<br>I've been dormant for a while but now, armed with a few tips from <a href="#reading">On Writting Well</a>,<br>I'm going to post new content more regularly.<br><a href="https://curiousprogrammer.net/weekly-bits-pieces/">Weekly Bits &amp; Pieces</a> are the most recent<br>addition.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="personal-hobbies">Personal (Hobbies)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)<br>in Moravian Karst, Sloup (near Brno).<br>It was fun despite a quite specific type of climbing (<em>very</em> polished) :).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="projects-update">Projects Update</h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3 id="python-for-data-science">Python for Data Science</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I've decided to learn some Data Science using Python.<br>I'm loosely following the curriculum outlined in<br><a href="https://www.kdnuggets.com/2019/06/python-data-science-right-way.html">How to Learn Python for Data Science the Right Way</a>.<br>Python is a new language for me (excluding an old short-term experience),<br>so the <a href="https://www.oreilly.com/library/view/python-for-data/9781491957653">Python for Data Analysis book</a><br>seems to be a great fit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Last week I finished Chapter 4 about <a href="https://numpy.org/"><strong>NumPy</strong></a>:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>It's a common low-level library for fast array computation - implemented in C and using<br>"vectorized" functions operating on whole arrays instead of element-wise (like pure python)</li><li>I learned about <em>Slicing</em>, <em>Boolean indexing</em>, <em>Multi-dimensional arrays</em>, and <em>Random walks</em><br>among other things.</li><li>I was amazed by the performance difference between Python (2-3 ms) and Clojure (13-14 ms)<br>when multiplying an array of 1,000,000 elements by 2:</li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;;;; Python =&amp;amp;gt; 22.8 ms for 10 iterations of 1,000,000 elements =&amp;amp;gt; 2-3 ms for a single iteration
import numpy as np

my_arr = np.arange(1000000)
my_list = list(range(1000000))

%time for _ in range(10): my_arr2 = my_arr * 2
CPU times: user 14.5 ms, sys: 8.33 ms, total: 22.8 ms
Wall time: 22.8 ms

;;; Clojure - vectors &amp;amp;amp; arrays =&amp;amp;gt; ~13 ms at best using plain arrays
(def my-array (int-array (range 1000000)))
(time
 (dotimes &amp;#91;i 10]
   (amap ^ints my-array
         idx
         ret
         (* (int 2) (aget ^ints my-array idx)))))
&quot;Elapsed time: 133.522233 msecs&quot;

;; use also criterium for more objective measurement
(require &#039;&amp;#91;criterium.core :as crit])
(crit/quick-bench (amap ^ints my-array
                        idx
                        ret
                        (* (int 2) (aget ^ints my-array idx))))
;; Evaluation count : 48 in 6 samples of 8 calls.
;; Execution time mean : 14.022060 ms
;; Execution time std-deviation : 476.098590 µs
;; Execution time lower quantile : 13.728450 ms ( 2.5%)
;; Execution time upper quantile : 14.807910 ms (97.5%)
;; Overhead used : 8.025814 ns
&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><li><em>Random Walk</em> example in section 4.7 was pretty interesting - I don't think I ever heard<br>about <em>first crossing time</em> value:</li><li><img src="2020-05-04-ds-random-walk-python.png" alt="Random Walk using plain python"></li><li><img src="2020-05-04-ds-random-walk-numpy.png" alt="Random Walk using NumPy"></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="sicp">SICP</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I've been reading <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a><br>for a really long time.<br>It's a fantastic and challenging book.<br>It takes me a lot of time to do the exercises but they are definitly worth it.<br>I'll keep crawling through the book at my toirtose pace :)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Last week I finished the <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.4">Huffman Encoding</a><br>section - apart from an exercise on how to represent trees<br>I learned about <em>prefix codes</em> and <em>variable length encoding</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will find all my source code from the book here: <a href="https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp">https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="computer-systems">Computer Systems</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-Global-ebook/dp/B07V71PHR7/ref=pd_sbs_14_1/130-8492999-1421206?_encoding=UTF8&amp;pd_rd_i=B07V71PHR7&amp;pd_rd_r=ed8e11fb-e5ef-468e-8a46-b165f8f3d182&amp;pd_rd_w=UG6HR&amp;pd_rd_wg=oNLvC&amp;pf_rd_p=d13bb895-21d3-4e96-94a7-553aaae51224&amp;pf_rd_r=9WZHWXSX0QYER6ZFQXZ6&amp;psc=1&amp;refRID=9WZHWXSX0QYER6ZFQXZ6">Computer Systems: A Programmer's Perspective</a><br>is another great book - this time about lower-level programming, operating systems and machine/assembly language.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I started the chapter 3 <em>Machine-Level Representation of Programs</em> and found it refreshing<br>after the chapter 2 about machine representation of numbers (which is math-heavy and became boring at some point)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I enjoyed a "disassembling" exercise with <code>gcc -Og</code> and <code>objdump -d</code> (section 3.2.2)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;# diassemble object code
gcc -Og -c mstore.c
objdump -d mstore.o

# diassemble executable (object code + linking)
gcc -Og -o prog  main.c mstore.c
objdump -d prog
&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I've also found a striking connection to the Huffman Encoding section in SICP - x86 assembly<br>is really a <em>prefix code</em>!</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Diassembled object code: <code>objdump -d mstore.o</code><br><img src="2020-05-04-cs-objdump-object-code.png" alt="Disassemble object code"></li><li>Disassembled executable: <code>objdump -d prog</code><br><img src="2020-05-04-cs-objdump-executable.png" alt="Disassemble object code"></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can find my book code examples here: <a href="https://github.com/jumarko/computer-systems">https://github.com/jumarko/computer-systems</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="work-codescene">Work (CodeScene)</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I joined company called Empear back in 2017 to work on<br><a href="https://empear.com/how-it-works/">CodeScene - a unique behavioral code analysis tool</a>.<br>I've been really grateful for that - the team is great, I'm learning a lot every day<br>and I can use Clojure in my daily work.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="codescene-40">CodeScene 4.0</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The last week was special because we released a new major version of our enterprise product:<br><a href="https://empear.com/blog/codescene-release-4_0/">CodeScene 4.0</a>.<br>I haven't worked on this release - I'm mostly focusing on <a href="https://codescene.io">codescene.io</a> -<br>but my colleagues did a great work in this area.<br>The new version comes with a completely new more intuitive UI with greater focus on features auto-discovery.<br>We're looking forward to hearing customers' feedback.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For <a href="https://codescene.io">codescene.io</a>, the "cloud" version of CodeScene,<br>we're adding Bitbucket support (today you can only analyze GitHub repositories).<br>It will be an important step for reaching a wider audience.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you're interested, you can analyze your public repositories for free<br>or <a href="https://codescene.io/plans">get a paid plan</a> if you want to try it on private projects.<br>Moreover, if you're a student or a teacher you can get a paid plan for free:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://codescene.io/github-students">https://codescene.io/github-students</a></li><li><a href="https://codescene.io/github-teachers">https://codescene.io/github-teachers</a></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 id="jvm-crash-and-slow-analyses">JVM crash and slow analyses</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While onboarding a few customers we faced issues with slow analyses.<br>CodeScene is usually pretty fast (running Linux analysis in ~40 minutes on a Macbook Pro laptop with a solid SSD disk)<br>but two customers were trying to analyze their big repositories and their analyses were running<br>for more than one day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There were three distinct cases:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>One customer running CodeScene in docker inside a Linux virtual machine hosted on Windows Server 2019</li><li>The same customer later switching to Tomcat deployment directly on the Windows Server host</li><li>Another customer using <a href="https://hub.docker.com/r/empear/ubuntu-onprem/">our docker image</a><br>and deploying CodeScene with Azure Containers</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4 id="windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, they tried to run CodeScene using our docker image and hit a JVM bug right from the start:<br><img src="2020-05-04-codescene-avx-bug.png" alt="SIGILL JVM error"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As my colleague found, this was due to incorrect detection of AVX instruction family support<br>(vectorized processor instructions) in the JVM.<br>There's an open issue for that: <a href="https://bugs.openjdk.java.net/browse/JDK-8238596">https://bugs.openjdk.java.net/browse/JDK-8238596</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once we identified the root cause the workaround was relatively easy - don't use AVX:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;docker run -e JAVA_OPTIONS=-XX:UseAVX=0 empear/ubuntu-onprem:latest
&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The AVX instruction support can be verified (on Linux) via <code>lscpu</code> - just check the <code>FLags</code> section<br>if there's 'avx' or not:<br><img src="2020-05-04-codescene-avx-bug-lscpu.png" alt="lscpu - missing AVX flag"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As we later found, the AVX instruction wasn't supported due to "Compatibility Configuration"<br>on the Windows Server host which allowed the VMs to be easily migrated between physical hosts:<br><img src="2020-05-04-codescene-avx-bug-vm-compatibility.png" alt="Windows Server - VM compability configuration"></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The customer ended up using Tomcat installed directly on the Host Windows OS,<br>but it was a really tricky support case anyway.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The customer decided to switch from Docker to Tomcat deployment but the analysis was still very slow.<br>We thought it could be a slow IO issue again, because of dealing with another customer's installation<br>at the same time (see Azure Containers section below).<br>But It turned out they were using really fast SAN (Storage Area Network) disk storage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Eventually, we found the root cause: <strong>small <em>default</em> heap</strong> size set by Tomcat:<br>although the machine had 32 GB of ram, the default Max heap size set by Tomcat Windows installer<br>was only about ~250 MB.<br>After raising the max heap size manually to 12 GB the analysis finished within a hour (they have a huge repository):<br><img src="2020-05-04-codescene-windows-tomcat-heap-settings.png" alt="Tomcat on Windows - heap settings"></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4 id="azure-containers---really-slow-io">Azure Containers - (really) slow IO</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another painful experience with slow shared file storage on Azure.<br>A customer analyzing a huge repository couldn't get the results even after a few days!<br>The problem is still being investigated, but we believe the issue is shared file storage used<br>by Azure Containers (and also Azure App Service).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CodeScene is an IO intensive application and needs a fast disk.<br>Thus any kind of distributed file system makes it very sad.<br>For these reasons <a href="https://docs.enterprise.codescene.io/versions/4.0.2/getting-started/deployment-options.html#system-requirements">we don't recommend using Azure Files, AWS EFS et al</a>.<br>I ran CodeScene via Azure App Service the last year and found it <strong>at least 10x slower</strong> on medium-sized<br>repositories compared to a deployment on a plain Linux VM.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code">&lt;code&gt;    &amp;lt;/div&gt;
    &amp;lt;style type=&#039;text/css&#039;&gt;body {&lt;/code&gt;</pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>font: 400 16px/1.5 "Helvetica Neue", Helvetica, Arial, sans-serif;<br>color: #111;<br>background-color: #fdfdfd;<br>-webkit-text-size-adjust: 100%;<br>-webkit-font-feature-settings: "kern" 1;<br>-moz-font-feature-settings: "kern" 1;<br>-o-font-feature-settings: "kern" 1;<br>font-feature-settings: "kern" 1;<br>font-kerning: normal;<br>padding: 30px;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>@media only screen and (max-width: 600px) {<br>body {<br>padding: 5px;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>body &gt; #content {<br>padding: 0px 20px 20px 20px !important;<br>}<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>body &gt; #content {<br>margin: 0px;<br>max-width: 900px;<br>border: 1px solid #e1e4e8;<br>padding: 10px 40px;<br>padding-bottom: 20px;<br>border-radius: 2px;<br>margin-left: auto;<br>margin-right: auto;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>hr {<br>color: #bbb;<br>background-color: #bbb;<br>height: 1px;<br>flex: 0 1 auto;<br>margin: 1em 0;<br>padding: 0;<br>border: none;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/**</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Links<br>*/<br>a {<br>color: #0366d6;<br>text-decoration: none; }<br>a:visited {<br>color: #0366d6; }<br>a:hover {<br>color: #0366d6;<br>text-decoration: underline; }</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>pre {<br>background-color: #f6f8fa;<br>border-radius: 3px;<br>font-size: 85%;<br>line-height: 1.45;<br>overflow: auto;<br>padding: 16px;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/**</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Code blocks<br>*/</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>code {<br>background-color: rgba(27,31,35,.05);<br>border-radius: 3px;<br>font-size: 85%;<br>margin: 0;<br>word-wrap: break-word;<br>padding: .2em .4em;<br>font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,Courier,monospace;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>pre &gt; code {<br>background-color: transparent;<br>border: 0;<br>display: inline;<br>line-height: inherit;<br>margin: 0;<br>overflow: visible;<br>padding: 0;<br>word-wrap: normal;<br>font-size: 100%;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/**</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Blockquotes<br>*/<br>blockquote {<br>margin-left: 30px;<br>margin-top: 0px;<br>margin-bottom: 16px;<br>border-left-width: 3px;<br>padding: 0 1em;<br>color: #828282;<br>border-left: 4px solid #e8e8e8;<br>padding-left: 15px;<br>font-size: 18px;<br>letter-spacing: -1px;<br>font-style: italic;<br>}<br>blockquote * {<br>font-style: normal !important;<br>letter-spacing: 0;<br>color: #6a737d !important;<br>}</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>/**</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Tables<br>*/<br>table {<br>border-spacing: 2px;<br>display: block;<br>font-size: 14px;<br>overflow: auto;<br>width: 100%;<br>margin-bottom: 16px;<br>border-spacing: 0;<br>border-collapse: collapse;<br>}</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>td {<br>padding: 6px 13px;<br>border: 1px solid #dfe2e5;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>th {<br>font-weight: 600;<br>padding: 6px 13px;<br>border: 1px solid #dfe2e5;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>tr {<br>background-color: #fff;<br>border-top: 1px solid #c6cbd1;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>table tr:nth-child(2n) {<br>background-color: #f6f8fa;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>/**</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Others<br>*/</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>img {<br>max-width: 100%;<br>}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>p {<br>line-height: 24px;<br>font-weight: 400;<br>font-size: 16px;<br>color: #24292e; }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ul {<br>margin-top: 0; }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>li {<br>color: #24292e;<br>font-size: 16px;<br>font-weight: 400;<br>line-height: 1.5; }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>li + li {<br>margin-top: 0.25em; }</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>{<br>font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";<br>color: #24292e; }</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>a:visited {<br>color: #0366d6; }</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>h1, h2, h3 {<br>border-bottom: 1px solid #eaecef;<br>color: #111;<br>/* Darker */ }<br><br><br>File '/Users/jumar/workspace/curious-programmer/blog/posts/weekly-bits-and-pieces/README.html' already exists. Aborted!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 05:27:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588958276;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:408;}i:2;a:1:{s:2:"id";i:320;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588958334;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:408;}i:2;a:1:{s:2:"id";i:320;}i:3;a:1:{s:2:"id";i:371;}i:4;a:1:{s:2:"id";i:385;}i:5;a:1:{s:2:"id";i:190;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Defn Podcast Episode 30 – Bruce Hauman</title>
		<link>https://curiousprogrammer.net/2018/02/15/defn-podcast-episode-30-bruce-hauman/</link>
		<pubDate>Thu, 15 Feb 2018 09:30:15 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This is a summary of the defn podcast interview with Bruce Hauman.</em>

Once again, it's been a <a href="https://defn.audio/episodes/2018/02/10/bruce-hauman.html">great and long episode</a> where Ray and Vijay talked to <a href="https://github.com/bhauman">Bruce Hauman</a>. You'll find my notes below.

These are my notes to help me quickly review the key information. I might have misinterpreted something. I encourage you to listen to the <a href="https://defn.audio/episodes/2018/02/10/bruce-hauman.html">full episode</a>.

&nbsp;

<h2><strong>Summary</strong></h2>

<ul>
    <li>Name <em>Hauman </em>has German origin.</li>
    <li><strong>How he got to Clojure and Figwheel</strong>
<ul>
    <li>He likes languages, parsing et al.</li>
    <li>He has always had a passion for LISP - he was LISPer for a long time (since college).</li>
    <li>In the real world, you work with Ruby, PHP, Java, etc.
<ul>
    <li>As a result, he got sick and started to play with ClojureScript - there were quite a few rough edges and thus he created <a href="https://github.com/bhauman/lein-figwheel">Figwheel</a>.</li>
</ul>
</li>
    <li>Now Bruce lives in a typical apartment in Montreal.
<ul>
    <li>See his talk <a href="https://youtu.be/j-kj2qwJa_E?t=557">Developing ClojureScript With Figwheel</a> with the picture of his former "plastic bubble" house :).</li>
</ul>
</li>
    <li>ClojureScript doesn't "encapsulate" functions and modules.
<ul>
    <li>You can just load the file, and all your definitions are reloaded =&gt; very easy.</li>
    <li>If you want to do stateful stuff like <a href="https://threejs.org/">https://threejs.org/</a> it becomes problematic =&gt; you can turn auto-loading on and off with Figwheel.</li>
</ul>
</li>
    <li>Using Figwheel with Node.js is different.
<ul>
    <li>You have no display and feedback is less visible.</li>
</ul>
</li>
</ul>
</li>
    <li>Joke: <em>he's not a real programmer, he just build cool demos that make people think.</em>
<ul>
    <li>Figwheel is quite complicated real application written in Clojure.</li>
</ul>
</li>
    <li>He recently built some application with Clojure and Ethereum - that was a really cool experience.</li>
    <li><strong>Clojure as a strange maximum</strong>
<ul>
    <li>He doesn't see himself gravitating to other languages (although he loves languages a lot).</li>
    <li>In terms of getting things done, he sees little benefits in using other languages.</li>
</ul>
</li>
    <li><strong>Static types</strong>
<ul>
    <li>The static guys are overblowing guarantee they're getting from types - in real-world complex systems with lots of state (think "Microservices") the benefits are diminished.</li>
    <li>In Clojure we are very productive - look at <a href="https://github.com/bhauman/advent-of-clojure">Advent of Code</a> and compare Clojure solutions to other languages.</li>
    <li>Ray: certain types of functions would benefit from types but exploring external resources and APIs/data is much easier without types ceremony.</li>
    <li>Racket, gradual typing, etc. (Vijay asked Bruce what he thinks about that and what's his experience)
<ul>
    <li>Paying upfront cost with types doesn't make much sense to him because so much programming is about exploration - <span style="color: #ff0000;">Bruce prefers to have the flexibility to explore.</span></li>
</ul>
</li>
</ul>
</li>
    <li><strong>Building new Clojure/ClojureScript app</strong> - what are his libraries/tools of choice?
<ul>
    <li>Pick as few libraries as possible.</li>
    <li>He (always) uses React for frontend applications.</li>
    <li>He prefers Om style - passing state explicitly to downstream components instead of referencing global state.
<ul>
    <li>But he didn't do much ClojureScript development in the last year or so (e.g. re-frame got a lot better)</li>
</ul>
</li>
    <li>In lots of applications, you don't need to make decisions about <em>REST </em>and<em> GraphQL</em> until you reach a certain size.
<ul>
    <li>just pushing JSON data through APIs</li>
    <li>If you know exactly what you're building and how big it's gonna be then it might be useful to pay that cost upfront.</li>
</ul>
</li>
</ul>
</li>
    <li><a href="https://github.com/bhauman/strictly-specking"><strong><em>Strictly-specking</em> library</strong></a>
<ul>
    <li>It was written mostly for the purpose of checking Figwheel/ClojureScript configuration options of which there are many and they're easy to get wrong.</li>
    <li>He started to write it in core.logic, then spec came out and he re-wrote it using spec.
<ul>
    <li>Back then, spec was missing some features (it wasn't so easy to get an exact pointer to the problem inside the input data structure).</li>
    <li>After that, there were some improvements to spec which made his job easier.</li>
</ul>
</li>
</ul>
</li>
    <li><strong>Spec error messages</strong>
<ul>
    <li>Concerning Clojure.core we're talking about macros and special forms.
<ul>
    <li>You get very detailed error messages - however, programming is a very incremental activity, and you just need a very brief and clear error message.</li>
    <li>BUT, you can write a library that will match certain spec errors for core macros and output precise and clear user-facing error messages.</li>
</ul>
</li>
    <li>When saying "better error messages", it helps to be a lot more precise what does that mean - e.g. "We need a concise error message along with a pointer to the start and the end of the relevant code."
<ul>
    <li>Unfortunately, that pointer is contextual - it depends on the file in which you are, etc.</li>
</ul>
</li>
    <li>Bruce really wants better error messages to bring more people to Clojure - that's the reason why he is writing <em><a href="https://github.com/bhauman/rebel-readline">rebel-readline</a>.</em></li>
</ul>
</li>
    <li><a href="https://github.com/bhauman/devcards"><em><strong>Devcards</strong></em></a>
<ul>
    <li>All Bruce's projects are focused on bringing Clojure interactivity to people.</li>
    <li>When writing browser applications you always run in a broader context of the browser.</li>
    <li>Devcards' idea is that it should be easy to create independent pieces of an application and have them together.</li>
</ul>
</li>
    <li><strong>Future</strong> (ideas about Fighweel and more)
<ul>
    <li>Spec errors descriptions</li>
    <li>Keeping statistics and visual history of errors and messages.</li>
</ul>
</li>
    <li><a href="https://github.com/bhauman/rebel-readline"><em><strong>rebel-readline</strong></em></a>
<ul>
    <li><em>Story</em>
<ul>
    <li>He does <a href="https://github.com/bhauman/advent-of-clojure">Advent of Code</a> every year.</li>
    <li>Working on programming projects let you reflect on our programming experience.</li>
    <li><a href="http://www.zachtronics.com/tis-100/">TIS 100 - assembly language programming  game</a> - the easiest way to learn assembly programming again.</li>
    <li>REPL is kind of a game - idea of building challenges in REPL; he never got too far with this.</li>
</ul>
</li>
    <li>Experienced Clojure programmers don't need a great REPL experience, but beginners need it.
<ul>
    <li>When you're new to Clojure it's impossible to choose an editor - everybody says: "Cursive, Emacs, Atom, ..."</li>
    <li>Ray: he struggled for one year or so to grasp the REPL - it's really a superpower of Clojure and now he uses it all the time.</li>
</ul>
</li>
    <li><a href="https://github.com/jline/jline3">JLine</a> provides a lot of functionality and makes things a lot easier.</li>
    <li><em>rebel-</em>readline is practically an editor, and you can put many features there, but it's already great.</li>
    <li>IPython-like notebooks
<ul>
    <li>Not being in a file feels very constraining.</li>
    <li>You can use Devcards as a graphical REPL in a browser, and you have your code in a file!</li>
</ul>
</li>
    <li>Reddit discussion: <a class="title may-blank loggedin outbound" tabindex="1" href="https://github.com/bhauman/rebel-readline/blob/master/README.md" rel="" data-event-action="title" data-href-url="https://github.com/bhauman/rebel-readline/blob/master/README.md" data-outbound-url="https://out.reddit.com/t3_7woxh9?url=https%3A%2F%2Fgithub.com%2Fbhauman%2Frebel-readline%2Fblob%2Fmaster%2FREADME.md&amp;token=AQAAE1KFWqP98a45m-HYgoPfV3Sj1EXplIEl6UGeBRCH-ktMnLa1&amp;app_name=reddit.com" data-outbound-expiration="1518686739000">Pre-release of rebel-readline by Bruce Hauman! :D</a>
<ul>
    <li><em>But the greatest benefit for me is that we can finally show newcomers an almost proper Clojure workflow without sending them to setup Emacs/vim/Cursive first.</em></li>
</ul>
</li>
    <li><a href="https://www.youtube.com/watch?v=kzbnk-zmSN0"><strong>crepl </strong>project idea</a>
<ul>
    <li>collaborative REPL</li>
    <li>Nice idea but they eventually ran out of money.</li>
    <li>Tmux can be used for shared typing into REPL but you can't see who's typing what and when he typed.</li>
    <li>Joke: <em>with Clojure we don't need multiple people; we're so productive that just one man is enough.</em></li>
</ul>
</li>
    <li>Bruce would like to have repl<em>-</em>readline ready for getting people's feedback in a couple of weeks.</li>
</ul>
</li>
    <li><strong>JavaScript experience</strong>
<ul>
    <li>Bruce enjoyed JavaScript back in time because of its dynamic nature.</li>
    <li>If he had a choice, he'd choose CoffeeScript.</li>
</ul>
</li>
    <li><a href="https://clojuriststogether.org/"><em><strong>Clojurists Together</strong></em></a><strong> initiative</strong>
<ul>
    <li>Figwheel is one of the sponsored projects.</li>
    <li><span style="color: #ff0000;">It's great; please join in and support Clojure open source projects!</span></li>
</ul>
</li>
</ul>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2018-02-15 09:30:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-15 09:30:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[defn-podcast-episode-30-bruce-hauman]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="clojurescript"><![CDATA[ClojureScript]]></category>
		<category domain="category" nicename="defn-podcast"><![CDATA[Defn Podcast]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588178669;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:298;}i:1;a:1:{s:2:"id";i:190;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day – Episode 7: clj-refactor</title>
		<link>https://curiousprogrammer.net/2018/03/05/clojure-tip-of-the-day-episode-7-clj-refactor/</link>
		<pubDate>Mon, 05 Mar 2018 12:43:34 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[Another episode of <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of the Day screencast</a> is out.

Videon on YouTube: <a href="https://www.youtube.com/watch?v=5PHWV-z_jTw">https://www.youtube.com/watch?v=5PHWV-z_jTw</a>

<a href="https://github.com/curiousprogrammer-net/clojure-tip-of-the-day/blob/master/src/clojure_tip_of_the_day/007_clj_refactor.clj#L6">Source code</a> on GitHub.

This episode will show you how to use following clj<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki">-refactor refactorings</a>:

<ul>
    <li>cljr-add-project-dependency</li>
    <li>cljr-add-require-to-ns</li>
    <li>cljr-extract-function</li>
    <li>cljr-create-fn-from-example</li>
    <li>cljr-introduce-let</li>
    <li>cljr-expand-let</li>
    <li>cljr-move-to-let</li>
    <li>clojure-convert-collection-to-vector</li>
    <li>cljr-thread-last-all</li>
    <li>cljr-unwind</li>
    <li>cljr-unwind-all</li>
</ul>

Make sure to also check a great <a href="https://purelyfunctional.tv/clojure-resource-center/">clj-refactor Reference Sheet by PurelyFunctional</a>.

&nbsp;

PS: Sorry for the broken display at the beginning of the video.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2018-03-05 12:43:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-05 12:43:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-episode-7-clj-refactor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588248900;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:94;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PureBlog: A Simple Blog Implementation in Clojure for PurelyFunctional.tv</title>
		<link>https://curiousprogrammer.net/2018/05/11/pureblog-a-simple-blog-implementation-in-clojure-for-purelyfunctional-tv/</link>
		<pubDate>Fri, 11 May 2018 10:29:07 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=320</guid>
		<description></description>
		<content:encoded><![CDATA[<em>Discussing the first draft of my new hobby app PureBlog implemented for the purpose of getting some practice and feedback from Eric Normand (PurelyFunctional.tv)</em>. <em>It also was my first attempt to use Duct/Integrant micro-frameworks for building a real Clojure app.</em>

<h2>Introduction</h2>

I'm a subscriber of <a href="http://purelyfunctional.tv/">PurelyFunctional.tv</a> and I think it's the best online resource for learning Clojure that is available out there. As part of the membership, Eric Normand (the man behind PurelyFunctional.tv) offers a free 30-min coaching session where you can discuss your Clojure learning strategy - issues, challenges, approaches, etc.

A while ago, during my coaching call, I mentioned that feedback from a real Clojure expert is one of the most important things for learning and that I'd lacked this type of feedback during my Clojure learning journey. To my surprise, Eric immediately offered his help in reviewing my code. What a great opportunity!

So we agreed upon creating a simple side-project - blog implementation in Clojure (Eric has a nice list of <a href="https://purelyfunctional.tv/functional-programming-career-guide/10-side-projects-resume/">10 Weekend projects to spruce up your functional resume</a> on his website).

&nbsp;

<h2>PureBlog Application</h2>

I decided to make it a bit harder and take this as an opportunity to learn a bit about <a href="https://github.com/duct-framework/duct">Duct</a> and <a href="https://github.com/weavejester/integrant">Integrant</a> and use them in a real application (instead of a usual <em>ring + compojure</em> combo). Although it took significantly longer than it could, it was fun and I've learned quite a bit about Duct and Integrant.

&nbsp;

<h2>Code Review Summary</h2>

Eric published his code review as <a href="https://www.youtube.com/watch?v=yQ-KjVNCe3g">Blog in Clojure Code Review</a> youtube video.

Following is my summary of Eric's review, but please, watch the full video to make your own conclusion.

<ul>
    <li>I definitely agree with the idea of moving the translation logic ("readable" functions) to the <em>db</em> namespace.</li>
    <li><strong>The namespaced maps</strong>: Now I really think<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> that they are an unnecessary clutter for such a simple CRUD app. </span>Initially, I was inspired by <a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="http://blog.fogus.me/2017/02/10/clojure-spec-data-design-01-sketching-a-struct/" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en-GB&amp;q=http://blog.fogus.me/2017/02/10/clojure-spec-data-design-01-sketching-a-struct/&amp;source=gmail&amp;ust=1523523415036000&amp;usg=AFQjCNGl1i1FfVg8HR9ASMiPMKjqqUCI5w">Fogus modeling a domain with namespaced maps</a><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> and some other people suggesting them. I guess they could be more useful in a richer domain model. I'm curious to hear if you ever use them and what other factors you take into account when making that decision.</span></li>
    <li><strong>Separating protocol definitions</strong> and getting rid of some functions (<em>update-post</em> et al.) in features namespace is an interesting idea:
<ul>
    <li>I agree that protocol definitions should be separated from the db<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> implementation</span></li>
    <li>As regards to the removal of functions in features/posts.clj<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> I think they still might have some value - perhaps, not right now.</span>
<ul>
    <li>I was inspired by <a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://leanpub.com/clojurepolymorphism/" rel="noopener" data-saferedirecturl="https://www.google.com/url?hl=en-GB&amp;q=https://leanpub.com/clojurepolymorphism/&amp;source=gmail&amp;ust=1523522372887000&amp;usg=AFQjCNG1gJG3H79hmiF-lp0bI8Ru7ldfXA">Paul Stadig's Clojure Polymorphism</a><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> book where he frequently uses client namespace for protocol functions - maybe the benefits of doing so are not so obvious in my case but I'll probably leave them there. The protocol itself could be moved to completely separate namespace (Paul uses "protocol.clj" for this purpose). Perhaps the protocol should be kept in </span><b style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><i>boundary/db.clj</i></b><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">, but the implementations moved to </span><b style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><i>boundary/sql.clj</i></b><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> or something similar.</span> I admit that it may well be a bit of overengineering for the sake of this app, though.</li>
    <li>I think that at least the `preview` function should probably be kept in "features" namespace as opposed to the db<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> namespace.</span></li>
</ul>
</li>
</ul>
</li>
    <li><strong>Using <i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">select-keys </i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">instead of </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">dissoc </i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">in </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">update-post</i></strong><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><strong> function</strong> is <em>probably</em> good advice. I couldn't make up my mind which approach is better because I was worried that I'd have to change the </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">update-post</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> implementation every time I decide to add a new field to the post. I expect that (generally speaking) I'll want to make new fields updatable and (hopefully) only the </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">user_id</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> and </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">created_date</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> will remain the ones that should not be updated (that is they are used only in </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">create-post</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> function).</span> I guess there's a bit of conflict because I try to reuse <i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">readable-&gt;db-post</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> </span><wbr style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" /><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">function for both </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">update-post </i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">and </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">create-post</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> but there's a small difference between them. Maybe  I could just duplicate the logic and move on.</span></li>
    <li>calling <i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">now()</i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> twice &amp; <strong>using </strong></span><strong><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">remove </i><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">instead of </span><i style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">(filter (complement ...)</i></strong><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> - nice catch!</span></li>
</ul>

<h2></h2>

<h2>Conclusion</h2>

You can find the source code in <a href="https://github.com/jumarko/pure-blog">pure-blog GitHub repo</a>. The version that Eric reviewed is tagged as <a href="https://github.com/jumarko/pure-blog/tree/mvp-1.0"><em><strong>mvp-1.0</strong></em></a><em>.</em>
A read-only version of the PureBlog application is available at <a href="http://pureblog.curiousprogrammer.net:3000/">http://pureblog.curiousprogrammer.net:3000/</a>.

I'm happy to hear your comments and additional feedback! Feel free to comment on the <a href="https://github.com/jumarko/pure-blog/issues/1">Github issue <em><strong>Initial Feedback</strong></em></a>.

<h3>Future</h3>

I haven't had time to move this project beyond the initial version but I do plan to do more work, implement Eric's suggestions and add more features. However, this app isn't intended to be really practical/useful; just "whimsical" :).

Some more features/things I'd like to do in the future:

<ul>
    <li>Authentication and login
<ul>
    <li>It might include a proper user-registration process as well</li>
</ul>
</li>
    <li>Markdown editor</li>
    <li>Datomic as a persistence layer
<ul>
    <li>May be used for features like <em>Post edits history</em></li>
</ul>
</li>
    <li>Tags &amp; Comments</li>
</ul>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2018-05-11 10:29:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-11 10:29:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pureblog-a-simple-blog-implementation-in-clojure-for-purelyfunctional-tv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588919312;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:238;}i:1;a:1:{s:2:"id";i:80;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Clojure Tip of the Day - Clojure Concurrency</title>
		<link>https://curiousprogrammer.net/2018/04/19/clojure-tip-of-the-day-clojure-concurrency/</link>
		<pubDate>Thu, 19 Apr 2018 09:34:12 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">http://curiousprogrammer.net/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[I've made a short "welcome" video for a new <em>Clojure Concurrency </em>series.

You can find it on YouTube: <a href="https://youtu.be/LKomnPz4Kek">https://youtu.be/LKomnPz4Kek</a>.

Starting with this episode I probably won't make a separate blog post for each episode. Instead, I'll attach all notes to the <a href="https://curiousprogrammer.net/clojure-tip-of-the-day-screencast/">Clojure Tip of the Day screencast page</a>.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2018-04-19 09:34:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-19 09:34:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clojure-tip-of-the-day-clojure-concurrency]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588367085;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:371;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:292;}}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>New Clojure Quips Screencast</title>
		<link>https://curiousprogrammer.net/2019/02/25/new-clojure-quips-screencast/</link>
		<pubDate>Mon, 25 Feb 2019 08:54:32 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=371</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>It's been a while since I recorded the last <a href="https://curiousprogrammer.net/2018/04/19/clojure-tip-of-the-day-clojure-concurrency/">Clojure Tip of the Day episode</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've been thinking a lot about the possibilities how to evolve this further and have found that it's a really time-consuming effort and there are also other high-quality websites covering those sorts of topics (as an example, check out wonderful <a href="https://purelyfunctional.tv/courses/concurrency/">Clojure Concurrency course from PurelyFunctional.tv</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So I decided to switch my focus on something that I could consistently do on a semi-regular basis and that means really short videos focused on a single concept or a function from Clojure standard library or other interesting Clojure libraries and tools.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Today, I'm announcing a weekly <em><strong><a href="https://curiousprogrammer.net/clojure-quips/">Clojure Quips</a></strong></em><a href="https://curiousprogrammer.net/clojure-quips/"> screencast</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <a href="https://www.youtube.com/watch?v=rlucNAvwqg0&amp;feature=youtu.be">first episode is already on YouTube</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enjoy!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date><![CDATA[2019-02-25 08:54:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-25 08:54:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[new-clojure-quips-screencast]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588737119;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:298;}i:1;a:1:{s:2:"id";i:305;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2811</wp:comment_id>
			<wp:comment_author><![CDATA[Jude]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[judepayne@yahoo.co.uk]]></wp:comment_author_email>
			<wp:comment_author_url>https://github.com/judepayne</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[109.146.79.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-03-16 06:57:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-03-16 06:57:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this website and your screencasts! Some great stuff here.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1552719437.254868984222412109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559299826.9455149173736572265625;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"jumar";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>GDG Jihlava - CodeScene talk</title>
		<link>https://curiousprogrammer.net/2019/10/25/gdg-jihlava-codescene-talk/</link>
		<pubDate>Fri, 25 Oct 2019 07:45:15 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I gave a talk at <a href="https://twitter.com/GDGJihlava">GDG Jihlava</a> yesterday about <a href="https://codescene.io">CodeScene</a>, a unique behavioral code analysis tool that I'm grateful to work on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The talk was given in Slovak (full details are available at the <a href="https://www.meetup.com/gdgjihlava/events/265293406/">Meetup page</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Slides (English) uploaded here: <a href="https://curiousprogrammer.net/GdgJihlava-CodeScene.pdf">https://curiousprogrammer.net/GdgJihlava-CodeScene.pdf</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can find a list of all my talks on the <strong><em><a href="https://curiousprogrammer.net/my-talks/">My Talks </a></em><a href="https://curiousprogrammer.net/my-talks/">page</a></strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date><![CDATA[2019-10-25 07:45:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-25 07:45:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdg-jihlava-codescene-talk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588919502;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:58;}i:2;a:1:{s:2:"id";i:298;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Going forward: Book summaries and Weekly Bits &amp; Pieces</title>
		<link>https://curiousprogrammer.net/2020/04/27/going-forward-book-summaries-and-weekly-bits-pieces/</link>
		<pubDate>Mon, 27 Apr 2020 11:28:11 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=408</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>It's been a while since my last post and I've been very inconsistent in publishing new content. But I want to publish interesting content which both I (reviewing &amp; sorting out materials) and other readers could benefit from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an experiment, I created two new pages which I want to keep adding content continuously:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><strong>Book Summaries</strong>:&nbsp;<a href="https://curiousprogrammer.net/book-summaries/">https://curiousprogrammer.net/book-summaries/</a></li><li><strong>Weekly Bits &amp; Pieces</strong>&nbsp;<a href="https://curiousprogrammer.net/weekly-bits-pieces/">https://curiousprogrammer.net/weekly-bits-pieces/</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The first "bits" should appear within a week.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>408</wp:post_id>
		<wp:post_date><![CDATA[2020-04-27 11:28:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-27 11:28:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[going-forward-book-summaries-and-weekly-bits-pieces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588919554;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:38;}i:1;a:1:{s:2:"id";i:320;}i:2;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces 01/2020</title>
		<link>https://curiousprogrammer.net/2020/05/04/__trashed/</link>
		<pubDate>Mon, 04 May 2020 06:11:23 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Weekly Bits &amp; Pieces 01/2020</h1>

<em>This is the very first weekly summary published on my blog. 
It reviews interesting stuff I did and found in the past week</em>.

<h2>Clojure</h2>

<pre>&lt;code class=&quot;language-clojure&quot;&gt;(defn hello-world [])
&lt;/code&gt;</pre>

<h2>Projects Update</h2>

<h3>Python for Data Science</h3>

<h3>SICP</h3>

<h3>Computer Systems</h3>

<h2>Work (CodeScene)</h2>

<h2>Learning</h2>

<h2>Writing</h2>

<h2>Personal (Hobbies)</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date><![CDATA[2020-05-04 06:11:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-04 06:11:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588613784;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:408;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:371;}i:3;a:1:{s:2:"id";i:38;}i:4;a:1:{s:2:"id";i:320;}i:5;a:1:{s:2:"id";i:225;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588615757;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:408;}i:1;a:1:{s:2:"id";i:94;}i:2;a:1:{s:2:"id";i:58;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1588572683]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces 01/2020</title>
		<link>https://curiousprogrammer.net/2020/05/08/__trashed-5/</link>
		<pubDate>Fri, 08 May 2020 04:51:59 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":1} -->

<h1>Weekly Bits &amp; Pieces 01/2020</h1>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p><em>This is the very first weekly summary published on my blog. It reviews interesting stuff I did and found in the past week</em>.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p><strong>Table of Contents</strong></p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li><a href="#clojure">Clojure</a></li><li><a href="#projects-update">Projects Update</a><ul><li><a href="#python-for-data-science">Python for Data Science</a></li><li><a href="#sicp">SICP</a></li><li><a href="#computer-systems">Computer Systems</a></li></ul></li><li><a href="#work-codescene">Work (CodeScene)</a></li><li><a href="#learning">Learning</a></li><li><a href="#writing">Writing</a></li><li><a href="#personal-hobbies">Personal (Hobbies)</a></li></ul>

<!-- /wp:list -->

<!-- wp:heading -->

<h2>Clojure</h2>

<!-- /wp:heading -->

<!-- wp:code -->

<pre class="wp-block-code">&lt;code&gt;(defn hello-world &amp;#91;])&lt;/code&gt;</pre>

<!-- /wp:code -->

<!-- wp:heading -->

<h2>Projects Update</h2>

<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->

<h3>Python for Data Science</h3>

<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->

<h3>SICP</h3>

<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->

<h3>Computer Systems</h3>

<!-- /wp:heading -->

<!-- wp:heading -->

<h2>Work (CodeScene)</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>## Learning</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Writing</h2>

<!-- /wp:heading -->

<!-- wp:heading -->

<h2>Personal (Hobbies)</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)<br>in Moravian Karst, Sloup (near Brno).<br>It was fun despite the specific type of climbing available here :).</p>

<!-- /wp:paragraph -->
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 04:51:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-08 04:51:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed-5]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588697647;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:408;}i:1;a:1:{s:2:"id";i:371;}i:2;a:1:{s:2:"id";i:320;}i:3;a:1:{s:2:"id";i:94;}i:4;a:1:{s:2:"id";i:210;}i:5;a:1:{s:2:"id";i:80;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588697655;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:385;}i:1;a:1:{s:2:"id";i:408;}i:2;a:1:{s:2:"id";i:320;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1588913519]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Markdown</title>
		<link>https://curiousprogrammer.net/2020/05/08/__trashed-4/</link>
		<pubDate>Fri, 08 May 2020 04:51:59 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[<p><em>This is the very first weekly summary published on my blog.
It reviews interesting stuff I did and found in the past week</em>.</p>

<p><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->
<strong>Table of Contents</strong></p>

<ul>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#projects-update">Projects Update</a></li>
<li><a href="#python-for-data-science">Python for Data Science</a></li>
<li><a href="#sicp">SICP</a></li>
<li><a href="#computer-systems">Computer Systems</a></li>
<li><a href="#work-codescene">Work (CodeScene)</a></li>
<li><a href="#learning">Learning</a></li>
<li><a href="#writing">Writing</a></li>
<li><a href="#personal-hobbies">Personal (Hobbies)</a></li>
</ul>

<!-- markdown-toc end -->

<div id="clojure"></div>

<h2>Clojure</h2>

<pre>&lt;code class=&quot;language-clojure&quot;&gt;(defn hello-world [])
&lt;/code&gt;</pre>

<div id="projects-update"></div>

<h2>Projects Update</h2>

<div id="python-for-data-science"></div>

<h3>Python for Data Science</h3>

<div id="sicp"></div>

<h3>SICP</h3>

<div id="computer-systems"></div>

<h3>Computer Systems</h3>

<div id="work-codescene"></div>

<h2>Work (CodeScene)</h2>

<div id="learning">

## Learning
<div id="writing"></div>
## Writing
<div id="personal-hobbies"></div>
## Personal (Hobbies)

After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)
in Moravian Karst, Sloup (near Brno).
It was fun despite the specific type of climbing available here :).

</div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 04:51:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-08 04:51:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed-4]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588697962;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:38;}i:1;a:1:{s:2:"id";i:320;}i:2;a:1:{s:2:"id";i:298;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588698003;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:38;}i:1;a:1:{s:2:"id";i:320;}i:2;a:1:{s:2:"id";i:298;}i:3;a:1:{s:2:"id";i:80;}i:4;a:1:{s:2:"id";i:305;}i:5;a:1:{s:2:"id";i:58;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1588913519]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces 01/2020</title>
		<link>https://curiousprogrammer.net/2020/05/08/__trashed-3/</link>
		<pubDate>Fri, 08 May 2020 04:51:59 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=442</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->

<p><em>This is the very first weekly summary published on my blog. It reviews interesting stuff I did and found in the past week</em>.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p><strong>Table of Contents</strong></p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li><a href="#clojure">Clojure</a></li><li><a href="#learning">Learning</a><ul><li><a href="#rapid-learner">Rapid Learner</a></li></ul></li><li><a href="#reading">Reading</a></li><li><a href="#writing">Writing</a></li><li><a href="#personal-hobbies">Personal (Hobbies)</a></li><li><a href="#projects-update">Projects Update</a><ul><li><a href="#python-for-data-science">Python for Data Science</a></li><li><a href="#sicp">SICP</a></li><li><a href="#computer-systems">Computer Systems</a></li></ul></li><li><a href="#work-codescene">Work (CodeScene)</a><ul><li><a href="#codescene-40">CodeScene 4.0</a></li><li><a href="#jvm-crash-and-slow-analyses">JVM crash and slow analyses</a></li><li><a href="#windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</a></li><li><a href="#windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</a></li><li><a href="#azure-containers---really-slow-io">Azure Containers - (really) slow IO</a></li></ul></li></ul>

<!-- /wp:list -->

<!-- wp:heading -->

<h2>Clojure</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I found two interesting pieces on Clojurians slack:</p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li>hiredman's <code>for</code> example ("swiss army knife") showing how to navigate nested data (even using a recursive function)</li></ul>

<!-- /wp:list -->

<!-- wp:code -->

<pre class="wp-block-code">&lt;code&gt;(for &amp;#91;maybe-x (tree-seq map? :content xml)
      :when (= (:tag maybe-x) :x)
      maybe-y (:content maybe-x)
      :when (= (:tag maybe-y) :y)
      ,,,
      ]
  whatever)

;; you can even do recursive queries with it by just wrapping it in a recursive function 
(fn f &amp;#91;whatever] (for &amp;#91;x whatever i (f x)] i))&lt;/code&gt;</pre>

<!-- /wp:code -->

<!-- wp:list -->

<ul><li>#off-topic discussion about <strong>Clojure and teams productivity</strong> (Alex Miller) - I was astonished<br>when I found <strong>there are only 4 people doing all the development on Clojure, Datomic</strong> et al.</li></ul>

<!-- /wp:list -->

<!-- wp:quote -->

<blockquote class="wp-block-quote"><p>there are only 4 people doing all of the dev on Datomic, Clojure, etc combined so we are a tiny team of very experienced people using high leverage tools. I'm not sure this is directly relevant to most software teams in general (but Clojure projects do probably tend to be more that, and less big teams)</p><p>Mythical man month is really from the perspective of someone working on teams of like 50-100 people, which is a totally different world</p><p>no matter how big your team is, the important thing is to connect what people are doing with business value. as team size gets bigger, you inevitably are going to spend a lot more time communicating what to do and what has been done, which is inherently less efficient. So bigger teams need to put in more active effort to optimize that communication flow.</p><p>Tools like Clojure and Datomic are designed to let a small team get higher leverage and do more with less, both in initial development AND over time as requirements and software changes (caring about this latter bit is imo something Rich pays way more attention to than most), which lets you stay small and avoid taking the efficiency hit in scaling longer than other tools.</p></blockquote>

<!-- /wp:quote -->

<!-- wp:paragraph -->

<p>I was also surprised by a big performance difference betwee NumPy's array operations<br>vs Clojure - see <a href="#python-for-data-science">Python for Data Science</a> for more details</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Learning</h2>

<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->

<h3>Rapid Learner</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I've been very curious about general learning strategies for a long time.<br>A few years ago, I purchased the <a href="https://www.scotthyoung.com/courses/course/rapid-learner/">Rapid Learner course by Scott Young</a>.<br>I've never managed to finish it although I adopted a few ideas from the course.<br>A couple of weeks ago, I decided to restart the course (which now has a lot of new content marketed as "Rapid Learner 2.0").</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>The ideas of <strong>practice</strong> and <strong>directness</strong> are the core concepts in the course<br>and it's focus is on practical projects. Thus I'm trying to apply the ideas while going through<br>the <a href="#python-for-data-science">Python for Data Science</a> project.</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Reading</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I always liked reading - it was my passion since grammar school.<br>Today I read mostly non-fiction books with heavy focus on programming-related topics.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>I finished a wonderful practical book about networking called<br><a href="https://www.amazon.com/Networking-Systems-Administrators-Mastery-Book-ebook/dp/B00STLTH74">Networking for System Administrators</a>.<br>I'll post more details on <a href="https://curiousprogrammer.net/book-summaries/">Book summaries</a> soon.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Recently, I've enjoyed reading <a href="https://basecamp.com/shapeup">Shape Up</a> by Ryan Singer from Basecamp<br>and <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548">On Writing Well</a><br>by William Zinsser.<br>Both are great books and I'll tell you more about them soon.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Finally, you can check <a href="https://www.goodreads.com/user/show/61742630-juraj-martinka">my goodreads profile</a><br>to find more books I've read or plan to read.</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Writing</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>Writing is a great exercise for a programmer - it forces you to clear your thoughts<br>and it's similar, in many aspects, to coding.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>It's been my hope that I can learn and improve this skill ever since I started the<br><a href="https://curiousprogrammer.net/about/">curiousprogrammer.net blog</a>.<br>I've been dormant for a while but now, armed with a few tips from <a href="#reading">On Writting Well</a>,<br>I'm going to post new content more regularly.<br><a href="https://curiousprogrammer.net/weekly-bits-pieces/">Weekly Bits &amp; Pieces</a> are the most recent<br>addition.</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Personal (Hobbies)</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)<br>in Moravian Karst, Sloup (near Brno).<br>It was fun despite a quite specific type of climbing (<em>very</em> polished) :).</p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Projects Update</h2>

<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->

<h3>Python for Data Science</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I've decided to learn some Data Science using Python.<br>I'm loosely following the curriculum outlined in<br><a href="https://www.kdnuggets.com/2019/06/python-data-science-right-way.html">How to Learn Python for Data Science the Right Way</a>.<br>Python is a new language for me (excluding an old short-term experience),<br>so the <a href="https://www.oreilly.com/library/view/python-for-data/9781491957653">Python for Data Analysis book</a><br>seems to be a great fit.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Last week I finished Chapter 4 about <a href="https://numpy.org/"><strong>NumPy</strong></a>:</p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li>It's a common low-level library for fast array computation - implemented in C and using<br>"vectorized" functions operating on whole arrays instead of element-wise (like pure python)</li><li>I learned about <em>Slicing</em>, <em>Boolean indexing</em>, <em>Multi-dimensional arrays</em>, and <em>Random walks</em><br>among other things.</li><li>I was amazed by the performance difference between Python (2-3 ms) and Clojure (13-14 ms)<br>when multiplying an array of 1,000,000 elements by 2:</li></ul>

<!-- /wp:list -->

<!-- wp:code -->

<pre class="wp-block-code">&lt;code&gt;;;; Python =&gt; 22.8 ms for 10 iterations of 1,000,000 elements =&gt; 2-3 ms for a single iteration
import numpy as np

my_arr = np.arange(1000000)
my_list = list(range(1000000))

%time for _ in range(10): my_arr2 = my_arr * 2
CPU times: user 14.5 ms, sys: 8.33 ms, total: 22.8 ms
Wall time: 22.8 ms

;;; Clojure - vectors &amp;amp; arrays =&gt; ~13 ms at best using plain arrays
(def my-array (int-array (range 1000000)))
(time
 (dotimes &amp;#91;i 10]
   (amap ^ints my-array
         idx
         ret
         (* (int 2) (aget ^ints my-array idx)))))
&quot;Elapsed time: 133.522233 msecs&quot;

;; use also criterium for more objective measurement
(require &#039;&amp;#91;criterium.core :as crit])
(crit/quick-bench (amap ^ints my-array
                        idx
                        ret
                        (* (int 2) (aget ^ints my-array idx))))
;; Evaluation count : 48 in 6 samples of 8 calls.
;; Execution time mean : 14.022060 ms
;; Execution time std-deviation : 476.098590 µs
;; Execution time lower quantile : 13.728450 ms ( 2.5%)
;; Execution time upper quantile : 14.807910 ms (97.5%)
;; Overhead used : 8.025814 ns&lt;/code&gt;</pre>

<!-- /wp:code -->

<!-- wp:list -->

<ul><li><em>Random Walk</em> example in section 4.7 was pretty interesting - I don't think I ever heard<br>about <em>first crossing time</em> value:</li><li><img src="2020-05-04-ds-random-walk-python.png" alt="Random Walk using plain python"></li><li><img src="2020-05-04-ds-random-walk-numpy.png" alt="Random Walk using NumPy"></li></ul>

<!-- /wp:list -->

<!-- wp:heading {"level":3} -->

<h3>SICP</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I've been reading <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a><br>for a really long time.<br>It's a fantastic and challenging book.<br>It takes me a lot of time to do the exercises but they are definitly worth it.<br>I'll keep crawling through the book at my toirtose pace :)</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Last week I finished the <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.4">Huffman Encoding</a><br>section - apart from an exercise on how to represent trees<br>I learned about <em>prefix codes</em> and <em>variable length encoding</em>.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>You will find all my source code from the book here: <a href="https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp">https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp</a></p>

<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->

<h3>Computer Systems</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p><a href="https://www.amazon.com/Computer-Systems-Programmers-Perspective-Global-ebook/dp/B07V71PHR7/ref=pd_sbs_14_1/130-8492999-1421206?_encoding=UTF8&amp;pd_rd_i=B07V71PHR7&amp;pd_rd_r=ed8e11fb-e5ef-468e-8a46-b165f8f3d182&amp;pd_rd_w=UG6HR&amp;pd_rd_wg=oNLvC&amp;pf_rd_p=d13bb895-21d3-4e96-94a7-553aaae51224&amp;pf_rd_r=9WZHWXSX0QYER6ZFQXZ6&amp;psc=1&amp;refRID=9WZHWXSX0QYER6ZFQXZ6">Computer Systems: A Programmer's Perspective</a><br>is another great book - this time about lower-level programming, operating systems and machine/assembly language.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>I started the chapter 3 <em>Machine-Level Representation of Programs</em> and found it refreshing<br>after the chapter 2 about machine representation of numbers (which is math-heavy and became boring at some point)</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>I enjoyed a "disassembling" exercise with <code>gcc -Og</code> and <code>objdump -d</code> (section 3.2.2)</p>

<!-- /wp:paragraph -->

<!-- wp:code -->

<pre class="wp-block-code">&lt;code&gt;# diassemble object code
gcc -Og -c mstore.c
objdump -d mstore.o

# diassemble executable (object code + linking)
gcc -Og -o prog  main.c mstore.c
objdump -d prog&lt;/code&gt;</pre>

<!-- /wp:code -->

<!-- wp:paragraph -->

<p>I've also found a striking connection to the Huffman Encoding section in SICP - x86 assembly<br>is really a <em>prefix code</em>!</p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li>Diassembled object code: <code>objdump -d mstore.o</code><br><img src="2020-05-04-cs-objdump-object-code.png" alt="Disassemble object code"></li><li>Disassembled executable: <code>objdump -d prog</code><br><img src="2020-05-04-cs-objdump-executable.png" alt="Disassemble object code"></li></ul>

<!-- /wp:list -->

<!-- wp:paragraph -->

<p>You can find my book code examples here: <a href="https://github.com/jumarko/computer-systems">https://github.com/jumarko/computer-systems</a></p>

<!-- /wp:paragraph -->

<!-- wp:heading -->

<h2>Work (CodeScene)</h2>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>I joined company called Empear back in 2017 to work on<br><a href="https://empear.com/how-it-works/">CodeScene - a unique behavioral code analysis tool</a>.<br>I've been really grateful for that - the team is great, I'm learning a lot every day<br>and I can use Clojure in my daily work.</p>

<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->

<h3>CodeScene 4.0</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>The last week was special because we released a new major version of our enterprise product:<br><a href="https://empear.com/blog/codescene-release-4_0/">CodeScene 4.0</a>.<br>I haven't worked on this release - I'm mostly focusing on <a href="https://codescene.io">codescene.io</a> -<br>but my colleagues did a great work in this area.<br>The new version comes with a completely new more intuitive UI with greater focus on features auto-discovery.<br>We're looking forward to hearing customers' feedback.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>For <a href="https://codescene.io">codescene.io</a>, the "cloud" version of CodeScene,<br>we're adding Bitbucket support (today you can only analyze GitHub repositories).<br>It will be an important step for reaching a wider audience.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>If you're interested, you can analyze your public repositories for free<br>or <a href="https://codescene.io/plans">get a paid plan</a> if you want to try it on private projects.<br>Moreover, if you're a student or a teacher you can get a paid plan for free:</p>

<!-- /wp:paragraph -->

<!-- wp:list -->

<ul><li><a href="https://codescene.io/github-students">https://codescene.io/github-students</a></li><li><a href="https://codescene.io/github-teachers">https://codescene.io/github-teachers</a></li></ul>

<!-- /wp:list -->

<!-- wp:heading {"level":3} -->

<h3>JVM crash and slow analyses</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>While onboarding a few customers we faced issues with slow analyses.<br>CodeScene is usually pretty fast (running Linux analysis in ~40 minutes on a Macbook Pro laptop with a solid SSD disk)<br>but two customers were trying to analyze their big repositories and their analyses were running<br>for more than one day.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>There were three distinct cases:</p>

<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->

<ol><li>One customer running CodeScene in docker inside a Linux virtual machine hosted on Windows Server 2019</li><li>The same customer later switching to Tomcat deployment directly on the Windows Server host</li><li>Another customer using <a href="https://hub.docker.com/r/empear/ubuntu-onprem/">our docker image</a><br>and deploying CodeScene with Azure Containers</li></ol>

<!-- /wp:list -->

<!-- wp:heading {"level":4} -->

<h4>Windows Server - Linux VM and JVM bug</h4>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>First, they tried to run CodeScene using our docker image and hit a JVM bug right from the start:<br><img src="2020-05-04-codescene-avx-bug.png" alt="SIGILL JVM error"></p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>As my colleague found, this was due to incorrect detection of AVX instruction family support<br>(vectorized processor instructions) in the JVM.<br>There's an open issue for that: <a href="https://bugs.openjdk.java.net/browse/JDK-8238596">https://bugs.openjdk.java.net/browse/JDK-8238596</a>.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Once we identified the root cause the workaround was relatively easy - don't use AVX:</p>

<!-- /wp:paragraph -->

<!-- wp:code -->

<pre class="wp-block-code">&lt;code&gt;docker run -e JAVA_OPTIONS=-XX:UseAVX=0 empear/ubuntu-onprem:latest&lt;/code&gt;</pre>

<!-- /wp:code -->

<!-- wp:paragraph -->

<p>The AVX instruction support can be verified (on Linux) via <code>lscpu</code> - just check the <code>FLags</code> section<br>if there's 'avx' or not:<br><img src="2020-05-04-codescene-avx-bug-lscpu.png" alt="lscpu - missing AVX flag"></p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>As we later found, the AVX instruction wasn't supported due to "Compatibility Configuration"<br>on the Windows Server host which allowed the VMs to be easily migrated between physical hosts:<br><img src="2020-05-04-codescene-avx-bug-vm-compatibility.png" alt="Windows Server - VM compability configuration"></p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>The customer ended up using Tomcat installed directly on the Host Windows OS,<br>but it was a really tricky support case anyway.</p>

<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->

<h4>Windows Server - Tomcat and small heap size</h4>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>The customer decided to switch from Docker to Tomcat deployment but the analysis was still very slow.<br>We thought it could be a slow IO issue again, because of dealing with another customer's installation<br>at the same time (see Azure Containers section below).<br>But It turned out they were using really fast SAN (Storage Area Network) disk storage.</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>Eventually, we found the root cause: <strong>small <em>default</em> heap</strong> size set by Tomcat:<br>although the machine had 32 GB of ram, the default Max heap size set by Tomcat Windows installer<br>was only about ~250 MB.<br>After raising the max heap size manually to 12 GB the analysis finished within a hour (they have a huge repository):<br><img src="2020-05-04-codescene-windows-tomcat-heap-settings.png" alt="Tomcat on Windows - heap settings"></p>

<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->

<h4>Azure Containers - (really) slow IO</h4>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<p>Another painful experience with slow shared file storage on Azure.<br>A customer analyzing a huge repository couldn't get the results even after a few days!<br>The problem is still being investigated, but we believe the issue is shared file storage used<br>by Azure Containers (and also Azure App Service).</p>

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<p>CodeScene is an IO intensive application and needs a fast disk.<br>Thus any kind of distributed file system makes it very sad.<br>For these reasons <a href="https://docs.enterprise.codescene.io/versions/4.0.2/getting-started/deployment-options.html#system-requirements">we don't recommend using Azure Files, AWS EFS et al</a>.<br>I ran CodeScene via Azure App Service the last year and found it <strong>at least 10x slower</strong> on medium-sized<br>repositories compared to a deployment on a plain Linux VM.</p>

<!-- /wp:paragraph -->
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 04:51:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-08 04:51:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed-3]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588955968;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:298;}i:2;a:1:{s:2:"id";i:94;}}}s:32:"37550b67d263a3ce789993dc25046c5f";a:2:{s:7:"expires";i:1588956009;s:7:"payload";a:6:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:298;}i:2;a:1:{s:2:"id";i:94;}i:3;a:1:{s:2:"id";i:210;}i:4;a:1:{s:2:"id";i:371;}i:5;a:1:{s:2:"id";i:80;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1588913519]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Weekly Bits &amp; Pieces 01/2020</title>
		<link>https://curiousprogrammer.net/2020/05/08/__trashed-2/</link>
		<pubDate>Fri, 08 May 2020 04:51:59 +0000</pubDate>
		<dc:creator><![CDATA[jumar]]></dc:creator>
		<guid isPermaLink="false">https://curiousprogrammer.net/?p=446</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Weekly Bits &amp; Pieces 01/2020</h1>

<p><em>This is the very first weekly summary published on my blog.
It reviews interesting stuff I did and found in the past week</em>.</p>

<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->

<p><strong>Table of Contents</strong></p>

<ul>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#learning">Learning</a>
<ul>
<li><a href="#rapid-learner">Rapid Learner</a></li>
</ul></li>
<li><a href="#reading">Reading</a></li>
<li><a href="#writing">Writing</a></li>
<li><a href="#personal-hobbies">Personal (Hobbies)</a></li>
<li><a href="#projects-update">Projects Update</a>
<ul>
<li><a href="#python-for-data-science">Python for Data Science</a></li>
<li><a href="#sicp">SICP</a></li>
<li><a href="#computer-systems">Computer Systems</a></li>
</ul></li>
<li><a href="#work-codescene">Work (CodeScene)</a>
<ul>
<li><a href="#codescene-40">CodeScene 4.0</a></li>
<li><a href="#jvm-crash-and-slow-analyses">JVM crash and slow analyses</a>
<ul>
<li><a href="#windows-server---linux-vm-and-jvm-bug">Windows Server - Linux VM and JVM bug</a></li>
<li><a href="#windows-server---tomcat-and-small-heap-size">Windows Server - Tomcat and small heap size</a></li>
<li><a href="#azure-containers---really-slow-io">Azure Containers - (really) slow IO</a></li>
</ul></li>
</ul></li>
</ul>

<!-- markdown-toc end -->

<div id="clojure"></div>

<h2>Clojure</h2>

<p>I found two interesting pieces on Clojurians slack:</p>

<ul>
<li>hiredman's <code>for</code> example (&quot;swiss army knife&quot;) showing how to navigate nested data (even using a recursive function)
<pre>&lt;code&gt;
(for [maybe-x (tree-seq map? :content xml)
  :when (= (:tag maybe-x) :x)
  maybe-y (:content maybe-x)
  :when (= (:tag maybe-y) :y)
  ,,,
  ]
whatever)&lt;/code&gt;</pre></li>
</ul>

<p>;; you can even do recursive queries with it by just wrapping it in a recursive function
(fn f [whatever] (for [x whatever i (f x)] i))</p>

<pre>&lt;code&gt;* #off-topic discussion about **Clojure and teams productivity** (Alex Miller) - I was astonished
   when I found **there are only 4 people doing all the development on Clojure, Datomic** et al.
   &gt; there are only 4 people doing all of the dev on Datomic, Clojure, etc combined so we are a tiny team of very experienced people using high leverage tools. I&#039;m not sure this is directly relevant to most software teams in general (but Clojure projects do probably tend to be more that, and less big teams)

   &gt; Mythical man month is really from the perspective of someone working on teams of like 50-100 people, which is a totally different world

   &gt; no matter how big your team is, the important thing is to connect what people are doing with business value. as team size gets bigger, you inevitably are going to spend a lot more time communicating what to do and what has been done, which is inherently less efficient. So bigger teams need to put in more active effort to optimize that communication flow.

   &gt; Tools like Clojure and Datomic are designed to let a small team get higher leverage and do more with less, both in initial development AND over time as requirements and software changes (caring about this latter bit is imo something Rich pays way more attention to than most), which lets you stay small and avoid taking the efficiency hit in scaling longer than other tools.

I was also surprised by a big performance difference betwee NumPy&#039;s array operations
vs Clojure - see [Python for Data Science](#python-for-data-science) for more details

&lt;div id=&quot;learning&quot;&gt;&lt;/div&gt;

## Learning

&lt;div id=&quot;rapid-learner&quot;&gt;&lt;/div&gt;

### Rapid Learner

I&#039;ve been very curious about general learning strategies for a long time.
A few years ago, I purchased the [Rapid Learner course by Scott Young](https://www.scotthyoung.com/courses/course/rapid-learner/).
I&#039;ve never managed to finish it although I adopted a few ideas from the course.
A couple of weeks ago, I decided to restart the course (which now has a lot of new content marketed as &quot;Rapid Learner 2.0&quot;).

The ideas of **practice** and **directness** are the core concepts in the course 
and it&#039;s focus is on practical projects. Thus I&#039;m trying to apply the ideas while going through
the [Python for Data Science](#python-for-data-science) project.

&lt;div id=&quot;reading&quot;&gt;&lt;/div&gt;

## Reading

I always liked reading - it was my passion since grammar school.
Today I read mostly non-fiction books with heavy focus on programming-related topics.

I finished a wonderful practical book about networking called 
[Networking for System Administrators](https://www.amazon.com/Networking-Systems-Administrators-Mastery-Book-ebook/dp/B00STLTH74).
I&#039;ll post more details on [Book summaries](https://curiousprogrammer.net/book-summaries/) soon.

Recently, I&#039;ve enjoyed reading [Shape Up](https://basecamp.com/shapeup) by Ryan Singer from Basecamp
and [On Writing Well](https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548)
by William Zinsser.
Both are great books and I&#039;ll tell you more about them soon.

Finally, you can check [my goodreads profile](https://www.goodreads.com/user/show/61742630-juraj-martinka)
to find more books I&#039;ve read or plan to read.

&lt;div id=&quot;writing&quot;&gt;&lt;/div&gt;

## Writing 

Writing is a great exercise for a programmer - it forces you to clear your thoughts
and it&#039;s similar, in many aspects, to coding.

It&#039;s been my hope that I can learn and improve this skill ever since I started the 
[curiousprogrammer.net blog](https://curiousprogrammer.net/about/).
I&#039;ve been dormant for a while but now, armed with a few tips from [On Writting Well](#reading), 
I&#039;m going to post new content more regularly.
[Weekly Bits &amp; Pieces](https://curiousprogrammer.net/weekly-bits-pieces/) are the most recent
addition.

&lt;div id=&quot;personal-hobbies&quot;&gt;&lt;/div&gt;

## Personal (Hobbies)

After a long break caused by COVID-19, we finally managed to do some rock climbing (not just bouldering)
in Moravian Karst, Sloup (near Brno).
It was fun despite a quite specific type of climbing (_very_ polished) :).

&lt;div id=&quot;projects-update&quot;&gt;&lt;/div&gt;

## Projects Update

&lt;div id=&quot;python-for-data-science&quot;&gt;&lt;/div&gt;

### Python for Data Science

I&#039;ve decided to learn some Data Science using Python.
I&#039;m loosely following the curriculum outlined in 
[How to Learn Python for Data Science the Right Way](https://www.kdnuggets.com/2019/06/python-data-science-right-way.html).
Python is a new language for me (excluding an old short-term experience), 
so the [Python for Data Analysis book](https://www.oreilly.com/library/view/python-for-data/9781491957653)
seems to be a great fit.

Last week I finished Chapter 4 about [**NumPy**](https://numpy.org/):

* It&#039;s a common low-level library for fast array computation - implemented in C and using
  &quot;vectorized&quot; functions operating on whole arrays instead of element-wise (like pure python)
* I learned about _Slicing_, _Boolean indexing_, _Multi-dimensional arrays_, and _Random walks_
  among other things. 
* I was amazed by the performance difference between Python (2-3 ms) and Clojure (13-14 ms)
  when multiplying an array of 1,000,000 elements by 2:&lt;/code&gt;</pre>

<p>;;; Python =&gt; 22.8 ms for 10 iterations of 1,000,000 elements =&gt; 2-3 ms for a single iteration
import numpy as np</p>

<p>my_arr = np.arange(1000000)
my_list = list(range(1000000))</p>

<p>%time for _ in range(10): my_arr2 = my_arr * 2
CPU times: user 14.5 ms, sys: 8.33 ms, total: 22.8 ms
Wall time: 22.8 ms</p>

<p>;;; Clojure - vectors &amp; arrays =&gt; ~13 ms at best using plain arrays
(def my-array (int-array (range 1000000)))
(time
(dotimes [i 10]
(amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx)))))
&quot;Elapsed time: 133.522233 msecs&quot;</p>

<p>;; use also criterium for more objective measurement
(require &#039;[criterium.core :as crit])
(crit/quick-bench (amap ^ints my-array
idx
ret
(* (int 2) (aget ^ints my-array idx))))
;; Evaluation count : 48 in 6 samples of 8 calls.
;; Execution time mean : 14.022060 ms
;; Execution time std-deviation : 476.098590 µs
;; Execution time lower quantile : 13.728450 ms ( 2.5%)
;; Execution time upper quantile : 14.807910 ms (97.5%)
;; Overhead used : 8.025814 ns</p>

<pre>&lt;code&gt;* _Random Walk_ example in section 4.7 was pretty interesting - I don&#039;t think I ever heard
  about _first crossing time_ value:
  - ![Random Walk using plain python](2020-05-04-ds-random-walk-python.png)
  - ![Random Walk using NumPy](2020-05-04-ds-random-walk-numpy.png)

&lt;div id=&quot;sicp&quot;&gt;&lt;/div&gt;

### SICP

I&#039;ve been reading [Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html) 
for a really long time.
It&#039;s a fantastic and challenging book. 
It takes me a lot of time to do the exercises but they are definitly worth it.
I&#039;ll keep crawling through the book at my toirtose pace :)

Last week I finished the [Huffman Encoding](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-16.html#%_sec_2.3.4)
section - apart from an exercise on how to represent trees
I learned about _prefix codes_ and _variable length encoding_.

You will find all my source code from the book here: &lt;https://github.com/jumarko/clojure-experiments/tree/master/src/clojure_experiments/books/sicp&gt;

&lt;div id=&quot;computer-systems&quot;&gt;&lt;/div&gt;

### Computer Systems

[Computer Systems: A Programmer&#039;s Perspective](https://www.amazon.com/Computer-Systems-Programmers-Perspective-Global-ebook/dp/B07V71PHR7/ref=pd_sbs_14_1/130-8492999-1421206?_encoding=UTF8&amp;pd_rd_i=B07V71PHR7&amp;pd_rd_r=ed8e11fb-e5ef-468e-8a46-b165f8f3d182&amp;pd_rd_w=UG6HR&amp;pd_rd_wg=oNLvC&amp;pf_rd_p=d13bb895-21d3-4e96-94a7-553aaae51224&amp;pf_rd_r=9WZHWXSX0QYER6ZFQXZ6&amp;psc=1&amp;refRID=9WZHWXSX0QYER6ZFQXZ6) 
is another great book - this time about lower-level programming, operating systems and machine/assembly language.

I started the chapter 3 _Machine-Level Representation of Programs_ and found it refreshing
after the chapter 2 about machine representation of numbers (which is math-heavy and became boring at some point)

I enjoyed a &quot;disassembling&quot; exercise with &lt;code&gt;gcc -Og&lt;/code&gt; and &lt;code&gt;objdump -d&lt;/code&gt; (section 3.2.2)&lt;/code&gt;</pre>

<h1>diassemble object code</h1>

<p>gcc -Og -c mstore.c
objdump -d mstore.o</p>

<h1>diassemble executable (object code + linking)</h1>

<p>gcc -Og -o prog  main.c mstore.c
objdump -d prog</p>

<pre>&lt;code&gt;
I&#039;ve also found a striking connection to the Huffman Encoding section in SICP - x86 assembly
is really a _prefix code_!
  - Diassembled object code: &lt;code&gt;objdump -d mstore.o&lt;/code&gt;  
  ![Disassemble object code](2020-05-04-cs-objdump-object-code.png)
  - Disassembled executable: &lt;code&gt;objdump -d prog&lt;/code&gt;  
  ![Disassemble object code](2020-05-04-cs-objdump-executable.png)

You can find my book code examples here: &lt;https://github.com/jumarko/computer-systems&gt;

&lt;div id=&quot;work-codescene&quot;&gt;&lt;/div&gt;

## Work (CodeScene)

I joined company called Empear back in 2017 to work on 
[CodeScene - a unique behavioral code analysis tool](https://empear.com/how-it-works/).
I&#039;ve been really grateful for that - the team is great, I&#039;m learning a lot every day
and I can use Clojure in my daily work.

&lt;div id=&quot;codescene-40&quot;&gt;&lt;/div&gt;

### CodeScene 4.0

The last week was special because we released a new major version of our enterprise product:
[CodeScene 4.0](https://empear.com/blog/codescene-release-4_0/).
I haven&#039;t worked on this release - I&#039;m mostly focusing on [codescene.io](https://codescene.io) -
but my colleagues did a great work in this area.
The new version comes with a completely new more intuitive UI with greater focus on features auto-discovery.
We&#039;re looking forward to hearing customers&#039; feedback.

For [codescene.io](https://codescene.io), the &quot;cloud&quot; version of CodeScene, 
we&#039;re adding Bitbucket support (today you can only analyze GitHub repositories).
It will be an important step for reaching a wider audience.

If you&#039;re interested, you can analyze your public repositories for free 
or [get a paid plan](https://codescene.io/plans) if you want to try it on private projects.
Moreover, if you&#039;re a student or a teacher you can get a paid plan for free:

- &lt;https://codescene.io/github-students&gt;
- &lt;https://codescene.io/github-teachers&gt;

&lt;div id=&quot;jvm-crash-and-slow-analyses&quot;&gt;&lt;/div&gt;

### JVM crash and slow analyses

While onboarding a few customers we faced issues with slow analyses.
CodeScene is usually pretty fast (running Linux analysis in ~40 minutes on a Macbook Pro laptop with a solid SSD disk)
but two customers were trying to analyze their big repositories and their analyses were running
for more than one day.

There were three distinct cases:

1. One customer running CodeScene in docker inside a Linux virtual machine hosted on Windows Server 2019
2. The same customer later switching to Tomcat deployment directly on the Windows Server host
3. Another customer using [our docker image](https://hub.docker.com/r/empear/ubuntu-onprem/) 
and deploying CodeScene with Azure Containers

&lt;div id=&quot;windows-server---linux-vm-and-jvm-bug&quot;&gt;&lt;/div&gt;

#### Windows Server - Linux VM and JVM bug

First, they tried to run CodeScene using our docker image and hit a JVM bug right from the start:
![SIGILL JVM error](2020-05-04-codescene-avx-bug.png)

As my colleague found, this was due to incorrect detection of AVX instruction family support 
(vectorized processor instructions) in the JVM.
There&#039;s an open issue for that: &lt;https://bugs.openjdk.java.net/browse/JDK-8238596&gt;.

Once we identified the root cause the workaround was relatively easy - don&#039;t use AVX:
&lt;/code&gt;</pre>

<p>docker run -e JAVA_OPTIONS=-XX:UseAVX=0 empear/ubuntu-onprem:latest</p>

<pre>&lt;code&gt;

The AVX instruction support can be verified (on Linux) via &lt;code&gt;lscpu&lt;/code&gt; - just check the &lt;code&gt;FLags&lt;/code&gt; section
if there&#039;s &#039;avx&#039; or not:
![lscpu - missing AVX flag](2020-05-04-codescene-avx-bug-lscpu.png)

As we later found, the AVX instruction wasn&#039;t supported due to &quot;Compatibility Configuration&quot;
on the Windows Server host which allowed the VMs to be easily migrated between physical hosts:
![Windows Server - VM compability configuration](2020-05-04-codescene-avx-bug-vm-compatibility.png)

The customer ended up using Tomcat installed directly on the Host Windows OS, 
but it was a really tricky support case anyway.

&lt;div id=&quot;windows-server---tomcat-and-small-heap-size&quot;&gt;&lt;/div&gt;

#### Windows Server - Tomcat and small heap size

The customer decided to switch from Docker to Tomcat deployment but the analysis was still very slow.
We thought it could be a slow IO issue again, because of dealing with another customer&#039;s installation
at the same time (see Azure Containers section below).
But It turned out they were using really fast SAN (Storage Area Network) disk storage.

Eventually, we found the root cause: **small _default_ heap** size set by Tomcat:
although the machine had 32 GB of ram, the default Max heap size set by Tomcat Windows installer
was only about ~250 MB.
After raising the max heap size manually to 12 GB the analysis finished within a hour (they have a huge repository):
![Tomcat on Windows - heap settings](2020-05-04-codescene-windows-tomcat-heap-settings.png)

&lt;div id=&quot;azure-containers---really-slow-io&quot;&gt;&lt;/div&gt;

#### Azure Containers - (really) slow IO

Another painful experience with slow shared file storage on Azure.
A customer analyzing a huge repository couldn&#039;t get the results even after a few days!
The problem is still being investigated, but we believe the issue is shared file storage used
by Azure Containers (and also Azure App Service).

CodeScene is an IO intensive application and needs a fast disk.
Thus any kind of distributed file system makes it very sad.
For these reasons [we don&#039;t recommend using Azure Files, AWS EFS et al](https://docs.enterprise.codescene.io/versions/4.0.2/getting-started/deployment-options.html#system-requirements).
I ran CodeScene via Azure App Service the last year and found it **at least 10x slower** on medium-sized
repositories compared to a deployment on a plain Linux VM.&lt;/code&gt;</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date><![CDATA[2020-05-08 04:51:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-08 04:51:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed-2]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1588956396;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:58;}i:1;a:1:{s:2:"id";i:94;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1588913519]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	